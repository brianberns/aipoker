%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: paper.dvi
%%Pages: 14
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips paper -o paper.ps
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2000.12.15:1134
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 40258431 52099146 1000 600 600 (paper.dvi)
@start
%DVIPSBitmapFont: Fa cmti9 9 34
/Fa 34 122 df<923803FF80031F13F092383F00F803F8133C4A48133E4A48137E17FE4A
5A17FC17384A481300A3141F92C8FCA55C143E011FB612E0A217C09039007E0007147C16
0F1780A214FC4A131F1700A301015C4A133EA3167E0103147C5C1718EEFC1CEEF83C0107
15385C1778177016F0010F15F04AEBF8E01679EE3FC0011FEC0F0093C7FC91C9FCA3133E
A21238EA7E3C137CEAFE7812FC485AEA79E0EA3FC0000FCAFC2F4582B42B>12
D<EC01801403A21407140FEC1F005C14FF5BEB1FFEEB7FBEEB7E7E1320EB007CA214FCA2
5CA21301A25CA21303A25CA21307A25CA2130FA25CA2131FA291C7FCA25BA2133EA2137E
A2137C13FCB512FCA3193277B127>49 D<010614C090380FC00F91B51280160015FC4913
F015C0D91CFEC7FC91C8FC133C1338A313781370A313F0EBE0FE9038E3FF809038EF03C0
3901FC01E001F87FEBF000497F485A5BC8FCA41401A4003C130300FC5CA34A5A5A00E049
5AA24A5A4AC7FC6C137E00705B387801F8383E07F0381FFFC06C90C8FCEA03F8223478B1
27>53 D<1370EA01FC1203A413F8EA00E01300B0121C127F5AA45A12380E20779F18>58
D<161C163CA2167C16FCA21501821503A2ED077E150F150E151CA21538A2157015F015E0
EC01C0A2913803807F82EC0700A2140E141E141C5CA25CA25C49B6FCA25B913880003F49
C7EA1F80A2130E131E131C133C13385B13F05B12011203D80FF0EC3FC0D8FFFE903807FF
FEA32F367BB539>65 D<0107B612C04915F017FC903A003F8000FE177FEF3F8092C7121F
A24A15C0A2147EA214FE18804A143FA20101ED7F00177E4A5C16010103EC03F04C5A4AEB
1FC091B6C7FC495C9139F0007F804AEB0FC0707E010F6E7E834A1301A2011F81A25CA213
3F5F91C71203A2494A5AA2017E4A5A4C5A01FE4A5A4CC7FC49EB01FE0001EC07FC007FB6
12F0B712C04BC8FC32337BB236>I<DB1FF013C09238FFFC010203EBFF03913A0FF00F87
8091393F8003CF9139FE0001EF4948EB00FFD903F01500D90FE080495A49488091C8123E
137E13FE485A4848153CA2485AA248481538A2485A94C7FC123F5BA3127F90CBFCA412FE
A2EE03C0A25F127E160794C7FC5E160E007F151E6C5D5E6C6C147016F06C6C495A6C6CEB
07C06C6C49C8FC6C6C133E6CB413FC90387FFFF0011F13C0D903FEC9FC323775B437>I<
0107B712F05B18E0903A003F80001F1707170392C7FC17015C18C0147EA214FEA24A130E
A20101EC1E03041C13804A91C7FC163C13035E9138F001F891B5FC5B5EECE0011500130F
5E5C1707011F01015BEEC00E0280141E92C7121C133F173C91C812381778495DA2017E14
014C5A01FE14074C5A49141F00014AB45A007FB7FCB8FC94C7FC34337CB234>69
D<92391FE001809238FFF8030207EBFE07913A1FF01F0F0091393F80079F9139FE0003DF
D901F86DB4FCD907F05C49481300495A4948147E49C8127C137E13FE485A48481578A248
5AA248481570A2485A94C7FC123F5BA3127F90CBFCA400FE91383FFFFCA25F9238003F80
94C7FCA2007E5DA2167EA2007F15FE7E5E6C6C1301A26C6C495A6D13076C6CEB0F786C6C
133E3A00FF01FC3090387FFFF0011F01C0C8FCD903FEC9FC313775B43B>71
D<010FB51280A216009038003FC05DA292C7FCA25CA2147EA214FEA25CA21301A25CA213
03A25CA21307A25CA2130FA25CA2131FA25CA2133FA291C8FCA25BA2137EA213FEA25B12
01B512F8A25C21337BB21E>73 D<91381FFFFE5C16FC9138003F80A31600A25D157EA315
FE5DA314015DA314035DA314075DA3140F5DA3141F5DA3143F92C7FCA2121C007E5B00FE
137EA214FE485BEAF80100E05B495A387007E038780FC06C48C8FCEA1FFCEA07F0273579
B228>I<0107B512C05BA29026003FC0C7FC5DA292C8FCA25CA2147EA214FEA25CA21301
A25CA21303A25CA21307A25CA2130FA25C17E0011F140117C05C1603013F1580160791C7
FCEE0F005B5E017E143EA201FE5CED01FC4913030001EC1FF8007FB6FCB7FC5E2B337CB2
30>76 D<902607FF8090383FFFC0496D5BA2D9001F913803F8004A6C6D5A6060EC3BF002
7B140360EC71F8A202F11407DAF0FC91C7FC14E0A20101017E5B170E14C0810103151EEE
801CEC801FA20107ECC03C030F1338140016E049010713781770010E14F01503011E15F0
705A011C1301A2013C14FD03005B133816FF0178147F5F0170143FA213F070C8FC1201EA
07F8267FFF807FB5140EA23A337BB239>78 D<0107B612C04915F883903A003F8001FEEE
003FEF1F8092C713C0170F5C18E0147EA214FEEF1FC05CA201011680173F4A1500177E01
0315FE5F4AEB03F8EE07E00107EC3FC091B6C7FC16F802E0C9FC130FA25CA2131FA25CA2
133FA291CAFCA25BA2137EA213FEA25B1201387FFFF0B5FCA233337CB234>80
D<0107B512FE49ECFFC017F0903A003F8007F8EE01FCEE007E92C7127F835C1880147EA2
14FEEF7F005CA2010115FE5F4A13015F01034A5AEE0FC04A495A04FEC7FC49B512F016C0
9138E003E0ED01F8010F6D7E167C4A137EA2131FA25CA2013F14FEA291C7FCA24913015E
137EEF01C001FE150318805B00011607277FFFF0001400B5ECFE0EEE7E1CC9EA1FF8EE07
E032357BB238>82 D<0003B812C05A1880903AF800FC003F260FC001141F0180150F0100
5B001EEE07001403121C003C4A5BA200380107140E127800705CA2020F141E00F0161CC7
4990C7FCA2141FA25DA2143FA292C9FCA25CA2147EA214FEA25CA21301A25CA21303A25C
A21307A25C497E001FB512F05AA2323374B237>84 D<EB03F0EB0FF890383E1C6090387C
0FF0EBF807EA01F0EA03E00007EB03E0EA0FC0A2381F800715C0EA3F00A2140F48148012
7EA2141F00FE14005A1506EC3F07EC3E0F150E147E007C141EECFE1CEB01FCD83C03133C
393E07BE38391F0E1E783907FC0FF03901F003C0202278A027>97
D<14FCEB07FF90381F078090383E03C0EBFC013801F8033803F0073807E00F13C0120F39
1F80070091C7FC48C8FCA35A127EA312FE5AA4007C14C0EC01E0A2EC03C06CEB0F80EC1F
006C137C380F81F03803FFC0C648C7FC1B2278A023>99 D<ED0FC0EC03FFA21680EC001F
A31600A25DA2153EA2157EA2157CA215FCA2903803F0F8EB0FF8EB3E1DEB7C0F496C5AEA
01F0EA03E000071303D80FC05BA2381F8007A2D83F005BA2140F5A007E5CA2141F12FE48
91C7FC1506EC3F075DEC3E0E147E007C141EECFE1CEB01FCD83C03133C393E07BE38391F
0E1E783907FC0FF03901F003C0223578B327>I<EB03F8EB0FFEEB3E0F9038F807803801
F003EA03E0EA07C0120FEA1F801407D83F0013005C007E133EEB03F8387FFFE04848C7FC
00FCC8FCA45AA4EC0180EC03C0A2007CEB0780EC1F00003C133E6C13F8380F03E03807FF
80D801FCC7FC1A2277A023>I<151FED7FC0EDF0E0020113F0EC03E3A2EC07C316E0EDC1
C091380FC0005DA4141F92C7FCA45C143E90381FFFFEA3D9007EC7FC147CA414FC5CA513
015CA413035CA413075CA3130FA25CA3131F91C8FCA35B133E1238EA7E3CA2EAFE7812FC
485AEA78E0EA3FC0000FC9FC244582B418>I<143FECFF80903803E1E6903807C0FF9038
0F807FEB1F00133E017E133F49133EA24848137EA24848137CA215FC12074913F8A21401
A2D80FC013F0A21403120715E01407140F141F3903E03FC00001137FEBF0FF38007FCF90
381F0F801300141FA21500A25C143E1238007E137E5C00FE5B48485A387803E0387C0F80
D81FFFC7FCEA07F820317CA023>I<EB0FC0EA03FFA25CEA001FA391C8FCA25BA2133EA2
137EA2137CA213FCA29038F83F80ECFFE03901FBE0F09038FF80F8EC007849137C485A5B
5BA2484813FC5D5BA2000F13015D1380A2001F13035DEB0007EDC0C048ECC1E0020F13C0
003E1481A2007E1483ED0380007C1407160000FC140E151E48EB07F80070EB01F023357B
B327>I<EB0180EB07E0A2130FEB07C0EB038090C7FCABEA01F0EA03FCEA0F1E120E121C
123C1238EA783E1270A2137EEAF07CEA60FCC65AA212015BA212035BA2000713C0EBC1E0
000F13C01381A21383EB038013071400130E131EEA07F8EA01F013337AB118>I<133FEA
07FF5A13FEEA007EA3137CA213FCA213F8A21201A213F0A21203A213E0A21207A213C0A2
120FA21380A2121FA21300A25AA2123EA2127EA2127C1318EAFC1C133CEAF838A2137813
7012F013F0EAF8E01279EA3FC0EA0F00103579B314>108 D<2703C003F8137F3C0FF00F
FE01FFC03C1E783C1F07C1E03C1C7CF00F8F01F03B3C3DE0079E0026383FC001FC7FD97F
805B007001005B5E137ED8F0FC90380FC00100E05FD860F8148012000001021F13036049
1400A200034A13076049013E130FF081800007027EEC83C0051F138049017C1403A2000F
02FC1407053E130049495CEF1E0E001F01015D183C010049EB0FF0000E6D48EB03E03A22
7AA03F>I<3903C007F0390FF01FFC391E787C1E391C7CF01F393C3DE00F26383FC01380
EB7F8000781300EA707EA2D8F0FC131F00E01500EA60F8120000015C153E5BA20003147E
157C4913FCEDF8180007153C0201133801C013F0A2000F1578EDE070018014F016E0001F
ECE1C015E390C7EAFF00000E143E26227AA02B>I<14FCEB07FF90381F07C090383E03E0
9038FC01F0EA01F83903F000F8485A5B120F484813FCA248C7FCA214014814F8127EA214
0300FE14F05AA2EC07E0A2007CEB0FC01580141FEC3F006C137E5C381F01F0380F83E038
03FF80D800FCC7FC1E2278A027>I<3903C00FC0390FF03FF0391E78F078391C7DE03C39
3C3FC0FC00381380EB7F00007814F8D8707E13701500EAF0FC12E0EA60F812001201A25B
A21203A25BA21207A25BA2120FA25BA2121FA290C8FC120E1E227AA020>114
D<EB03F0EB1FFCEB3C1EEB780FEBF007EA01E0140F0003131F13C0A2EBE00414007FEBFF
8014E06C13F06C13F8EB7FFC1307EB00FE147E143E123800FC133CA3147C00F013784813
F0EAF001387803E0383C0F80381FFE00EA03F818227AA01F>I<1303EB0F80A3131FA214
00A25BA2133EA2137EA2137C387FFFF8A2B5FC3800F800A21201A25BA21203A25BA21207
A25BA2120FA25B1460001F13F014E01300130114C01303001E1380EB07005BEA0F1EEA07
F8EA01E015307AAE19>I<EA01F0D803FC1307D80F1E5B000E5C121C123C00385CD8783E
133E1270A2017E137ED8F07C137CEA60FCC65A15FC00015C5BA2140100035C13E0166002
031370EDE0F0D807C014E0A20003EB07E116C09038E00FC1EC1FC3000190383FE3809038
F071E73A007FE0FF0090381F803C24227AA029>I<01F01338D803FC13FCEA0F1E120E12
1C123C0038147CEA783E0070143CA2137ED8F07C1338EA60FCC65A1578000114705BA215
F0000314E05BA2EC01C0A2EBC003158014071500EBE00EA26C6C5A3800F878EB7FE0EB1F
801E227AA023>I<13F0D803FC1307D80F1E130F000E141F121C123C0038143FD8783E13
3E1270A2017E137ED8F07C137CEA60FCC65A15FC000114F85BA21401000314F013E0A214
0315E0EA07C0A20003130715C0EBE00F141F0001133F9038F07F8038007FEFEB1F8FEB00
1F1500A25C003E133E007E137E147C5C007C5BEA7001495A38380780D83C1FC7FCEA0FFC
EA07F020317AA025>121 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmmi7 7 3
/Fb 3 115 df<EA01F0123FA2EA03E0A21207A25BA2120FA25BA2121F139FEB3FC0EBE0
E0383FC0F0EB0078A2123E007E137CA2127CA212FC14F85AA338F001F0A214E0130314C0
EB078038700F00EA781E6C5AEA1FF0EA07C016297CA71D>98 D<EB0FE0EB3FF8EBF81C38
01E00E3803803E0007137EEA0F00001E137C123E003C1300127CA25AA45AA31404140C00
78131814306C13E0381E07C0380FFF00EA03F8171B7C991E>I<3807803E390FE0FF8038
18F3C13930F703C0EBFE073860FC0F13F8158039C1F0070091C7FC1201A2485AA4485AA4
485AA448C8FCA2120E1A1B7D991F>114 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmsy10 10 2
/Fc 2 3 df<007FB81280B912C0A26C17803204799641>0 D<0060150600F8150F6C151F
007E153F6C157E6C6C14FC6C6CEB01F86C6CEB03F06C6CEB07E06C6CEB0FC06C6CEB1F80
017EEB3F006D137E6D6C5A90380FC1F8903807E3F0903803F7E06DB45A6D5B6EC7FCA24A
7E497F903803F7E0903807E3F090380FC1F890381F80FC90383F007E017E7F49EB1F8048
48EB0FC04848EB07E04848EB03F04848EB01F84848EB00FC48C8127E007E153F48151F48
150F00601506282874A841>2 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmmi10 10 8
/Fd 8 115 df<121C127FEAFF80A5EA7F00121C0909798817>58
D<121C127FEAFF80A213C0A3127F121C1200A412011380A2120313005A1206120E5A5A5A
12600A19798817>I<EF0380EF0FC0173FEFFF80933803FE00EE0FF8EE3FE0EEFF80DB03
FEC7FCED0FF8ED3FE0EDFF80DA03FEC8FCEC0FF8EC3FE0ECFF80D903FEC9FCEB0FF8EB3F
E0EBFF80D803FECAFCEA0FF8EA3FE0EA7F8000FECBFCA2EA7F80EA3FE0EA0FF8EA03FEC6
6C7EEB3FE0EB0FF8EB03FE903800FF80EC3FE0EC0FF8EC03FE913800FF80ED3FE0ED0FF8
ED03FE923800FF80EE3FE0EE0FF8EE03FE933800FF80EF3FC0170FEF0380323279AD41>
I<0103B77E4916F018FC903B0007F80003FE4BEB00FFF07F80020FED3FC0181F4B15E0A2
141FA25DA2143F19C04B143F1980027F157F190092C812FE4D5A4A4A5AEF0FF04AEC1FC0
05FFC7FC49B612FC5F02FCC7B4FCEF3FC00103ED0FE0717E5C717E1307844A1401A2130F
17035CA2131F4D5A5C4D5A133F4D5A4A4A5A4D5A017F4BC7FC4C5A91C7EA07FC49EC3FF0
B812C094C8FC16F83B397DB83F>66 D<133FEA1FFFA3C67E137EA313FE5BA312015BA312
035BA31207EBE0FCEBE3FF9038E707C0390FFE03E09038F801F001F013F8EBE000485A15
FC5BA2123F90C7FCA214015A127EA2140312FE4814F8A2140715F05AEC0FE0A215C0EC1F
80143F00781400007C137E5C383C01F86C485A380F07C06CB4C7FCEA01FC1E3B7CB924>
98 D<EC3FC0903801FFF0903807E03C90380F800E90383F0007017E131F49137F484813
FF485A485A120F4913FE001F143848481300A2127F90C8FCA35A5AA45AA315031507007E
1406150E003E143C003F14706C14E0390F8007C03907C03F003801FFF838003FC020267D
A424>I<163FED1FFFA3ED007F167EA216FEA216FCA21501A216F8A21503A216F0A21507
A2027E13E0903803FF8790380FC1CF90381F00EF017EEB7FC049133F485A4848131F0007
15805B000F143F485A1600485A5D127F90C7127EA215FE5A485CA21401A248ECF80CA214
03161CEDF0181407007C1538007E010F1330003E131F027B13706C01E113E03A0F83C0F9
C03A03FF007F80D800FCEB1F00283B7DB92B>I<3903E001F83907F807FE390E3C1E0739
1C3E381F3A183F703F800038EBE07F0030EBC0FF00705B00601500EC007E153CD8E07F90
C7FCEAC07EA2120013FE5BA312015BA312035BA312075BA3120F5BA3121F5B0007C9FC21
267EA425>114 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmti10 10 32
/Fe 32 122 df<04FFEB03F003039038E00FFC923A0FC0F01F1E923A3F00783E0F923A7E
01F87C3FDB7C03EBFC7F03FC14F8DA01F813F905F1137EDC01E1133C913B03F00003F000
A314074B130760A3140F4B130F60A3010FB812C0A3903C001F80001F8000A3023F143F92
C790C7FCA44A5C027E147EA402FE14FE4A5CA413014A13015FA313034A13035FA313074A
495AA44948495AA44948495AA3001CD9038090C8FC007E90380FC03F013E143E00FE011F
5B133C017C5C3AF8780F01E0D878F0EB07C0273FE003FFC9FC390F8000FC404C82BA33>
11 D<EA01E0EA07F0120F13F8121FA3120FEA07B0EA0030A21370136013E013C0120113
801203EA0700120E5A5A5A5A5A0D196EB919>39 D<387FFFF8A2B5FCA214F0150579941E
>45 D<15181538157815F0140114031407EC0FE0141F147FEB03FF90383FEFC0148FEB1C
1F13001580A2143FA21500A25CA2147EA214FEA25CA21301A25CA21303A25CA21307A25C
A2130FA25CA2131FA25CA2133FA291C7FC497EB61280A31D3877B72A>49
D<EC03F8EC0FFE91383C0F809138F007C0903901E003E0D903C013F09038078001020013
F8130E131E90391C6000FCEB3870EC30011370A213F013E0EC70030001016013F813C014
E0ECC00701C114F0903881800F018314E09039C7001FC001FEEB3F80D80078140090C712
7E5D4A5A4A5AEC07C0EC1F80023EC7FC14FCEB01F0EB07C0495A011EC8FC137C4914C048
4813015B485A4848130348C71380000E1407001E140F48EC1F00D83FF85B397FFFC07E39
783FFFFCEA700FD8F0075BD8E0015B6D13C0021FC7FC263A79B72A>I<0107B612FCEFFF
8018C0903B000FF0001FF04BEB07F81703021F15FC17014B14FEA2023F1400A24B1301A2
147F18FC92C7120318F84A140718F04AEC0FE0EF1FC00101ED3F80EF7F004AEB01FEEE07
F849B612E05F9139F80007F0EE01FC01076E7E177F4AEC3F80A2010F16C0171F5CA2131F
173F5CA2133FEF7F805C1800017F5D4C5A91C7485A5F49140FEE1FE0494A5A00014AB45A
B748C7FC16F816C037397BB83A>66 D<0103B5D8F80FB512E0A390260007F8C7381FE000
4B5DA2020F153F615DA2021F157F96C7FC5DA2023F5D605DA2027F14016092C7FCA24A14
03605CA249B7FC60A202FCC712070103150F605CA20107151F605CA2010F153F605CA201
1F157F95C8FC5CA2013F5D5F5CA2017F14015F91C7FC491403007FD9FE01B512F8B55BA2
43397CB83E>72 D<0103B512F8A390390007F8005DA2140FA25DA2141FA25DA2143FA25D
A2147FA292C7FCA25CA25CA21301A25CA21303A25CA21307A25CA2130FA25CA2131FA25C
A2133FA25CA2137FA291C8FC497EB6FCA25C25397CB820>I<0107B612F817FF1880903B
000FF0003FE04BEB0FF0EF03F8141FEF01FC5DA2023F15FEA25DA2147FEF03FC92C7FCA2
4A15F817074A15F0EF0FE01301EF1FC04AEC3F80EFFE0001034A5AEE0FF091B612C04CC7
FCD907F8C9FCA25CA2130FA25CA2131FA25CA2133FA25CA2137FA291CAFCA25BA25B1201
B512FCA337397BB838>80 D<0103B612F017FEEFFF80903B0007F8003FC04BEB0FF01707
020FEC03F8EF01FC5DA2021F15FEA25DA2143FEF03FC5DA2027FEC07F818F092C7120F18
E04AEC1FC0EF3F004A14FEEE01F80101EC0FE091B6128004FCC7FC9138FC003F0103EC0F
80834A6D7E8301071403A25C83010F14075F5CA2011F140FA25CA2133F161F4AECE007A2
017F160F180E91C7FC49020F131C007F01FE153CB5913807F078040313F0CAEAFFE0EF3F
80383B7CB83D>82 D<14F8EB07FE90381F871C90383E03FE137CEBF801120148486C5A48
5A120FEBC001001F5CA2EA3F801403007F5C1300A21407485C5AA2140F5D48ECC1C0A214
1F15831680143F1587007C017F1300ECFF076C485B9038038F8E391F0F079E3907FE03FC
3901F000F0222677A42A>97 D<133FEA1FFFA3C67E137EA313FE5BA312015BA312035BA3
1207EBE0F8EBE7FE9038EF0F80390FFC07C013F89038F003E013E0D81FC013F0A21380A2
123F1300A214075A127EA2140F12FE4814E0A2141F15C05AEC3F80A215005C147E5C3878
01F8007C5B383C03E0383E07C0381E1F80D80FFEC7FCEA01F01C3B77B926>I<147F9038
03FFC090380FC1E090381F0070017E13784913383901F801F83803F003120713E0120FD8
1FC013F091C7FC485AA2127F90C8FCA35A5AA45AA3153015381578007C14F0007EEB01E0
003EEB03C0EC0F806CEB3E00380F81F83803FFE0C690C7FC1D2677A426>I<ED01F815FF
A3150316F0A21507A216E0A2150FA216C0A2151FA21680A2153FA202F81300EB07FE9038
1F877F90383E03FF017C5BEBF80112013803F00048485B120FEBC001121F5DEA3F801403
127F01005BA214075A485CA2140FA248ECC1C0A2141F15C3ED8380143F1587007C017F13
00ECFF076C485B9038038F8E391F0F079E3907FE03FC3901F000F0253B77B92A>I<147F
903803FFC090380FC1E090383F00F0017E13785B485A485A485A120F4913F8001F14F038
3F8001EC07E0EC1F80397F81FF00EBFFF891C7FC90C8FC5A5AA55AA21530007C14381578
007E14F0003EEB01E0EC03C06CEB0F806CEB3E00380781F83803FFE0C690C7FC1D2677A4
26>I<EC07C0EC3FF09138FC38E0903901F01FF0EB03E0903807C00FEB0F80011F1307D9
3F0013E05B017E130F13FE4914C01201151F1203491480A2153F1207491400A25DA24913
7EA215FEA25D00031301140314076C6C485A0000131FEB787BEB3FF390380FC3F0EB0003
1407A25DA2140F5D121C007E131F5D00FE49C7FC147E5C387801F8387C07E0381FFF80D8
03FEC8FC24367CA426>103 D<EB03F0EA01FFA3EA00075CA3130F5CA3131F5CA3133F91
C8FCA35B90387E07F0EC1FFCEC783E9038FFE01F02C01380EC800F1400485A16C05B49EB
1F8012035BA2153F000715005BA25D000F147E5B15FE5D121FD98001131C15F8163C003F
01031338010013F0A216704814E0007E15F016E0EDE1C000FE903801E38048903800FF00
0038143C263B7BB92A>I<EB01C0EB07E014F0130F14E01307EB038090C7FCAB13F0EA03
FCEA071EEA0E1F121CA212385B1270A25BEAF07E12E013FEC65AA212015B1203A25B1207
5BA2000F13E013C013C1001F13C01381A2EB83801303EB0700A2130E6C5AEA07F8EA01E0
143879B619>I<EB03F0EA01FFA3EA00075CA3130F5CA3131F5CA3133F91C8FCA35B017E
EB0F80ED3FE015F09039FE01C1F09038FC0387EC0707140E0001011C13E0EBF838913830
03800270C7FC00035BEBF1C0EBF38001FFC8FCEA07FC7FEBFFC0EBE7F8380FE1FCEBC07E
147F80001F809039801F81C0A21583003F013F138001001303A21507481500007E133EEC
1E0E151E00FE6D5A48EB07F80038EB01E0243B7BB926>107 D<EB0FC0EA07FFA3EA001F
1480A2133FA21400A25BA2137EA213FEA25BA21201A25BA21203A25BA21207A25BA2120F
A25BA2121FA25BA2123FA290C7FCA25AA2EA7E0EA212FE131EEAFC1CA2133C133812F813
78EA7870EA7CE0121FEA0F80123B79B915>I<D801E001FEEB07F03C07F803FF801FFC3C
0E3C0F07C0783E3C1E3E3C03E1E01F261C1F78D9F3C013803C383FF001F7800F02E01400
007801C013FE007018C002805B4A4848EB1F80EAF07FD8E07E5CA200000207143F01FE17
00495CA2030F5C0001177E495C18FE031F5C120349DA8001131C18F8033F153C00070403
133849020013F0A24B1570000F17E049017E15F019E003FEECE1C0001FEE01E349499038
00FF000007C70038143C3E2679A444>I<D801E013FE3A07F803FF803A0E3C0F07C03A1E
3E3C03E0261C1F787F39383FF00114E0007813C000708114804A485AEAF07FEAE07EA200
00140701FE5C5BA2150F00015D5B151F5E12034990383F8380160316070007027F130049
137EA2160E000F147C49141E161C5E001FEC3C7849EB1FE00007C7EA0780292679A42F>
I<147F903803FFC090380FC1F090381F00F8017E137C5B4848137E4848133E0007143F5B
120F485AA2485A157F127F90C7FCA215FF5A4814FEA2140115FC5AEC03F8A2EC07F015E0
140F007C14C0007EEB1F80003EEB3F00147E6C13F8380F83F03803FFC0C648C7FC202677
A42A>I<9039078007C090391FE03FF090393CF0787C903938F8E03E9038787FC0017049
7EECFF00D9F0FE148013E05CEA01E113C15CA2D80003143FA25CA20107147FA24A1400A2
010F5C5E5C4B5A131F5EEC80035E013F495A6E485A5E6E48C7FC017F133EEC70FC90387E
3FF0EC0F8001FEC9FCA25BA21201A25BA21203A25B1207B512C0A3293580A42A>I<3903
C003F0390FF01FFC391E783C0F381C7C703A3C3EE03F8038383FC0EB7F80007815000070
1300151CD8F07E90C7FCEAE0FE5BA2120012015BA312035BA312075BA3120F5BA3121F5B
A3123F90C9FC120E212679A423>114 D<14FE903807FF8090380F83C090383E00E04913
F00178137001F813F00001130313F0A215E00003EB01C06DC7FC7FEBFFC06C13F814FE6C
7F6D13807F010F13C01300143F141F140F123E127E00FE1480A348EB1F0012E06C133E00
705B6C5B381E03E06CB45AD801FEC7FC1C267AA422>I<EB0380EB07C0130FA4131F1480
A3133F1400A35B137E007FB5FCA2B6FC3800FC00A312015BA312035BA312075BA3120F5B
A3121FEB801CA2143C003F1338EB0078147014F014E0EB01C0EA3E03381F0780380F0F00
EA07FCEA01F0183579B31C>I<13F8D803FEEB01C0D8078FEB03E0390E0F8007121E121C
0038140F131F007815C01270013F131F00F0130000E015805BD8007E133FA201FE14005B
5D120149137EA215FE120349EBFC0EA20201131E161C15F813E0163CD9F0031338140700
01ECF07091381EF8F03A00F83C78E090393FF03FC090390FC00F00272679A42D>I<01F0
130ED803FC133FD8071EEB7F80EA0E1F121C123C0038143F49131F0070140FA25BD8F07E
140000E08013FEC6485B150E12015B151E0003141C5BA2153C000714385B5DA35DA24A5A
140300035C6D48C7FC0001130E3800F83CEB7FF8EB0FC0212679A426>I<01F01507D803
FC903903801F80D8071E903907C03FC0D80E1F130F121C123C0038021F131F49EC800F00
701607A249133FD8F07E168000E0ED000313FEC64849130718000001147E5B03FE5B0003
160E495BA2171E00070101141C01E05B173C1738A217781770020314F05F000301071301
6D486C485A000190391E7C07802800FC3C3E0FC7FC90393FF81FFE90390FE003F0322679
A437>I<903907E007C090391FF81FF89039787C383C9038F03E703A01E01EE0FE3803C0
1F018013C0D8070014FC481480000E1570023F1300001E91C7FC121CA2C75AA2147EA214
FEA25CA21301A24A1370A2010314F016E0001C5B007E1401010714C000FEEC0380010F13
07010EEB0F0039781CF81E9038387C3C393FF03FF03907C00FC027267CA427>I<13F0D8
03FCEB01C0D8071EEB03E0D80E1F1307121C123C0038140F4914C01270A249131FD8F07E
148012E013FEC648133F160012015B5D0003147E5BA215FE00075C5BA214015DA314035D
14070003130FEBF01F3901F87FE038007FF7EB1FC7EB000F5DA2141F003F5C48133F92C7
FC147E147C007E13FC387001F8EB03E06C485A383C1F80D80FFEC8FCEA03F0233679A428
>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmbx10 10 9
/Ff 9 124 df<141E143E14FE1307133FB5FCA313CFEA000FB3B3A6007FB61280A42137
79B630>49 D<EB0FFC90387FFFC048B512F0000714FC390FF03FFF261F800F1380263F00
0313C05AD9C00113E0486C6C13F07FA2ED7FF8A46C5A6C5A000FC7FCC8FCEDFFF0A216E0
5C16C04A138016004A5A5D4A5A4A5A4A5AEC7F8092C7FC14FEEB01F849481378495A495A
495A013EC712F84914F05B4848130148B6FCA25A5A5A5A4815E0B7FCA425377BB630>I<
EB03FF011F13F0017F13FC3901FC07FF2603F003138048486C13C0496C13E0EA0FF001FC
14F0121F7FA56C4814E0A23803F001C714C04A138016004A5A4A5AEC3FF090380FFFC092
C7FC15F090380007FE913801FF806E13C016E0ED7FF016F816FC153FA216FEEA1FC0487E
487E487EA416FCA249EB7FF8127F01C0EBFFF06C4814E06C6C4813C0260FFC0713806CB6
1200000114FC6C6C13F0010790C7FC27387CB630>I<B712FCEEFFE017FC17FF28007FF8
000F13C004017F707F717E717EA2717EA284A760A24D5A604D5A4D5A04035B041F90C8FC
91B612FC17E0839139F8003FFCEE0FFF707F707F8284A2707FA584A51A601AF084177F19
01DD3FFE13E0B600FC011F130394390FFF87C071EBFF8005011400CBEA1FFC443A7DB848
>82 D<EE7F80ED7FFFA4150381AF903801FF81010F13F1013F13FD9038FFC07F0003EB00
1FD807FC1307000F8048487F5B123FA2485AA312FFAA127FA27F123FA26C6C5B000F5C6C
6C5B6C6C4913C02701FF80FD13FE39007FFFF9011F13E1010313012F3A7DB935>100
D<01FEEB7FC000FF903803FFF8020F13FE91381F03FFDA3C011380000713780003497E6D
4814C05CA25CA291C7FCB3A3B5D8FC3F13FFA430257DA435>110
D<903801FFC0010F13F8017F13FFD9FF807F3A03FE003FE048486D7E48486D7E48486D7E
A2003F81491303007F81A300FF1680A9007F1600A3003F5D6D1307001F5DA26C6C495A6C
6C495A6C6C495A6C6C6CB45A6C6CB5C7FC011F13FC010113C029257DA430>I<01FFEC3F
C0B5EB3FFFA4000714016C80B3A35DA25DA26C5C6E4813E06CD9C03E13FF90387FFFFC01
1F13F00103138030257DA435>117 D<B812FEA32F03809730>123
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmbx12 12 37
/Fg 37 122 df<EA07C0EA1FF0487E487E487E7FA31480A37E7EEA1FF7EA07C7EA000713
0FA21400A25B131E133EA25B13FC5B485A485A1207485A485A90C7FC120C112278C41F>
39 D<B612F8A91D097F9A25>45 D<EC03C01407141F147FEB03FF133FB6FCA413C3EA00
03B3B3ADB712FCA5264177C038>49 D<ECFFE0010F13FE013F6D7E90B612E0000315F826
07FC0313FE3A0FE0007FFFD81F806D138048C7000F13C0488001C015E001F07F00FF6E13
F07F17F881A46C5A6C5A6C5AC9FC17F05DA217E05D17C04B13804B1300A2ED1FFC4B5A5E
4B5A4B5A4A90C7FC4A5A4A5AEC0FF04A5AEC3F804AC7127814FE495A494814F8D907E014
F0495A495A49C8FC017C140149140348B7FC4816E05A5A5A5A5AB8FC17C0A42D417BC038
>I<ECFFF0010713FF011F14C0017F14F049C66C7ED803F8EB3FFED807E06D7E81D80FF8
6D138013FE001F16C07FA66C5A6C4815806C485BC814005D5E4B5A4B5A4B5A4A5B020F13
80902607FFFEC7FC15F815FF16C090C713F0ED3FFCED0FFEEEFF80816F13C017E0A26F13
F0A217F8A3EA0FC0EA3FF0487EA2487EA217F0A25D17E06C5A494913C05BD83F80491380
D81FF0491300D80FFEEBFFFE6CB612F800015D6C6C14C0011F49C7FC010113E02D427BC0
38>I<163FA25E5E5D5DA25D5D5D5DA25D92B5FCEC01F7EC03E7140715C7EC0F87EC1F07
143E147E147C14F8EB01F0EB03E0130714C0EB0F80EB1F00133E5BA25B485A485A485A12
0F5B48C7FC123E5A12FCB91280A5C8000F90C7FCAC027FB61280A531417DC038>I<0007
150301E0143F01FFEB07FF91B6FC5E5E5E5E5E16804BC7FC5D15E092C8FC01C0C9FCAAEC
3FF001C1B5FC01C714C001DF14F09039FFE03FFC9138000FFE01FC6D7E01F06D13804915
C0497F6C4815E0C8FC6F13F0A317F8A4EA0F80EA3FE0487E12FF7FA317F05B5D6C4815E0
5B007EC74813C0123E003F4A1380D81FC0491300D80FF0495AD807FEEBFFFC6CB612F0C6
5D013F1480010F01FCC7FC010113C02D427BC038>I<4AB47E021F13F0027F13FC49B6FC
01079038807F8090390FFC001FD93FF014C04948137F4948EBFFE048495A5A1400485A12
0FA248486D13C0EE7F80EE1E00003F92C7FCA25B127FA2EC07FC91381FFF8000FF017F13
E091B512F89039F9F01FFC9039FBC007FE9039FF8003FF17804A6C13C05B6F13E0A24915
F0A317F85BA4127FA5123FA217F07F121FA2000F4A13E0A26C6C15C06D4913806C018014
006C6D485A6C9038E01FFC6DB55A011F5C010714C0010191C7FC9038003FF02D427BC038
>I<EE1F80A24C7EA24C7EA34C7EA24B7FA34B7FA24B7FA34B7F169F031F80161F82033F
80ED3E07037E80157C8203FC804B7E02018115F0820203814B137F0207815D173F020F81
4B7F021F8292C77EA24A82023E80027E82027FB7FCA291B87EA2498302F0C8FCA2010383
4A157F0107834A153FA249488284011F8491C97E4984133E017E82B6020FB612F0A54C45
7CC455>65 D<B9FC18F018FE727E19E026003FFCC700077F05017F716C7E727E727EA272
1380A37213C0A74E1380A24E1300A24E5A4E5A4E5A4D5B05075B94B5128091B700FCC7FC
18F018FF19E002FCC7000113F8716C7EF01FFE727E7213801AC07213E0A27213F0A31AF8
A71AF0A2601AE0604E13C0604E138095B5120005075BBA12F86119C04EC7FC18E045447C
C350>I<DCFFF01470031F01FF14F04AB6EAE0010207EDF803023FEDFE0791B539E001FF
0F4949C7EA3F9F010701F0EC0FFF4901C0804990C87E4948814948814948167F4849163F
4849161F5A4A160F485B19074890CAFC19035A5BA2007F1801A34994C7FC12FFAE127F7F
1AF0A2123FA27F6C18011AE06C7F19036C6D17C06E16077E6C6DEE0F806C6DEE1F006D6C
5E6D6C167E6D6C6C5D6D6D4A5A6D01F0EC07F0010101FEEC1FE06D903AFFF001FF80023F
90B6C7FC020715FC020115F0DA001F1480030001F8C8FC44467AC451>I<BA12F8A485D8
001F90C71201EF003F180F180318011800A2197E193EA3191EA21778A285A405F890C7FC
A316011603161F92B5FCA5ED001F160316011600A2F101E01778A2F103C0A494C7FC1907
A21A80A2190FA2191FA2193FF17F0061601807181F4DB5FCBBFC61A443447DC34A>69
D<B7D88003B612FEA526003FFEC9EBF800B3A791B9FCA54AC9FCB3AAB7D88003B612FEA5
4F447CC358>72 D<B712E0A5D8001F90C7FCB3B3B3A4B712E0A523447DC32A>I<B9FC18
F018FE727E19E0D8001F90C7000F7F05017F716C7E727E727E721380A21AC084A21AE0A9
1AC0A24E1380A21A00604E5A4E5A4D485A050F5B92B712C096C7FC18FC18C092CBFCB3A7
B712E0A543447DC34D>80 D<B812F8EFFFC018F818FE727ED8001F90C7003F13E005037F
05007F727E727E727EA28684A286A762A24E90C7FCA24E5A61187F943801FFF005075B05
3F138092B7C8FC18F818E018F892C77FEF3FFF050F7F717F717FA2717FA2717FA785A61B
0F85A2187F73131F72141EB700E06DEB803E72EBE0FC72EBFFF8060114F0726C13E0CC00
07138050457DC354>82 D<DAFFE0131C010701FE133C013F9038FF807C90B6EAE0FC4815
F9489038801FFF3907FC00014848EB007F4848143F4848140F491407007F15035B160116
0012FF177CA27FA26D153C7F7F6D92C7FC6C7EEBFFE014FE6CEBFFF015FF6C15E016FC6C
816C6F7E6C826C826C6C81011F810107811300020F80140003077FED007F82040F138082
8212F082A282A27EA218007EA26C5D6C5E6D14036D5D6D140701F84A5A01FFEC3FF002F8
EBFFE0486CB65AD8FC1F92C7FCD8F80714FC48C614F0480107138031467AC43E>I<9038
01FFE0011F13FE017F6D7E48B612E03A03FE007FF84848EB1FFC6D6D7E486C6D7EA26F7F
A36F7F6C5A6C5AEA00F090C7FCA40203B5FC91B6FC1307013F13F19038FFFC01000313E0
000F1380381FFE00485A5B127F5B12FF5BA35DA26D5B6C6C5B4B13F0D83FFE013EEBFFC0
3A1FFF80FC7F0007EBFFF86CECE01FC66CEB8007D90FFCC9FC322F7DAD36>97
D<EC3FFC49B512C0010F14F0013F14FC90397FF003FE9039FFC001FF0003495A48494813
805B120F485AA2485A6F1300007F6E5AED00784991C7FCA212FFAC6C7EA3123F6DEC03C0
A26C6C1407000F16806D140F6C6DEB1F006C6D133E6C01F05B3A007FFC03F86DB55A010F
14C0010391C7FC9038003FF82A2F7CAD32>99 D<EE03FEED07FFA5ED001F160FB1EC3FE0
903803FFFC010FEBFF8F013F14CF9039FFF807FF48EBC00148903880007F4890C7123F48
48141F49140F121F485AA3127F5BA212FFAC127FA37F123FA26C6C141FA26C6C143F0007
157F6C6C91B5FC6CD9C00314FC6C9038F01FEF6DB5128F011FEBFE0F010713F89026007F
C0EBF80036467CC43E>I<EC3FF80103B57E010F14E0013F8090397FF83FF89039FFC007
FC48496C7E48496C7E48486D1380485A001FED7FC05B003FED3FE0A2127F5B17F0161F12
FFA290B7FCA401F0C9FCA5127FA27FA2123F17F06C7E16016C6C15E06C6C14036C6DEB07
C06C6DEB0F806C01F0EB3F0090397FFE01FE011FB55A010714F0010114C09026001FFEC7
FC2C2F7DAD33>I<EDFF80020F13E0027F13F049B512F849EB8FFC90390FFE0FFE90381F
FC1F14F8133FEB7FF0A2ED0FFCEBFFE0ED03F0ED00C01600ABB612F8A5C601E0C7FCB3B0
007FEBFFE0A527467DC522>I<DAFFE0137E010F9039FE03FF80013FEBFF8F90B812C048
D9C07F133F489038001FF84848EB0FFC4848903907FE1F80001F9238FF0F00496D90C7FC
A2003F82A8001F93C7FCA26D5B000F5D6C6C495A6C6C495A6C9038C07FF04890B55A1680
D8078F49C8FC018013E0000F90CAFCA47F7F7F90B612C016FC6CEDFF8017E06C826C16FC
7E000382000F82D81FF0C77ED83FC014074848020113808248C9FC177FA46D15FF007F17
006D5C6C6C4A5A6C6C4A5AD80FFEEC3FF83B07FFC001FFF0000190B612C06C6C92C7FC01
0F14F8D9007F90C8FC32427DAC38>I<EB7FC0B5FCA512037EB1ED07FE92383FFF8092B5
12E002C114F89139C7F03FFC9138CF801F9139DF000FFE14DE14FC4A6D7E5CA25CA35CB3
A7B60083B512FEA537457CC43E>I<137C48B4FC4813804813C0A24813E0A56C13C0A26C
13806C1300EA007C90C7FCAAEB7FC0EA7FFFA512037EB3AFB6FCA518467CC520>I<EB7F
C0B5FCA512037EB293387FFFE0A593380FE0004C5A4CC7FC167E5EED03F8ED07E04B5A4B
5A037FC8FC15FEECC1FCECC3FE14C7ECDFFF91B57E82A202F97F02E17F02C07FEC807F6F
7E826F7E816F7F836F7F816F7F83707E163FB60003B512F8A535457DC43B>107
D<EB7FC0B5FCA512037EB3B3B3A3B61280A519457CC420>I<90277F8007FEEC0FFCB590
263FFFC090387FFF8092B5D8F001B512E002816E4880913D87F01FFC0FE03FF8913D8FC0
0FFE1F801FFC0003D99F009026FF3E007F6C019E6D013C130F02BC5D02F86D496D7EA24A
5D4A5DA34A5DB3A7B60081B60003B512FEA5572D7CAC5E>I<90397F8007FEB590383FFF
8092B512E0028114F8913987F03FFC91388F801F000390399F000FFE6C139E14BC02F86D
7E5CA25CA35CB3A7B60083B512FEA5372D7CAC3E>I<EC1FFC49B512C0010714F0011F14
FC90397FF80FFF9026FFC0017F48496C7F4848C7EA3FE000078248486E7E49140F001F82
A2003F82491407007F82A400FF1780AA007F1700A46C6C4A5AA2001F5E6D141F000F5E6C
6C4A5AA26C6C6CEBFFE06C6D485B27007FF80F90C7FC6DB55A010F14F8010114C0902600
1FFCC8FC312F7DAD38>I<90397FC00FF8B590B57E02C314E002CF14F89139DFC03FFC91
39FF001FFE000301FCEB07FF6C496D13804A15C04A6D13E05C7013F0A2EF7FF8A4EF3FFC
ACEF7FF8A318F017FFA24C13E06E15C06E5B6E4913806E4913006E495A9139DFC07FFC02
CFB512F002C314C002C091C7FCED1FF092C9FCADB67EA536407DAC3E>I<90387F807FB5
3881FFE0028313F0028F13F8ED8FFC91389F1FFE000313BE6C13BC14F8A214F0ED0FFC91
38E007F8ED01E092C7FCA35CB3A5B612E0A5272D7DAC2E>114 D<90391FFC038090B512
87000314FF120F381FF003383FC00049133F48C7121F127E00FE140FA215077EA27F01E0
90C7FC13FE387FFFF014FF6C14C015F06C14FC6C800003806C15806C7E010F14C0EB003F
020313E0140000F0143FA26C141F150FA27EA26C15C06C141FA26DEB3F8001E0EB7F0090
38F803FE90B55A00FC5CD8F03F13E026E007FEC7FC232F7CAD2C>I<EB01E0A51303A413
07A2130FA2131FA2133F137F13FF1203000F90B51280B7FCA4C601E0C7FCB3A3ED01E0A9
150302F013C0137F150790393FF80F8090391FFC1F006DB5FC6D13FC01015B9038003FE0
23407EBE2C>I<D97FC049B4FCB50103B5FCA50003EC000F6C81B3A85EA25EA25E7E6E49
1380017FD901F713FE9138F807E76DB512C7010F1407010313FE9026007FF0EBFC00372E
7CAC3E>I<B6903803FFFCA5000101E09038003E006C163C80017F5D8017F8013F5D6E13
01011F5D6E1303010F5D6E13076D5DED800F6D92C7FC15C05E6DEBE01E163E6D143CEDF0
7C027F1378EDF8F8023F5B15FD021F5B15FF6E5BA36E5BA26E90C8FCA26E5AA26E5AA215
78362C7EAB3B>I<B6903803FFFCA5000101E09038003E006C163C80017F5D8017F8013F
5D6E1301011F5D6E1303010F5D6E13076D5DED800F6D92C7FC15C05E6DEBE01E163E6D14
3CEDF07C027F1378EDF8F8023F5B15FD021F5B15FF6E5BA36E5BA26E90C8FCA26E5AA26E
5AA21578A215F85D14015D001F1303D83F805B387FC007D8FFE05B140F92C9FC5C143E49
5A387FC1F8EB07F06CB45A6C5B000790CAFCEA01FC36407EAB3B>121
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmbx9 9 24
/Fh 24 122 df<120FEA3FC0EA7FE0EAFFF0A6EA7FE0EA3FC0EA0F000C0C7A8B19>46
D<147814F81303131FEA03FFB5FCA3EAFC1F1200B3B2007FB512FEA41F317AB02C>49
D<EB1FFC90B57E000314E0000F14F8391FE03FFC393F800FFF48487E6D6C1380D8FFC014
C06D7E16E080A36C5A6C5A6CC7FCC8FC16C05C16805C16004A5A4A5A5D4A5AEC3FC04A5A
02FEC7FC495A495A903907E001E0EB0FC0EB1F8090383E00034914C05B4848130748B6FC
5A5A5A5A5AB71280A423317CB02C>I<EB0FFC90387FFF8048B512F03903F01FF83907C0
0FFE380F8007486C6C7E01F01480123F13F8A5D81FF014006C485AD803805BC7FC4A5A4A
5A4A5AECFFC0013F90C7FC14FCECFFC09038001FF0EC0FFC6E7E6E7E16806E13C0A2000F
15E0EA3FC0EA7FE0EAFFF0A416C0A2495AD87FC0148049481300003F5B391FF01FFE6CB5
12F8000314E0C61480D91FFCC7FC23327CB02C>I<151F5D5DA25D5C5C5C5CA25C143D14
7D14F9EB01F114E1EB03C1EB0781130FEB1F01133E133C137813F01201EA03E0EA07C013
80EA0F00121E123E5A5AB712FEA4C700031300A80103B512FEA427317EB02C>I<120FEA
3FC0EA7FE0EAFFF0A6EA7FE0EA3FC0EA0F00C7FCA9120FEA3FC0EA7FE0EAFFF0A6EA7FE0
EA3FC0EA0F000C217AA019>58 D<ED1F80A24B7EA24B7EA34B7EA24A7FA34A7FA24A7F15
CFA2020F7F1587021F801503023F80EC3E01A2027E80EC7C0002FC804A137FA20101814A
133F0103814A131FA249B67EA24981A290271F8000077F91C77EA24982013E80017E8201
7C80A201FC8249157FB500F0013FB512F0A43C347DB343>65 D<B812FCA4C69038E0001F
EE03FE16011600177E173EA2171EA3923803C01F170FA403071300A2150F153F91B5FCA4
ECE03F150F1507A21503A592C8FCABB612F8A430337DB238>70 D<B600E090387FFFF0A4
C601E0C73803F0004D5A4D5AEF3F80057EC7FC5F4C5A4C5AEE0FE0EE1F804CC8FC167E5E
ED03F8ED07E04B5A4B7E157F4B7E02E17F02E37F02E77FECFFDFED0FFF4A6C7F02FC804A
7E4A6C7F4A6C7F707E83163F707E707E84707F82707F707F84177F717E717EB6D8E007B5
12FCA43E337DB245>75 D<003FB812F8A4D9F003EB801FD87F80ED03FC01001501007E16
00007C177CA20078173CA400F8173E48171EA4C71600B3A9011FB612F0A437327DB13E>
84 D<EB7FFE0003B512E04814F8390FF00FFC391FF803FF806E138016C0157F6C5A6C5A
EA0180C8FCEC7FFF010FB5FC90B6FC0003EBF07F000F1300EA1FF8485A485A485A5BA315
FF7F007F5B6D4813E03A3FF80FBFFF000FB5121F0003EBFC0F39007FE00728217EA02B>
97 D<EA01FC12FFA4120F1207ADEC07FC91387FFF8001FDB512E09039FFF00FF89138C0
07FC91380003FE496D7E496D1380A217C0167FA217E0A917C0A216FF1780A26D4913006D
495A9138C007FC9039F3F01FF801E1B512E0D9C07F13809026800FF8C7FC2B347EB331>
I<903807FF80013F13F090B512FC3903FE01FE4848487EEA0FF8EA1FF0EA3FE0A2007F6D
5A496C5A153000FF91C7FCA9127F7FA2003FEC07807F6C6C130F000FEC1F00D807FE133E
3903FF80FCC6EBFFF8013F13E0010790C7FC21217DA027>I<ED01FC15FFA4150F1507AD
EB07FE90383FFFC790B512F70003EB01FF3907FC003F4848131F4848130F48481307A212
7F5BA212FFA9127FA27F123F150F6C6C131F6C6C133F6C6C497E2603FE03B512E0C6B512
E7013F1387903807FC072B347DB331>I<903803FF80013F13F090B512FC48EB03FE3907
FC007F4848EB3F804848EB1FC05B003FEC0FE0127F5B16F012FF150790B6FCA301C0C8FC
A4127F7F123F16F06C7E000F14016C6CEB03E0D803FEEB0FC03A01FF807F806C6CB51200
011F13FC010313E024217EA029>I<16F890390FFC07FE90387FFF9F48B6127F3907FC0F
FC380FF003001F14FED9E001133E003FECFF1C1600A6001F5CEBF003000F5C3907FC0FF8
90B512E0486C1380D90FFCC7FC48C9FCA37F7F90B512F015FE6CECFF8016E06C15F06C15
F84815FC121F393F80001F48C7EA03FE481401481400A46C14016C6CEB03FC6C6CEB07F8
6C6CEB0FF0D80FFCEB7FE00003B61280C6ECFE00010F13E028327EA12C>103
D<EA03F0487E487E487EA66C5A6C5A6C5AC8FCA8EA01FC12FFA4120F1207B3A5B512C0A4
12357DB418>105 D<EA01FC12FFA4120F1207B3B3A6B512E0A413347DB318>108
D<903803FF80011F13F090B512FE48EB01FF3A07FC007FC0D80FF0EB1FE0001F15F04913
0F003F15F8491307007F15FCA300FF15FEA8007F15FCA26D130F003F15F8001F15F06D13
1F6C6CEB3FE06C6CEB7FC03A01FF01FF006CEBFFFE013F13F80103138027217EA02C>
111 D<3901F81F8000FFEB7FF0ECFFF89038F9E3FC9038FBC7FE380FFF876C1307A213FE
EC03FCEC01F8EC0060491300B1B512F0A41F217EA024>114 D<9038FFE1C0000713FF5A
383F803F387E000F14075A14037EA26C6CC7FC13FCEBFFE06C13FC806CEBFF80000F14C0
6C14E0C6FC010F13F0EB007F140F00F0130714037EA26C14E06C13076CEB0FC09038C01F
8090B5120000F913FC38E03FE01C217DA023>I<133CA5137CA313FCA21201A212031207
001FB51280B6FCA3D807FCC7FCB0EC03C0A79038FE078012033901FF0F006C13FEEB3FFC
EB0FF01A2F7EAE22>I<B53B83FFFC03FFE0A43D07FC001FE0003E00183C6D167C00036F
1378033F14F86C6C6E5B157F9139807BFC016C5FDAC0FB1303017FD9F1FE5B14C19139E1
E0FF07013F5E9139F3C07F0F011F038FC7FC14F7903A0FFF803FDEA29238001FFE6D5DA2
6D486D5AA24A130701015DA26D486D5A4A13013B217EA040>119
D<B539C007FFC0A4D807FEC7EAF80000035D6D13016C5D14806C4A5AA2ECC007017F5CEC
E00F013F91C7FC6E5A011F131EECF83E010F133CECFC7C01071378ECFEF801035B14FF6D
5BA26D5BA26E5AA26EC8FCA2141EA25CA2147C003E1378007F13F8486C5A1381EB83E0EB
87C0495AD87F3FC9FCEA3FFEEA1FF8EA07E02A307EA02F>121 D
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmtt9 9 27
/Fi 27 118 df<90383C03C090387E07E0A7EBFE0F01FC13C0A2007FB512FEB7FCA4003F
14FE3901F81F80AC003FB512FEB7FCA46C14FE3903F03F00A200075BEBE07EA73803C03C
202E7DAD27>35 D<121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A0A728927>46
D<1538157C15FCA2140115F8140315F0140715E0140F15C0141F1580143F1500A25C147E
14FE5C13015C13035C13075C130F5CA2131F5C133F91C7FC5B137E13FE5B12015B12035B
A212075B120F5B121F5B123F90C8FC5A127E12FE5AA25A12781E3A7CB327>I<130E131F
A25B5BA25B5A5A127FB5FCA213BFEA7E3F1200B3AA003FB512805A15C01580A21A2F79AE
27>49 D<001FB512E04814F0A315E090C8FCACEB1FF0EBFFFC14FF158015C09038F03FE0
9038C00FF0EB0007003EEB03F8001C1301C7FC15FC1400A3127C12FEA2140115F8481303
6C14F0007F130F9038801FE0393FE07FC06CB512806C14006C5B000113F838007FC01E2F
7CAD27>53 D<121EEA7F80A2EAFFC0A4EA7F80A2EA1E00C7FCAC121EEA7F80A2EAFFC0A4
EA7F80A2EA1E000A20729F27>58 D<EB01FE903807FF80011F13C0017F13E090B512F048
EB03F83803FC013907F000FC390FE01F7C9038C07FFE381F80FF1301485A393E07F1FF00
7E13E0397C0FC07FEC803FA2EAFC1F00F8EB001FA800FCEB803FD87C0F133EA2ECC07E39
7E07E0FC003E13F1393F03FFF86C6C13F0018013E0390FC07FC09038E01F1E3907F0003F
D803FC137F3901FF03FF6CEBFFFE6D13FC011F13F0010713C001011300202E7DAD27>64
D<007FB5FCB612E081816C803907E003FEEC00FF81ED3F80151F16C0150FA6151F168015
3FED7F005DEC03FE90B55A5D5D5D92C7FC01E0C8FCADEA7FFEB5FCA36C5A222E7FAD27>
80 D<3803FFC0000F13F04813FC4813FF811380EC1FC0381F000F000480C71207A2EB0F
FF137F0003B5FC120F5A383FFC07EA7FC0130012FE5AA46C130F007F131FEBC0FF6CB612
806C15C07E000313F1C69038807F8022207C9F27>97 D<EB0FFF017F13C048B512E04814
F05A380FF807EA1FE0393FC003E0903880008048C8FC127EA212FE5AA67E127EA2007F14
F0393F8001F813C0381FE003390FF80FF06CB5FC6C14E06C14C06C6C1300EB0FF81D207B
9F27>99 D<EC3FF04A7EA3143F1401A9EB0FE1EB7FFD48B5FC5A5A380FF83F381FE00F38
3FC007EB8003EA7F00007E1301A212FE5AA67E007E1303A2127F6C1307EB800F381FE01F
380FF03F6CB612C06C15E06C13FD38007FF9D91FE013C0232E7EAD27>I<EB0FF8EB3FFE
90B51280000314C04814E0390FFC0FF0391FE003F8EBC001D83F8013FC48C7FC127E157E
12FEB612FEA415FC00FCC8FC7E127E127F6C143C6D137E6C7E01F013FE390FFC07FC6CB5
FC000114F86C14F0013F13C0903807FE001F207D9F27>I<EC1FF0ECFFF84913FC4913FE
5BEB0FF014C0011F137CEC8000A6007FB512F0B612F8A36C14F039001F8000B3A4003FB5
12C04814E0A36C14C01F2E7EAD27>I<EA7FE0487EA3127F1203A9147F9038F1FFC001F7
13F090B5FC8114C1EC01FCEBFE005B5BA25BB03A7FFF83FFE0B500C713F0A36C018313E0
242E7FAD27>104 D<130F497E497EA46D5A6DC7FC90C8FCA7383FFF80487FA37EEA000F
B3A4007FB512F0B6FC15F815F07E1D2F7BAE27>I<143C147E14FFA4147E143C1400A738
01FFFE4813FFA37EC7123FB3B0147E1238007C13FE38FE01FC1303B512F814F06C13E06C
13803807FE0018407CAE27>I<EA7FE07F12FF127FA21201A991383FFFC04A13E0A36E13
C0913803F8004A5A4A5A4A5A4A5A02FFC7FCEBF1FEEBF3FCEBF7F8EBFFFC8080143F496C
7E496C7E01F87FEBF0076E7E6E7E816E7E157E3A7FFFC1FFF002C313F8B512E36C13C316
F0252E80AD27>I<387FFF80B57EA37EEA000FB3B2007FB512F8B612FCA36C14F81E2E7C
AD27>I<397F07C01F3AFF9FF07FC09039FFF9FFE091B57E7E3A0FFC7FF1F89038F03FC0
01E0138001C01300A3EB803EB03A7FF0FFC3FF486C01E3138001F913E701F813E36C4801
C313002920819F27>I<387FE07F39FFF1FFC001F713F090B5FC6C80000313C1EC01FCEB
FE005B5BA25BB03A7FFF83FFE0B500C713F0A36C018313E024207F9F27>I<EB1FE0EB7F
F83801FFFE487F481480390FF03FC0391FC00FE0393F8007F0EB00034814F8007E1301A2
48EB00FCA76C1301007E14F8A2007F1303393F8007F0A2391FE01FE0390FF03FC06CB512
806C14006C5B38007FF8EB1FE01E207C9F27>I<387FE0FFD8FFF313C090B512F0816C80
0003EB81FE49C67E49EB3F8049131F16C049130FA216E01507A6150F16C07F151F6DEB3F
80157F6DEBFF009038FF83FEECFFFC5D5D01F313C0D9F0FEC7FC91C8FCAC387FFF80B57E
A36C5B23317F9F27>I<90380FF03C90383FFE7E90B5FC000314FE5A380FFC1F381FE007
EBC003383F800148C7FC127EA200FE147E5AA67E007E14FEA2007F1301EA3F80EBC00338
1FE007380FF81F6CB5FC7E6C147E38007FFCEB0FF090C7FCAC91381FFFF8A24A13FC6E13
F8A226317E9F27>I<397FFC03FC39FFFE0FFF023F13804A13C0007F90B5FC39007FFE1F
14F89138F00F809138E002004AC7FC5CA291C8FCA2137EAD007FB57EB67EA36C5C22207E
9F27>I<9038FFF3800007EBFFC0121F5A5AEB803F38FC000F5AA2EC07806C90C7FCEA7F
8013FC383FFFF06C13FC000713FF00011480D8000F13C09038003FE014070078EB03F000
FC1301A27E14036CEB07E0EBE01F90B512C01580150000FB13FC38707FF01C207B9F27>
I<133C137EA8007FB512F0B612F8A36C14F0D8007EC7FCAE1518157EA415FE6D13FC1483
ECFFF86D13F06D13E0010313C0010013001F297EA827>I<397FE01FF8486C487EA3007F
131F00031300B21401A21403EBFC0F6CB612E016F07EEB3FFE90390FF87FE024207F9F27
>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmr9 9 73
/Fj 73 124 df<91393FE00FE0903A01FFF83FF8903A07E01EF83C903A1F800FF07E903A
3F001FE0FE017E133F4914C0485A1738484890381F8000ACB812C0A33B03F0001F8000B3
A7486C497EB50083B5FCA32F357FB42D>11 D<EC1FE0ECFFFC903803F01E90390FC00780
EB1F8090393F000FC0017E131F5BA2485AED0F8092C7FCA9ED0FC0B7FCA33901F8001F15
0FB3A6486CEB1FE0267FFFC1B5FCA328357FB42B>I<EC1FF891B512C0903803F00F9038
0FC01FEB1F80EB3F00137E5B150F485AACB7FCA33901F8000FB3A7486CEB1FE0267FFFE3
B5FCA328357FB42B>I<DA1FE013FF9126FFFC0713E0903B03F01E1F80F0903B0FC0077E
003CD91F805B90273F001FF8137E017E4A13FE495CA248485C030F147C95C7FCA9187EB9
12FEA33B01F8000FC000187EB3A6486C496C13FF297FFFC1FFFE0F13F8A33D357FB440>
I<003C13F0387E01F838FF03FCA2EB83FEA2EA7F81383D80F600011306A40003130EEB00
0CA248131C00061318000E1338000C1330001C13704813E0387001C00060138017177EB3
26>34 D<147CEB01FEEB07C790380F8380EB1F0181EB3E00A2137EA2137C137EA214015D
140392C9FC5C140E6D5A1418143802F090380FFFF05C6D5A04011300EE00FC6D6C147001
1F1560013F15E0D977F0495AD9E3F85CD801C31403260381FC91C7FC00075D48C66C130E
486D130C486D131C003E6D6C5A007EECC03091381FE07000FE010F5B6F5AEC07F96EB45A
6C6D90C712306E5A157F6C6C6D6C13604B6C13E03A3FC001EFE03C1FE003C7F803C03C0F
F01F83FE0F802707FFFE00B51200000101F8EB3FFE26003FC0EB07F034387DB53C>38
D<123C127EB4FCA21380A2127F123D1201A412031300A25A1206120E120C121C5A5A1260
09177AB315>I<14C01301EB0380EB0F00130E5B133C5B5BA2485A485AA212075B120F90
C7FC5AA2121E123EA3123C127CA55AB0127CA5123C123EA3121E121FA27E7F12077F1203
A26C7E6C7EA213787F131C7F130FEB0380EB01C01300124A79B71E>I<12C07E1270123C
121C7E120F6C7E6C7EA26C7E6C7EA27F1378137C133C133EA2131E131FA37F1480A5EB07
C0B0EB0F80A514005BA3131E133EA2133C137C137813F85BA2485A485AA2485A48C7FC12
0E5A123C12705A5A124A7CB71E>I<156015F0B3A4007FB812C0B912E0A26C17C0C800F0
C8FCB3A4156033327CAB3C>43 D<123C127EB4FCA21380A2127F123D1201A412031300A2
5A1206120E120C121C5A5A126009177A8715>I<B512F0A514057F921A>I<123C127E12FF
A4127E123C08087A8715>I<EB0FE0EB7FFCEBF83E3903E00F803907C007C0EB8003000F
14E0391F0001F0A24814F8A2003E1300007E14FCA500FE14FEB2007E14FCA56CEB01F8A3
6C14F0A2390F8003E03907C007C0A23903E00F803900F83E00EB7FFCEB0FE01F347DB126
>48 D<13075B5B137FEA07FFB5FC13BFEAF83F1200B3B3A2497E007FB51280A319327AB1
26>I<EB3FC0EBFFF0000313FC380F80FF391E007F80001CEB3FC048EB1FE048130F15F0
0060130712FC6C14F87E1403A3007E1307123CC7FC15F0A2140F15E0EC1FC0A2EC3F8015
00147E5C495A5C495A495A495A49C7FC133E133C4913185B485A48481330485A48C7FC00
1C1470001FB512F05A5AB612E0A31D327CB126>I<EB1FE0EBFFFC4813FF3907E03F8039
0F001FC0001EEB0FE0001CEB07F0123F018013F8140313C01380A2381F0007C7FC15F0A2
EC0FE015C0141FEC3F80EC7E00EB01F8EB7FE014FCEB003FEC1FC0EC0FE0EC07F015F814
0315FC140115FEA3127EB4FCA415FC48130312780070EB07F86C14F0003C130F001FEB1F
E0390FE03F800003B51200C613FCEB1FE01F347DB126>I<EC01C0A214031407A2140F14
1FA2143F147F146F14CF1301EB038F140F1307130E130C131C13381330137013E013C0EA
0180120313001206120E120C5A123812305A12E0B71280A3C7380FC000A94A7E0107B512
80A321337EB226>I<000C14C0380FC00F90B5128015005C5C14F014C0D80C18C7FC90C8
FCA9EB0FC0EB7FF8EBF07C380FC03F9038001F80EC0FC0120E000CEB07E0A2C713F01403
A215F8A41218127E12FEA315F0140712F8006014E01270EC0FC06C131F003C14806CEB7F
00380F80FE3807FFF8000113E038003F801D347CB126>I<14FE903807FF80011F13E090
383F00F0017C13703901F801F8EBF003EA03E01207EA0FC0EC01F04848C7FCA248C8FCA3
5A127EEB07F0EB1FFC38FE381F9038700F809038E007C039FFC003E0018013F0EC01F813
0015FC1400A24814FEA5127EA4127F6C14FCA26C1301018013F8000F14F0EBC0030007EB
07E03903E00FC03901F81F806CB51200EB3FFCEB0FE01F347DB126>I<1230123C003FB6
FCA34814FEA215FC0070C7123800601430157015E04814C01401EC0380C7EA0700140614
0E5C141814385CA25CA2495A1303A3495AA2130FA3131F91C7FCA25BA55BA9131C20347C
B126>I<EB0FE0EB7FFC90B5FC3903F01F803907C007C0390F0003E0000EEB01F0001E13
00001C14F8003C1478A3123EA2003F14F86D13F0EBC001D81FF013E09038F803C0390FFE
07803907FF0F006C13DE6C13F87EEB3FFE8001F713C0D803E313E0D8078013F0390F007F
F8001E131F003EEB07FC003C1303481301EC007E12F848143EA2151EA37E153C1278007C
14787E6C14F0390F8003E03907F01FC00001B5120038007FFCEB1FE01F347DB126>I<EB
0FE0EB7FF8EBFFFE3803F83F3907E00F80390FC007C0D81F8013E0EC03F0EA3F0048EB01
F8127EA200FE14FC1400A415FEA5007E1301A2127F7E1403EA1F80000F13073807C00E38
03E01C3801F03838007FF090381FC0FC90C7FC1401A215F8A215F01403001F14E0383F80
0715C0140FEC1F809038003F00001C137E381F01FC380FFFF0000313C0C690C7FC1F347D
B126>I<123C127E12FFA4127E123C1200B0123C127E12FFA4127E123C08207A9F15>I<00
7FB812C0B912E0A26C17C0CCFCAC007FB812C0B912E0A26C17C033147C9C3C>61
D<15E0A34A7EA24A7EA34A7EA3EC0DFE140CA2EC187FA34A6C7EA202707FEC601FA202E0
7FECC00FA2D901807F1507A249486C7EA301066D7EA2010E80010FB5FCA249800118C77E
A24981163FA2496E7EA3496E7EA20001821607487ED81FF04A7ED8FFFE49B512E0A33336
7DB53A>65 D<B7FC16E016F83A03FC0003FE0001EC00FFEE7F80EE3FC0161F17E0160F17
F0A617E0161F17C0EE3F80EE7F0016FEED03FC90B612F05E9039FC0007FCED00FEEE3F80
EE1FC0EE0FE017F0160717F8160317FCA617F81607A2EE0FF0EE1FE0163FEE7FC0000391
3803FF00B75A16F816C02E337DB236>I<DA03FE130C91393FFF801C91B512E0903A03FE
01F83C903A0FF0003C7CD91FC0EB0EFCD97F80130701FEC7120348481401000315005B48
48157C485A173C485A171C123F5B007F160CA390C9FC481600AB7E6D150CA3123F7F001F
161C17186C7E17386C6C15306C6C15706D15E012016C6CEC01C0D97F80EB0380D91FC0EB
0F00D90FF0131ED903FE13FC0100B512F0023F13C0DA03FEC7FC2E377CB437>I<B77E16
F016FE3A01FE0001FF00009138003FC0EE0FE0707E707E707E707E177E177FEF3F80A2EF
1FC0A3EF0FE0A418F0AA18E0A3171F18C0A21880173F18005F17FE5F4C5AEE07F04C5AEE
3FC000014AB45AB748C7FC16F8168034337EB23B>I<B812C0A3D803FCC7127F0001150F
EE03E01601A21600A21760A403061330A41700150EA2151E157E90B512FEA39038FC007E
151E150EA21506170CA3171892C7FCA41738A21770A217F01601160316070003157FB812
E0A32E337DB234>I<B81280A3D803FCC7FC0001151FEE07C01603A21601A21600A41760
150CA31700A2151CA2153C15FC90B5FCA3EBFC00153C151CA2150CA592C8FCAB487EB512
FEA32B337DB232>I<DA03FE130C91393FFF801C91B512E0903A03FE01F83C903A0FF000
3C7CD91FC0EB0EFCD97F80130701FEC7120348481401000315005B4848157C485A173C48
5A171C123F5B007F160CA390C9FC4893C7FCAA0303B512E07E7F92390003FE00705A123F
7F121FA26C7E7F12076C7E7F6C6C14036C7E6D6C1307D91FC0EB0E7CD90FF0EB1C3CD903
FEEBF81C0100B5EAF00C023F01C0C7FCDA03FEC8FC33377CB43C>I<B5D8FE03B512F8A3
000190C73807FC006C486E5AB390B7FCA349C71203B3A3486C4A7EB5D8FE03B512F8A335
337EB23A>I<B512FEA3000113006C5AB3B3A7487EB512FEA317337EB21C>I<017FB5FCA3
9038003FE0EC1FC0B3B1127EB4FCA4EC3F805A0060140000705B6C13FE6C485A380F03F0
3803FFC0C690C7FC20357DB227>I<B500FE903807FFF8A3000190C7000113006C48EC00
FC17F04C5A4C5A4CC7FC160E5E5E5E5E4B5A4B5A4BC8FC150E5D5D15F84A7E14034A7EEC
0EFF5C4A6C7E4A6C7EECE01FD9FFC07F4A6C7E4A6C7E5B6F7E6F7EA26F7E707EA2707E70
7E160F83707E707EA283486C913807FF80B500FE013F13FCA336337EB23C>I<B512FEA3
D803FEC9FC6C5AB3A9EE0180A416031700A45EA25E5E5E5E16FE00031407B7FCA329337D
B230>I<D8FFFC923801FFF86D5DA20003EFFE00D801BFED06FCA3D99F80140CA2D98FC0
1418A3D987E01430A2D983F01460A3D981F814C0A3D980FCEB0180A2027EEB0300A36E13
06A26E6C5AA36E6C5AA36E6C5AA26E6C5AA36E6C5AA3913800FD80A2037FC7FCA3486C13
3ED80FF04B7EB5011C90387FFFF8A33D337CB246>I<D8FFFE91381FFFF87F80C6030013
006E143CD9DFE01418EBCFF0A2EBC7F8EBC3FCA2EBC1FEEBC0FF6E7EA26E7E6E7EA26E7E
6E7E6E7EA26E7E6E7EA2ED7F80ED3FC0ED1FE0A2ED0FF0ED07F8A2ED03FCED01FEED00FF
A2EE7F98EE3FD8A2EE1FF8160F1607A216031601A2486C1400D807F81578B500C01438A2
171835337EB23A>I<EC07FC91387FFFC0903901FC07F0903907E000FCD90F80133E013F
C76C7E017E6E7E496E7E48486E7E48486E7EA248486E7E000F8249157E001F167FA24848
ED3F80A2007F17C0A290C9121FA24817E0AB6C17C06D153FA3003F17806D157FA2001F17
006D5D000F5E6C6C4A5AA26C6C4A5A00015E6C6C4A5A017E4A5A6D4A5AD91FC0017FC7FC
D907E013FC903901FC07F09039007FFFC0DA07FCC8FC33377CB43C>I<B612FEEDFFC016
F03A03FC0007FC0001EC00FE167FEE3F80EE1FC017E0160FA217F0A617E0A2EE1FC0A2EE
3F80EE7F0016FEED07F890B65A168001FCC9FCB3A2487EB512F8A32C337DB234>I<B612
FCEDFF8016F03A01FE0007FC0000EC01FEED007F707E707E83160F83A65FA24C5AA24C5A
047EC7FC4B5AED0FF090B612C093C8FC9039FE001FC0ED07F06F7E6F7E150082167E167F
A583A5180C17C0A2043F131C486C1618B500FEEB1FE0040F1338933807F070C93801FFE0
9338003F8036357EB239>82 D<90381FE00390387FFC0748B5FC3907F01FCF390F8003FF
48C7FC003E80814880A200788000F880A46C80A27E92C7FC127F13C0EA3FF013FF6C13F0
6C13FF6C14C06C14F0C680013F7F01037F9038003FFF140302001380157F153FED1FC015
0F12C0A21507A37EA26CEC0F80A26C15006C5C6C143E6C147E01C05B39F1FC03F800E0B5
12E0011F138026C003FEC7FC22377CB42B>I<007FB712FEA390398007F001D87C00EC00
3E0078161E0070160EA20060160600E01607A3481603A6C71500B3AB4A7E011FB512FCA3
30337DB237>I<B500FE90381FFFF8A3000190C813006C48153C1718B3AF1738017F1530
A217706D6C1460011F15E06E495A010F14036D6C495A6D6C49C7FCD901FC131E6DB413FC
91383FFFF0020F13C0020190C8FC35357EB23A>I<B5D8F007B539800FFFF0A3000390C7
273FF000011300D801FC6E48EB007C1A386D140F00001930836D020715706D1860A26E49
6C14E0013F60A26ED919FC1301011F60A26ED930FE1303010F95C7FCA26ED9607F5B0107
1706A26E9039C03F800E0103170CA2913BFC01801FC01C01011718A2913BFE03000FE038
01001730A2DAFF06EB07F0027F5EA2038CEB03F8023F5EA203D8EB01FC021FEDFD80A203
F0EB00FF020F93C8FCA24B800207157EA24B143E0203153CA24B141C020115184C357FB2
4F>87 D<0003130C48131C000E133848137000181360003813E0003013C0EA7001006013
80A2EAE00300C01300A400DE137800FF13FCEB83FEA2EA7F81A2383F00FC001E13781717
74B326>92 D<EB7F803803FFF0380F80FC381C003E003F133F6D6C7E6E7EA26E7EEA1F00
C7FCA4EB01FF131FEBFF873803FC07EA0FF0EA1FC0EA3F80127F13004815C05AA3140FA2
6C131F6C133B3A3F8071F180391FC1E1FF2607FFC013003900FE003C22237DA126>97
D<EA03F012FFA312071203AEEC3F80ECFFE09038F3C0F89038F7007E01FE7F49EB1F8049
EB0FC05BED07E016F0A2150316F8AA16F0150716E0A2ED0FC07F6DEB1F8001ECEB3F0001
CF137C90388381F8903801FFE0C76CC7FC25357EB32B>I<EB07F8EB3FFF9038FC07C039
01F000E03903E003F03807C007120FEA1F80123F90380003E04890C7FCA2127E12FEAA12
7FA26C14187F001F14386D1330000F14706C6C13E03903F001C03900FC0F8090383FFE00
EB07F01D237EA122>I<153FEC0FFFA3EC007F81AEEB07F0EB3FFCEBFC0F3901F003BF39
07E001FF48487E48487F8148C7FCA25A127E12FEAA127E127FA27E6C6C5BA26C6C5B6C6C
4813803A03F007BFFC3900F81E3FEB3FFCD90FE0130026357DB32B>I<EB0FE0EB7FFCEB
F83F3903F00F80D807E013C0390FC007E0381F800315F0EA3F0014014814F8127EA212FE
A2B6FCA248C8FCA5127E127FA26C1418A26C6C1338000F14306D13706C6C13E03901F003
C03900FC0F00EB3FFEEB07F01D237EA122>I<EB01FCEB07FF90381F078090383E0FC0EB
7C1F13FCEA01F8A20003EB070049C7FCACB512F0A3D803F0C7FCB3A7487E387FFFE0A31A
357FB417>I<151F90391FC07F809039FFF8E3C03901F07FC73907E03F033A0FC01F8380
9039800F8000001F80EB00074880A66C5CEB800F000F5CEBC01F6C6C48C7FCEBF07C380E
FFF8380C1FC0001CC9FCA3121EA2121F380FFFFEECFFC06C14F06C14FC4880381F000100
3EEB007F4880ED1F8048140FA56C141F007C15006C143E6C5C390FC001F83903F007E0C6
B51280D91FFCC7FC22337EA126>I<EA03F012FFA312071203AEEC1FC0EC7FF09038F1E0
FC9038F3807C9038F7007E13FE497FA25BA25BB3486CEB7F80B538C7FFFCA326347EB32B
>I<EA0780EA0FC0EA1FE0A4EA0FC0EA0780C7FCAAEA07E012FFA3120F1207B3A6EA0FF0
B5FCA310337EB215>I<EA03F012FFA312071203AF913803FFE0A36E1300EC00F8EC01E0
5D4A5A020FC7FC141C5C5C14F0EBF3F8EBF7FC13FEEBFC7EEBF87F496C7E141F6E7E8114
076E7E8114016E7E81486CEBFF80B500C313F0A324347EB329>107
D<EA07E012FFA3120F1207B3B3A7EA0FF0B5FCA310347EB315>I<2703F01FE013FF00FF
90267FF80313C0903BF1E07C0F03E0903BF3803E1C01F02807F7003F387FD803FE147049
6D486C7EA2495CA2495CB3486C496C487EB53BC7FFFE3FFFF0A33C217EA041>I<3903F0
1FC000FFEB7FF09038F1E0FC9038F3807C3907F7007EEA03FE497FA25BA25BB3486CEB7F
80B538C7FFFCA326217EA02B>I<EB07F0EB3FFE9038FC1F803901F007C03903C001E000
078048486C7E48C7127CA248147E003E143E007E143FA300FE1580A8007E1500A36C147E
A26C147C6D13FC6C6C485A00075C3903F007E03900FC1F80D93FFEC7FCEB07F021237EA1
26>I<3903F03F8000FFEBFFE09038F3C0F89038F7007ED807FE7F6C48EB1F804914C049
130F16E0ED07F0A3ED03F8A9150716F0A216E0150F16C06D131F6DEB3F80160001FF13FC
9038F381F89038F1FFE0D9F07FC7FC91C8FCAA487EB512C0A325307EA02B>I<903807F0
0390383FFC07EBFC0F3901F8038F3807E001000F14DF48486CB4FC497F123F90C77E5AA2
5A5AA9127FA36C6C5B121F6D5B000F5B3907E003BF3903F0073F3800F81EEB3FF8EB0FE0
90C7FCAAED7F8091380FFFFCA326307DA029>I<3803E07C38FFE1FF9038E38F809038E7
1FC0EA07EEEA03ECA29038FC0F8049C7FCA35BB2487EB512E0A31A217FA01E>I<EBFF06
000713CE381F00FE003C133E48131E140E5A1406A27EA200FE90C7FC6C7EEA7FFC383FFF
C014F0000F7F6C7FC67FEB0FFF1300EC3F8000C0131F140F6C1307A37E15006C5B6C130E
6C5B38F7807838E1FFE038C07F8019237EA11E>I<1330A51370A313F0A21201A2120312
07381FFFFEB5FCA23803F000AF1403A814073801F806A23800FC0EEB7E1CEB1FF8EB07E0
182F7FAD1E>I<D803F0133F00FFEB0FFFA30007EB007F000380B35DA35D12016D481380
0000903803BFFC90387E073FEB1FFED907F8130026227EA02B>I<B5EBFFF0A3D80FF0EB
3F800007EC1F000003140E150C6D131C00011418A26C6C5BA26D1370017E1360137F6D5B
A290381F8180A214C3010F90C7FCA2EB07E6A214FE6D5AA26D5AA36D5AA2146024217E9F
29>I<B53A1FFF81FFF0A33C07F801FC003F8001F049EB1E0000030100141C816C6C017C
1318A26D017E1338000002FE1330A290267E01FF5B159F168090263F030F5BA216C0903A
1F8607C180A202C613E390260FCC0390C7FCA2D907FC13F6ECF80116FE6D486C5AA36D48
1378A36D48133034217F9F37>I<B53801FFF8A32603FE0013806C48EB7C000000147801
7E1370017F5B90383F81C090381F8380D90FC3C7FCEB07E614FE6D5A6D5A6D7E80805B90
38039F809038071FC09038060FE0EB0C0790381C03F0496C7E01707FEBF000000180000F
ECFF8026FFFC0313FCA326207F9F29>I<3A7FFF807FF8A33A07F8001FC00003EC0F8000
01EC070015066C6C5BA26D131C017E1318A26D5BA2EC8070011F1360ECC0E0010F5BA290
3807E180A214F3010390C7FC14FBEB01FEA26D5AA31478A21430A25CA214E05CA2495A12
78D8FC03C8FCA21306130EEA701CEA7838EA1FF0EA0FC025307F9F29>I<003FB512F0A2
EB000F003C14E00038EB1FC00030EB3F800070137F1500006013FE495A13035CC6485A49
5AA2495A495A49C7FC153013FE485A12035B48481370485A001F14604913E0485A387F00
0348130F90B5FCA21C207E9F22>I<B712F8A22502809426>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk cmr6 6 3
/Fk 3 52 df<13E01201120712FF12F91201B3A7487EB512C0A212217AA01E>49
D<EA01FC3807FF80381C0FC0383003E0386001F0EB00F812F86C13FCA2147C1278003013
FCC7FC14F8A2EB01F0EB03E014C0EB0780EB0F00131E13385B5B3801C00CEA0380380600
185A5A383FFFF85AB512F0A216217CA01E>I<13FF000313C0380F03E0381C00F014F800
3E13FC147CA2001E13FC120CC712F8A2EB01F0EB03E0EB0FC03801FF00A2380003E0EB00
F01478147C143E143F1230127812FCA2143E48137E0060137C003813F8381E03F0380FFF
C00001130018227DA01E>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fl cmr7 7 6
/Fl 6 85 df<13381378EA01F8121F12FE12E01200B3AB487EB512F8A215267BA521>49
D<13FF000313E0380E03F0381800F848137C48137E00787F12FC6CEB1F80A4127CC7FC15
005C143E147E147C5C495A495A5C495A010EC7FC5B5B903870018013E0EA018039030003
0012065A001FB5FC5A485BB5FCA219267DA521>I<13FF000313E0380F01F8381C007C00
30137E003C133E007E133FA4123CC7123E147E147C5C495AEB07E03801FF8091C7FC3800
01E06D7E147C80143F801580A21238127C12FEA21500485B0078133E00705B6C5B381F01
F03807FFC0C690C7FC19277DA521>I<137F3803FFE0380781F8380E007C48131E5A8012
78A3127C007E131EEA3F80EBE03C6C6C5A380FFCF03807FFC06C5BC613E0487F38079FFC
380F07FEEA1E0348C67E48133FEC1F8048130FA21407A315001278140E6C5B6C5B380F80
F03803FFE0C66CC7FC19277DA521>56 D<D8FFF0EDFFF06D5C0007EEFE0000035E017CEC
037CA26D1406A26D140CA36D6C1318A26D6C1330A36D6C1360A26D6C13C0A3903900F801
80A291387C0300A2EC3E06A36E5AA2EC0F98A3EC07F0A26E5AEA0780D80FC015FE3CFFFC
01C01FFFF0A234287DA73C>77 D<007FB7FCA23A7E003F003F0078150F007081006081A2
00E01680481501A5C791C7FCB3A64A7E013FB5FCA229287EA72F>84
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fm cmr10 10 79
/Fm 79 123 df<DA0FF813FC91397FFF07FF903B01F807DF83C0903A07E001FF0F903B1F
8007FE1FE090393F000FFC137E16F85B9338F007804848010790C7FC1503ACB812F8A328
01F80003F0C7FCB3AB486C497E267FFFE0B512F0A3333B7FBA30>11
D<EC0FF8EC7FFE903901F80780903907E001C090391F8000E090383F0007017E497EA25B
A2485A6F5AED018092C8FCA9ED03F0B7FCA33901F8000F1503B3AA486C497E267FFFE0B5
12C0A32A3B7FBA2E>I<EC0FFC91387FFF70903901F803F0903807E00790381F800FEB3F
00137EA25B150748481303ADB7FCA33901F80003B3AB486C497E267FFFE0B512C0A32A3B
7FBA2E>I<DA0FF0EB1FF0DA7FFEEBFFFC903B01F80F83F00F903C07E001CFC00380903C
1F8000FF0001C090273F0007FE130F017E4948497EA2495CA248485C03076E5A03030203
C7FC95C8FCA9F007E0BAFCA33C01F80003F0001F1807B3AA486C496C497E267FFFE0B500
C1B51280A3413B7FBA45>I<DA0FF8EB1FF8DA7FFF9038FFFEE0903B01F80783F007903B
07E001CFC00F903B1F8007FF001F4948485A017E5CA2495C180F48486D4813071503ACBA
FCA33C01F80003F00007B3AB486C496C497E267FFFE0B500C1B51280A3413B7FBA45>I<
001C131C007F137F39FF80FF80A26D13C0A3007F137F001C131C00001300A40001130101
801380A20003130301001300485B00061306000E130E485B485B485B006013601A197DB9
2A>34 D<017C166048B416F02607C3801401260F81C01403D900E04A5A001E01784A5A00
3E6D141F003C013FEC7F80007C90271BE003FFC7FC0218B512BF007891381FFC3E00F801
1CC75A020C14FC5F4C5A16035F4C5A160F5F4CC8FC021C5B00780118133E007C5D16FC00
3C01385B003E90383001F0001EEB70036C01E05B903981C007C03907C3800F2601FF005B
D8007C49C9FC90C748EB07C0033EEB1FF04BEB3C3803FCEBF81C4B497E913A01F001E006
02030103130703E0497E912607C0071480020F15011580DA1F00018013C04A010F130014
3E5C14FC5C495A13035C495A130F4A0107130149C701C013805B013E1603490203140001
FC6F5A49020113064848913800F00E0003705A49ED3C3849ED1FF06C48ED07C03A437BBD
45>37 D<121C127FEAFF80A213C0A3127F121C1200A412011380A2120313005A1206120E
5A5A5A12600A1979B917>39 D<146014E0EB01C0EB0380EB0700130E131E5B5BA25B485A
A2485AA212075B120F90C7FCA25A121EA2123EA35AA65AB2127CA67EA3121EA2121F7EA2
7F12077F1203A26C7EA26C7E1378A27F7F130E7FEB0380EB01C0EB00E01460135278BD20
>I<12C07E12707E7E7E120F6C7E6C7EA26C7E6C7EA21378A2137C133C133E131EA2131F
7FA21480A3EB07C0A6EB03E0B2EB07C0A6EB0F80A31400A25B131EA2133E133C137C1378
A25BA2485A485AA2485A48C7FC120E5A5A5A5A5A13527CBD20>I<15301578B3A6007FB8
12F8B912FCA26C17F8C80078C8FCB3A6153036367BAF41>43 D<121C127FEAFF80A213C0
A3127F121C1200A412011380A2120313005A1206120E5A5A5A12600A19798817>I<B512
FCA516057F941C>I<121C127FEAFF80A5EA7F00121C0909798817>I<150C151E153EA215
3C157CA2157815F8A215F01401A215E01403A215C01407A21580140FA215005CA2141E14
3EA2143C147CA2147814F8A25C1301A25C1303A2495AA25C130FA291C7FC5BA2131E133E
A2133C137CA2137813F8A25B1201A25B1203A25B1207A25B120FA290C8FC5AA2121E123E
A2123C127CA2127812F8A25A12601F537BBD2A>I<EB03F8EB1FFF90387E0FC09038F803
E03901E000F0484813780007147C48487FA248C77EA2481580A3007EEC0FC0A600FE15E0
B3007E15C0A4007F141F6C1580A36C15006D5B000F143EA26C6C5B6C6C5B6C6C485A6C6C
485A90387E0FC0D91FFFC7FCEB03F8233A7DB72A>I<EB01C013031307131F13FFB5FCA2
131F1200B3B3A8497E007FB512F0A31C3879B72A>I<EB0FF0EB7FFE48B57E3903E03FE0
390F000FF0000E6D7E486D7E486D7E123000706D7E126012FCB4EC7F807FA56CC7FC121C
C8FCEDFF00A34A5A5D14035D4A5A5D140F4A5A4A5A92C7FC147C5C495A495A495A495A91
C8FC011EEB01805B5B49130348481400485A485A000EC75A000FB6FC5A5A485CB6FCA321
387CB72A>I<EB07F8EB3FFF4913C03901F80FF03903C007F848486C7E380E0001000F80
381FE0006D7FA56C5A6C5AC85A1401A25D4A5AA24A5A5DEC0F80027EC7FCEB1FFCECFF80
9038000FE06E7EEC01FC816E7EED7F80A216C0A2153F16E0A2121EEA7F80487EA416C049
137F007F1580007EC7FC0070ECFF006C495A121E390F8003F83907F00FF00001B512C06C
6C90C7FCEB0FF8233A7DB72A>I<1538A2157815F8A2140114031407A2140F141F141B14
331473146314C313011483EB030313071306130C131C131813301370136013C01201EA03
8013005A120E120C5A123812305A12E0B712F8A3C73803F800AB4A7E0103B512F8A32539
7EB82A>I<0006140CD80780133C9038F003F890B5FC5D5D158092C7FC14FC38067FE090
C9FCABEB07F8EB3FFE9038780F803907E007E090388003F0496C7E12066E7EC87EA28181
A21680A4123E127F487EA490C71300485C12E000605C12700030495A00385C6C1303001E
495A6C6C485A3907E03F800001B5C7FC38007FFCEB1FE0213A7CB72A>I<EC3FC0903801
FFF0010713FC90380FE03E90383F800790387E001F49EB3F804848137F485AA2485A000F
EC3F0049131E001F91C7FCA2485AA3127F90C9FCEB01FC903807FF8039FF1E07E0903838
01F0496C7E01607F01E0137E497FA249148016C0151FA290C713E0A57EA56C7E16C0A212
1FED3F807F000F15006C6C5B15FE6C6C5B6C6C485A3900FE07F090383FFFC06D90C7FCEB
03FC233A7DB72A>I<12301238123E003FB612E0A316C05A168016000070C71206006014
0E5D151800E01438485C5D5DC712014A5A92C7FC5C140E140C141C5CA25CA214F0495AA2
1303A25C1307A2130FA3495AA3133FA5137FA96DC8FC131E233B7BB82A>I<EB03F8EB1F
FF017F13C09038FC07F03901E001F848486C7E4848137C90C77E48141E000E141F001E80
A3121FA27F5D01E0131E6C6C133E01FC133C6D5B6C6C6C5AECC1E06CEBF3C06C01FFC7FC
6C5BEB3FFF6D13C081017F13F801F07F3903E07FFE3907801FFF48486C1380481303003E
6D13C0003CEB007F007C143F0078EC0FE000F814075A1503A21501A36C15C01278150300
7C15806CEC07006C5C6C6C131ED807E0137C3903F803F0C6B55A013F1380D907FCC7FC23
3A7DB72A>I<EB03F8EB1FFF017F13C09038FC07E03903F803F048486C7E48486C7E4913
7E121F48487FA2007F158090C7FCA248EC1FC0A616E0A56C143FA27F123F001F147FA26C
6C13FF3907E001DF0003149F3801F0033900FC0F1FD93FFC13C0EB07F090C7FC153F1680
A316005D000F147E487E486C5BA24A5A4A5A49485A6C48485A001C495A260F807FC7FC38
07FFFC000113F038003FC0233A7DB72A>I<121C127FEAFF80A5EA7F00121CC7FCB2121C
127FEAFF80A5EA7F00121C092479A317>I<121C127FEAFF80A5EA7F00121CC7FCB2121C
127F5A1380A4127F121D1201A412031300A25A1206A2120E5A121812385A1260093479A3
17>I<007FB812F8B912FCA26C17F8CCFCAE007FB812F8B912FCA26C17F836167B9F41>
61 D<1538A3157CA315FEA34A7EA34A6C7EA202077FEC063FA2020E7FEC0C1FA2021C7F
EC180FA202387FEC3007A202707FEC6003A202C07F1501A2D901807F81A249C77F167FA2
0106810107B6FCA24981010CC7121FA2496E7EA3496E7EA3496E7EA213E0707E1201486C
81D80FFC02071380B56C90B512FEA3373C7DBB3E>65 D<B712E016FC16FF000190398000
7FC06C90C7EA1FE0707E707E707EA2707EA283A75F16035F4C5A4C5A4C5A4C5AEEFF8091
B500FCC7FCA291C7EA7F80EE1FE0EE07F0707E707E83707EA21880177F18C0A7188017FF
A24C13005F16034C5AEE1FF8486DEB7FF0B812C094C7FC16F832397DB83B>I<913A01FF
800180020FEBE003027F13F8903A01FF807E07903A03FC000F0FD90FF0EB039F4948EB01
DFD93F80EB00FF49C8127F01FE153F12014848151F4848150FA248481507A2485A170312
3F5B007F1601A35B00FF93C7FCAD127F6DED0180A3123F7F001F160318006C7E5F6C7E17
066C6C150E6C6C5D00001618017F15386D6C5CD91FE05C6D6CEB03C0D903FCEB0F809027
01FF803FC7FC9039007FFFFC020F13F002011380313D7BBA3C>I<B712C016F816FE0001
90398001FF806C90C7EA3FE0EE0FF0EE03F8707E707E177FA2EF3F8018C0171F18E0170F
18F0A3EF07F8A418FCAC18F8A4EF0FF0A218E0A2171F18C0EF3F80A2EF7F0017FE4C5A4C
5AEE0FF0EE3FE0486DEBFF80B8C7FC16F816C036397DB83F>I<B812FCA3000190388000
0F6C90C71201EE007E173E171E170EA31706A317078316C0A394C7FCA31501A21503150F
91B5FCA3EC000F15031501A21500A21860A318E093C712C0A41701A3EF0380A21707A217
0F173F177F486D903807FF00B9FCA333397DB839>I<B812F8A30001903880001F6C90C7
1201EE00FC177C173C171CA2170CA4170E1706A2ED0180A21700A41503A21507151F91B5
FCA3EC001F15071503A21501A692C8FCAD4813C0B612C0A32F397DB836>I<DBFF8013C0
020FEBF001023F13FC9139FF803F03903A03FC000787D90FF0EB03CF4948EB00EF494814
7F4948143F49C8121F485A4848150F48481507A248481503A2485A1701123F5B007F1600
A448481600AB93B6FCA26C7E9338007FE0EF3FC0A2123F7F121FA26C7EA26C7EA26C7E6C
7E6C6C157F6D7E6D6C14FF6D6C14EFD90FF8EB03C7D903FEEB0783903A00FFC03F019139
3FFFFC00020F01F0130002001380383D7CBA41>I<B648B512FEA3000190268000031300
6C90C76C5AB3A491B6FCA391C71201B3A6486D497EB648B512FEA337397DB83E>I<B612
C0A3C6EBC0006D5AB3B3AD497EB612C0A31A397EB81E>I<013FB512E0A39039001FFC00
EC07F8B3B3A3123FEA7F80EAFFC0A44A5A1380D87F005B0070131F6C5C6C495A6C49C7FC
380781FC3801FFF038007F80233B7DB82B>I<B649B5FCA3000101809038007FF06C90C8
EA3F80053EC7FC173C17385F5F4C5A4C5A4CC8FC160E5E5E5E5E4B5AED0780030EC9FC5D
153E157E15FF5C4A7F4A6C7E140E4A6C7E4A6C7E14704A6C7E4A6C7E14804A6C7E6F7EA2
6F7F707EA2707E707EA2707EA2707E707EA2707E707F8484486D497FB6011FEBFF80A339
397DB841>I<B612E0A3000101C0C8FC6C90C9FCB3AD1718A517381730A31770A317F0A2
16011603160FEE1FE0486D13FFB8FCA32D397DB834>I<B5933807FFF86E5DA20001F0FC
002600DFC0ED1BF8A2D9CFE01533A3D9C7F01563A3D9C3F815C3A2D9C1FCEC0183A3D9C0
FEEC0303A2027F1406A36E6C130CA36E6C1318A26E6C1330A36E6C1360A26E6C13C0A391
3901FC0180A3913900FE0300A2ED7F06A3ED3F8CA2ED1FD8A3ED0FF0A3486C6D5A487ED8
0FFC6D48497EB500C00203B512F8A2ED018045397DB84C>I<B5913807FFFE8080C69238
007FE06EEC1F80D9DFF0EC0F001706EBCFF8EBC7FCA2EBC3FEEBC1FFA201C07F6E7EA26E
7E6E7E81140F6E7E8114036E7E168080ED7FC016E0153FED1FF0ED0FF8A2ED07FCED03FE
A2ED01FF6F1386A2EE7FC6EE3FE6A2EE1FF6EE0FFEA216071603A216011600A2177E486C
153E487ED80FFC151EB500C0140EA2170637397DB83E>I<EC03FF021F13E09138FE01FC
903901F8007ED907E0EB1F8049486D7ED93F80EB07F049C76C7E01FE6E7E48486E7E4915
7E0003167F4848ED3F80A24848ED1FC0A2001F17E049150F003F17F0A3007F17F8491507
A300FF17FCAC007F17F86D150FA3003F17F0A26C6CED1FE0A36C6CED3FC0000717806D15
7F000317006C6C15FEA26C6C4A5A017F4A5A6D6C495A6D6C495AD907E0EB1F80D903F801
7FC7FC903900FE01FC91381FFFE0020390C8FC363D7BBA41>I<B712C016F816FE000190
398001FF806C90C7EA3FC0EE0FE0EE07F0EE03F817FC17FE1601A217FFA717FEA2EE03FC
A2EE07F817F0EE0FE0EE3FC0923801FF0091B512FC16F091C9FCB3A5487FB6FCA330397D
B839>I<EC03FF021F13E09138FE01FC903901F8007ED907E0EB1F8049486D7ED93F80EB
07F049C76C7E01FE6E7E48486E7EA24848157F0007178049153F000F17C049151F001F17
E0A24848ED0FF0A3007F17F8A2491507A200FF17FCAC007F17F8A26D150FA2003F17F0A2
6C6CED1FE0A36C6CED3FC00007027C14804AB4FC3C03F80383807F003B01FC0701C0FEEC
0E002600FE0CEBE1FC017FEC63F8D93F8CEB77F0D91FCCEB3FE0D907EE14806DB449C7FC
0100D981FC130CEC1FFF0203131C91C7001E131C161F183CEF807CEFC0F8EE0FFFA318F0
8218E07013C07013809338007E00364B7BBA41>I<B612FEEDFFE016F8000190388007FE
6C90C76C7EEE3FC0707E707E707EA2707EA283A65FA24C5AA24C5A4C5AEE3F8004FFC8FC
ED07FC91B512E05E9138000FF0ED03F8ED00FE82707E707EA2161F83A583A6F00180A217
F8160F1803486D01071400B66D6C5A04011306933800FE0ECAEA3FFCEF07F0393B7DB83D
>I<D90FF813C090383FFE0190B512813903F807E33907E000F74848137F4848133F48C7
121F003E140F007E1407A2007C140312FC1501A36C1400A37E6D14006C7E7F13F86CB47E
6C13F8ECFF806C14E06C14F86C14FEC680013F1480010714C0EB007F020713E0EC007FED
3FF0151F150FED07F8A200C01403A21501A37EA216F07E15036C15E06C14076C15C06C14
0F6DEB1F80D8FBF0EB3F00D8F0FE13FE39E03FFFF8010F13E0D8C00190C7FC253D7CBA2E
>I<003FB812E0A3D9C003EB001F273E0001FE130348EE01F00078160000701770A30060
1730A400E01738481718A4C71600B3B0913807FF80011FB612E0A335397DB83C>I<B690
3807FFFEA3000101809038007FE06C90C8EA1F80EF0F001706B3B2170E6D150C80171C13
3F17186D6C14385F6D6C14F06D6C5C6D6C495A6D6CEB07806D6C49C7FC91387F807E9138
1FFFF8020713E09138007F80373B7DB83E>I<B5D8FC07B5D8F001B5FCA3000790278000
1FFEC7EA1FF86C48C7D80FF8EC07E000010307ED03C01B807F6C6F6C1500A26E5F017F6E
6C1406A280013F4A6C5CA280011F4A6D5BEE067FA26D6C010E6D5BEE0C3FA26D6C011C6D
5BEE181FA26D6C6F5BEE300FA26D6C6F485AEE6007A26D6C4CC7FC9338C003FCA203805D
913B7F818001FE06A203C1150EDA3FC3C7EAFF0CA203E3151CDA1FE6EC7F98A215F6DA0F
FCEC3FF0A302075E4B141FA202035E4B140FA202015E4B1407A2020093C8FC4B80503B7E
B855>87 D<EAFFF8A4EAF000B3B3B3B3A3EAFFF8A40D5378BD17>91
D<3901800180000313033907000700000E130E485B001813180038133800301330007013
7000601360A200E013E0485BA400CE13CE39FF80FF806D13C0A3007F137FA2393F803F80
390E000E001A1974B92A>I<EAFFF8A4EA0078B3B3B3B3A3EAFFF8A40D537FBD17>I<EB1F
E0EBFFFC3803E03F3907000F80390F8007E0486C6C7E13E06E7EA26E7E6C5A6C5AC8FCA4
147FEB07FFEB3FE0EBFE00EA03F8EA0FF0EA1FC0123F485A90C7FC160C12FEA31401A26C
13036CEB077C903980063E18383FC01E3A0FE0781FF03A03FFF00FE03A007F8007C02627
7DA52A>97 D<EA03F012FFA3120F1203B0EC1FE0EC7FF89038F1E03E9039F3801F809039
F7000FC001FEEB07E049EB03F049EB01F85BED00FCA216FEA2167E167FAA167E16FEA216
FC15016D14F8ED03F07F01EEEB07E001C6EB0FC09039C7801F00903881E07E903800FFF8
C7EA1FC0283B7EB92E>I<EB03FC90381FFF8090387E03E03901F80070484813F83907E0
01FC380FC003A2EA1F80123F90380001F848EB00F01500A2127E12FEAA127E127FA26C14
067F001F140E6D130C000F141C6C6C13386C6C13706C6C13E039007C07C090381FFF00EB
07F81F277DA525>I<ED0FC0EC03FFA3EC003F150FB0EB03F8EB1FFF90387E078F9038F8
01EF3903F0007F4848133F4848131FA24848130F123F90C7FC5AA2127E12FEAA127E127F
A27EA26C6C131FA26C6C133F6C6C137F6C6CEBEFF03A01F801CFFF39007C078F90381FFE
0FD907F813C0283B7DB92E>I<EB07F8EB1FFF90387C0FC03901F803E03903F001F0D807
E013F8380FC0004848137CA248C7127E153E5A153F127E12FEA3B7FCA248C8FCA5127EA2
127FA26C14037F001F14076C6C13060007140E6D131CD801F013386C6C137090387E03E0
90381FFF80903803FC0020277EA525>I<147E903803FF8090380FC1E0EB1F8790383F0F
F0137EA213FCA23901F803C091C7FCADB512FCA3D801F8C7FCB3AB487E387FFFF8A31C3B
7FBA19>I<ED03F090390FF00FF890393FFC3C3C9039F81F707C3901F00FE03903E007C0
3A07C003E010000FECF000A248486C7EA86C6C485AA200075C6C6C485A6D485A6D48C7FC
38073FFC38060FF0000EC9FCA4120FA213C06CB512C015F86C14FE6CECFF804815C03A0F
80007FE048C7EA0FF0003E140348140116F8481400A56C1401007C15F06CEC03E0003F14
07D80F80EB0F80D807E0EB3F003901FC01FC39007FFFF0010790C7FC26387EA52A>I<EA
03F012FFA3120F1203B0EC0FF0EC3FFCECF03F9039F1C01F809039F3800FC0EBF70013FE
496D7EA25BA35BB3A3486C497EB500C1B51280A3293A7EB92E>I<EA0380EA0FE0487EA5
6C5AEA0380C8FCAAEA03F012FFA312071203B3AA487EB512C0A312387EB717>I<EB01C0
EB07F0EB0FF8A5EB07F0EB01C090C7FCAAEB01F813FFA313071301B3B3A2123C127E00FF
13F01303A214E038FE07C0127C383C0F00EA0FFEEA03F8154984B719>I<EA03F012FFA3
120F1203B1913801FFFCA39138007FC01600157C15705D4A5A4A5A4AC7FC141E14381478
14FC13F1EBF3FEEBF73F01FE7FEBF81F496C7E8114076E7E6E7E811400157E157F811680
ED1FC0486CEB3FF0B500C0B5FCA3283A7EB92C>I<EA03F012FFA3120F1203B3B3AD487E
B512C0A3123A7EB917>I<2703F00FF0EB1FE000FFD93FFCEB7FF8913AF03F01E07E903B
F1C01F83803F3D0FF3800FC7001F802603F70013CE01FE14DC49D907F8EB0FC0A2495CA3
495CB3A3486C496CEB1FE0B500C1B50083B5FCA340257EA445>I<3903F00FF000FFEB3F
FCECF03F9039F1C01F803A0FF3800FC03803F70013FE496D7EA25BA35BB3A3486C497EB5
00C1B51280A329257EA42E>I<EB03FE90380FFF8090383E03E09038F800F84848137C48
487F48487F4848EB0F80001F15C090C712074815E0A2007EEC03F0A400FE15F8A9007E15
F0A2007F14076C15E0A26C6CEB0FC0000F15806D131F6C6CEB3F006C6C137EC66C13F890
387E03F090381FFFC0D903FEC7FC25277EA52A>I<3903F01FE000FFEB7FF89038F1E07E
9039F3801F803A0FF7000FC0D803FEEB07E049EB03F04914F849130116FC150016FEA316
7FAA16FEA3ED01FCA26DEB03F816F06D13076DEB0FE001F614C09039F7803F009038F1E0
7E9038F0FFF8EC1FC091C8FCAB487EB512C0A328357EA42E>I<D903F813C090381FFE01
90387E07819038FC01C33903F000E3000714774848133749133F001F141F485A150F48C7
FCA312FEAA127FA37E6D131F121F6D133F120F6C6C137F6C6C13EF3901F801CF39007E07
8F90381FFE0FEB07F890C7FCABED1FE00203B5FCA328357DA42C>I<3807E01F00FFEB7F
C09038E1E3E09038E387F0380FE707EA03E613EE9038EC03E09038FC0080491300A45BB3
A2487EB512F0A31C257EA421>I<EBFF03000313E7380F80FF381E003F487F487F00707F
12F0A2807EA27EB490C7FCEA7FE013FF6C13E06C13F86C7F00037FC67F01071380EB007F
141F00C0EB0FC01407A26C1303A37E15806C13077EEC0F00B4131E38F3C07C38E1FFF038
C03F801A277DA521>I<1318A51338A31378A313F8120112031207001FB5FCB6FCA2D801
F8C7FCB215C0A93800FC011580EB7C03017E13006D5AEB0FFEEB01F81A347FB220>I<D8
03F0EB07E000FFEB01FFA3000FEB001F00031407B3A4150FA3151F12016D133F0000EC77
F86D9038E7FF8090383F03C790381FFF87903A03FC07E00029267EA42E>I<B538803FFE
A33A0FF8000FF06C48EB07E00003EC03C06D148000011500A26C6C1306A26D130E017E13
0CA26D5BA2EC8038011F1330A26D6C5AA214E001075BA2903803F180A3D901FBC7FCA214
FF6D5AA2147CA31438A227257EA32C>I<B53A1FFFE03FFEA3260FF8009038000FF86C48
017EEB03E018C00003023EEB0180A26C6C013FEB0300A36C6CEC8006156FA2017E9038EF
C00C15C7A2D93F016D5A15830281EBF038D91F831430150102C3EBF87090260FC6001360
A2D907E66D5A02EC137CA2D903FCEB7F804A133FA2010192C7FC4A7FA20100141E4A130E
0260130C37257EA33C>I<B538807FFFA33A03FE003FF00001EC1F80000092C7FC017E13
1C6D13186D6C5AECC070010F5B6D6C5AECF180EB03FB6DB4C8FC6D5AA2147F804A7E8114
CF903801C7E090380383F090380703F8EB0601496C7E011C137E49137F01787F496D7E48
6C80000FEC3FF0D8FFFE90B51280A329247FA32C>I<B538803FFEA33A0FF8000FF06C48
EB07C00003EC03806C7E16007F00001406A2017E5BA2137F6D5BA26D6C5AA2ECC070010F
1360A26D6C5AA214F101035BA2D901FBC7FCA214FF6D5AA2147CA31438A21430A2147014
60A25CA2EA7C0100FE5B130391C8FC1306EAFC0EEA701C6C5AEA1FF0EA0FC027357EA32C
>I<003FB512FCA2EB8003D83E0013F8003CEB07F00038EB0FE012300070EB1FC0EC3F80
0060137F150014FE495AA2C6485A495AA2495A495A495AA290387F000613FEA2485A485A
0007140E5B4848130C4848131CA24848133C48C7127C48EB03FC90B5FCA21F247EA325>
I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fn cmbx12 14.4 20
/Fn 20 117 df<171F4D7E4D7EA24D7EA34C7FA24C7FA34C7FA34C7FA24C7FA34C808304
7F80167E8304FE804C7E03018116F8830303814C7E03078116E083030F814C7E031F8116
8083033F8293C77E4B82157E8403FE824B800201835D840203834B800207835D844AB87E
A24A83A3DA3F80C88092C97E4A84A2027E8202FE844A82010185A24A820103854A820107
85A24A82010F855C011F717FEBFFFCB600F8020FB712E0A55B547BD366>65
D<932601FFFCEC01C0047FD9FFC013030307B600F81307033F03FE131F92B8EA803F0203
DAE003EBC07F020F01FCC7383FF0FF023F01E0EC0FF94A01800203B5FC494848C9FC4901
F8824949824949824949824949824990CA7E494883A2484983485B1B7F485B481A3FA248
49181FA3485B1B0FA25AA298C8FC5CA2B5FCAE6C057FB712E0A280A36C94C7003FEBC000
A36C7FA36C7FA27E6C7FA26C7F6C7FA26D7E6D7F6D7F6D6D5E6D7F6D01FC93B5FC6D13FF
6D6C6D5C6E01F0EC07FB020F01FEEC1FF10203903AFFF001FFE0020091B6EAC07F033FEE
001F030703FC1307DB007F02E01301040149CAFC5B5479D26A>71
D<B600FC073FB512FE6F61A26F96B6FCA2D80007F5C00070EF01EFA202EF6DEF03CFA202
E76DEF078FA202E36DEF0F0FA202E16D171EA302E06D173CA26F6C1778A26F6C17F0A26F
6DED01E0A26F6DED03C0A36F6DED0780A26F6DED0F00A26F6D151EA26F6D5DA3706C5DA2
706C5DA2706D495AA2706D495AA2706D495AA3706D49C7FCA2706D131EA2706D5BA2716C
5BA3716C5BA271EB81E0A271EBC3C0A271EBE780A27101FFC8FCA3715BA2715BA2725AA2
725AA2D93FFC6F5AB74DB712FEA2725AA2725A77527CD180>77 D<BAFC19F819FF1AE086
D8000701F0C7001F13FC060113FF726C13807313C0070F13E01BF0857313F81BFCA27313
FEA41BFFA81BFEA31BFC61A21BF84F13F04F13E0614F13C04F13004E485A061F5B92B812
F01AC04FC7FC19E003F8CBFCB3AEB812C0A550527CD15C>80 D<003FBC1280A59126C000
3F9038C0007F49C71607D87FF8060113C001E08449197F49193F90C8171FA2007E1A0FA3
007C1A07A500FC1BE0481A03A6C994C7FCB3B3AC91B912F0A553517BD05E>84
D<EC7FFF0107B512F0013F14FE90B77E48D9E00F7F2703FE000113F0486C6D7F6EEB3FFC
48826E131F83707FA36C496D7FA26C90C7FC6C5AC9FCA6037FB5FC020FB6FC91B7FC0107
1487013FEBF0074913803901FFFC004813F0485B485B485B4890C7FC5A5BA2485AA45EA2
6D5C007F151D163D6C6C02797F6C6D01F113F86C9026C003E1EBFFE06C9026F81FC014F0
6C90B5487EC6ED001F011F01FC010713E0010101E090C8FC3C387CB641>97
D<EB3FF0B5FCA51203C6FCB3A4923801FFE0030F13FE033FEBFFC092B612F002F301017F
913AF7F8003FFEDAFFE0EB0FFF03806D7F92C76C7F4A6E7F4A824A6E7FA2727EA285A285
84A31A80AC1A00A44E5AA36118FF616E4A5BA26E4A5B6E4A5B6F495BDACFC04990C7FCDA
87F0EB7FFC913A03FE03FFF849C6B612E0496D148049011F01FCC8FC90C7000313C04154
7BD24B>I<913801FFF8021FEBFF8091B612F0010315FC010F9038C00FFE903A1FFE0001
FFD97FFC491380D9FFF05B4817C048495B5C5A485BA2486F138091C7FC486F1300705A48
92C8FC5BA312FFAD127F7FA27EA2EF03E06C7F17076C6D15C07E6E140F6CEE1F806C6DEC
3F006C6D147ED97FFE5C6D6CEB03F8010F9038E01FF0010390B55A01001580023F49C7FC
020113E033387CB63C>I<4DB47E0407B5FCA5EE001F1707B3A4913801FFE0021F13FC91
B6FC010315C7010F9038E03FE74990380007F7D97FFC0101B5FC49487F4849143F484980
485B83485B5A91C8FC5AA3485AA412FFAC127FA36C7EA37EA26C7F5F6C6D5C7E6C6D5C6C
6D49B5FC6D6C4914E0D93FFED90FEFEBFF80903A0FFFC07FCF6D90B5128F0101ECFE0FD9
003F13F8020301C049C7FC41547CD24B>I<913803FFC0023F13FC49B6FC010715C04901
817F903A3FFC007FF849486D7E49486D7E4849130F48496D7E48178048497F18C0488191
C7FC4817E0A248815B18F0A212FFA490B8FCA318E049CAFCA6127FA27F7EA218E06CEE01
F06E14037E6C6DEC07E0A26C6DEC0FC06C6D141F6C6DEC3F806D6CECFF00D91FFEEB03FE
903A0FFFC03FF8010390B55A010015C0021F49C7FC020113F034387CB63D>I<ED3FFC02
03B5FC020F14C0023F14E09139FFF81FF0499038C03FF849EB807F49903800FFFC495A49
5AA2495AA2EE7FF8495AEE3FF0EE0FC093C7FCAEB712E0A526007FF8C8FCB3B3A7007FB5
12FEA52E547CD329>I<EB3FF0B5FCA51203C6FCB3A4EE1FFC93B512C0030314F0030F80
92391FE07FFC92393F001FFE037C8003F07FDAF1E081ECF3C0DAF7807F8502FFC7FC5CA2
5CA45CB3ACB6D8F807B612C0A542537BD24B>104 D<137F497E000313E0487FA2487FA7
6C5BA26C5BC613806DC7FC90C8FCADEB3FF0B5FCA512017EB3B3A6B612E0A51B547BD325
>I<EB3FF0B5FCA51203C6FCB3A54CB512F8A59339003FFE00EF1FF0EF3FC04D5A4DC7FC
EE03FEEE07F84C5A4C5AEE7FC04CC8FC4B5A4B5AED0FF8ED1FE04B7E4B7EECF1FF02F37F
02F77F91B6FC83159F030F7F02FE80DAF8077F4A7E6F7F6F7F83707E82707F84707F707F
82707F84707F177F717E4D13C0B6D8F003B6FCA540537CD247>107
D<D93FF0D91FFCEDFFE0B591B500C0010713FE030302F0011F6D7E030F6E017F8092271F
E07FFCD9FF037F922A3F001FFE01F8007F0003027C9126FF03E080C602F06DD90780137F
DAF1E0038FC77FDAF3C0159EDAF7806D01BC143F07FC8102FFC75C4A5EA24A5EA44A5EB3
ACB6D8F807B6D8C03FB512FEA567367BB570>109 D<D93FF0EB1FFCB591B512C0030314
F0030F8092391FE07FFC92393F001FFE0003027C80C602F07FDAF1E081ECF3C0DAF7807F
8502FFC7FC5CA25CA45CB3ACB6D8F807B612C0A542367BB54B>I<913801FFE0021F13FE
91B612C0010315F0010F9038807FFC903A1FFC000FFED97FF86D6C7E49486D7F48496D7F
48496D7F4A147F48834890C86C7EA24883A248486F7EA3007F1880A400FF18C0AC007F18
80A3003F18006D5DA26C5FA26C5F6E147F6C5F6C6D4A5A6C6D495B6C6D495B6D6C495BD9
3FFE011F90C7FC903A0FFF807FFC6D90B55A010015C0023F91C8FC020113E03A387CB643
>I<90397FE003FEB590380FFF80033F13E04B13F09238FE1FF89139E1F83FFC0003D9E3
E013FEC6ECC07FECE78014EF150014EE02FEEB3FFC5CEE1FF8EE0FF04A90C7FCA55CB3AA
B612FCA52F367CB537>114 D<903903FFF00F013FEBFE1F90B7FC120348EB003FD80FF8
1307D81FE0130148487F4980127F90C87EA24881A27FA27F01F091C7FC13FCEBFFC06C13
FF15F86C14FF16C06C15F06C816C816C81C681013F1580010F15C01300020714E0EC003F
030713F015010078EC007F00F8153F161F7E160FA27E17E07E6D141F17C07F6DEC3F8001
F8EC7F0001FEEB01FE9039FFC00FFC6DB55AD8FC1F14E0D8F807148048C601F8C7FC2C38
7CB635>I<143EA6147EA414FEA21301A313031307A2130F131F133F13FF5A000F90B6FC
B8FCA426003FFEC8FCB3A9EE07C0AB011FEC0F8080A26DEC1F0015806DEBC03E6DEBF0FC
6DEBFFF86D6C5B021F5B020313802A4D7ECB34>I E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin

%%EndSetup
%%Page: 1 1
1 0 bop 543 448 a Fn(Abstraction)45 b(Metho)t(ds)g(for)g(Game)g
(Theoretic)h(P)l(ok)l(er)1320 743 y Fm(Jiefu)27 b(Shi)1636
713 y Fl(1)1702 743 y Fm(and)g(Mic)n(hael)g(L.)h(Littman)2571
713 y Fl(2)1367 885 y Fk(1)1440 917 y Fj(Departmen)n(t)c(of)i(Computer)
f(Science)1692 1008 y(Duk)n(e)g(Univ)n(ersit)n(y)1637
1099 y(Durham,)f(NC)i(27708)1650 1191 y Fi(jshi@cs.duke.edu)1556
1250 y Fk(2)1629 1282 y Fj(A)-6 b(T&T)25 b(Labs{Researc)n(h)1514
1373 y(180)i(P)n(ark)e(Av)n(e.)g(Ro)r(om)g(A275)1367
1465 y(Florham)h(P)n(ark,)g(NJ)f(07932-0971)k(USA)1474
1556 y Fi(mlittman@research.att.com)759 1943 y Fh(Abstract.)43
b Fj(Abstraction)25 b(is)g(a)h(metho)r(d)e(often)h(applied)g(to)h(k)n
(eep)e(the)h(com)n(bina-)759 2035 y(torial)33 b(explosion)f(under)e
(con)n(trol)i(and)f(to)h(solv)n(e)f(problems)g(of)h(large)h(complex-)
759 2126 y(it)n(y)-6 b(.)30 b(Our)h(w)n(ork)g(fo)r(cuses)h(on)f
(applying)f(abstraction)i(to)f(solv)n(e)g(large)h(sto)r(c)n(hastic)759
2217 y(imp)r(erfect-information)25 b(games,)g(sp)r(eci\014cally)h(v)l
(arian)n(ts)e(of)i(p)r(ok)n(er.)e(W)-6 b(e)24 b(examine)759
2309 y(sev)n(eral)e(di\013eren)n(t)e(medium-size)e(p)r(ok)n(er)j(v)l
(arian)n(ts)f(and)h(giv)n(e)f(encouraging)i(results)759
2400 y(for)27 b(abstraction-based)f(metho)r(ds)f(on)h(these)f(games.)
759 2497 y Fh(Keyw)n(ords:)37 b Fj(p)r(ok)n(er,)h(game)g(theory)-6
b(,)37 b(imp)r(erfect)h(information)g(games,)g(T)-6 b(exas)759
2589 y(Hold'em.)523 2894 y Fg(1)112 b(In)m(tro)s(duction)523
3123 y Fm(One)29 b(of)h(the)g(principle)f(c)n(hallenges)f(in)i(dev)n
(eloping)f(computer-based)f(solutions)h(to)g(real-)523
3223 y(w)n(orld)f(problems)h(is)g(dealing)g(with)h(uncertain)n(t)n(y)-7
b(.)29 b(F)-7 b(our)29 b(principle)g(t)n(yp)r(es)h(of)f(uncertain)n(t)n
(y)523 3322 y(are:)575 3512 y Ff({)41 b Fe(e\013e)l(ct)e(unc)l
(ertainty)7 b Fm(:)39 b(In)f(an)g(unfamiliar)g(en)n(vironmen)n(t,)f(a)h
(decision)f(mak)n(er)g(migh)n(t)664 3611 y(not)j(kno)n(w)f(the)h(p)r
(ossible)g(e\013ects)g(of)g(its)g(decisions.)f(W)-7 b(e)40
b(do)f(not)h(treat)g(this)g(t)n(yp)r(e)664 3711 y(of)g(uncertain)n(t)n
(y)f(in)h(this)g(pap)r(er,)f(although)g(w)n(ork)f(in)i(the)g(area)e(of)
i(reinforcemen)n(t)664 3811 y(learning)27 b([2,)13 b(6])27
b(has)g(fo)r(cused)h(on)f(this)h(issue.)575 3916 y Ff({)41
b Fe(outc)l(ome)26 b(unc)l(ertainty)7 b Fm(:)23 b(In)g(games)f(of)i(c)n
(hance,)e(for)h(example,)f(although)h(the)h(decision)664
4016 y(mak)n(er)j(ma)n(y)h(kno)n(w)f(the)i(set)f(of)g(p)r(ossible)g
(outcomes)f(and)i(their)f(probabilities,)f(there)664
4116 y(is)k(no)g(w)n(a)n(y)e(to)i(kno)n(w)f(exactly)h(whic)n(h)g
(outcome)f(will)h(o)r(ccur.)g(F)-7 b(or)30 b(example,)h(dealing)664
4215 y(a)d(random)g(card)f(from)h(a)g(dec)n(k)g(could)g(result)g(in)h
(a)f(red)g(card)f(or)h(a)g(blac)n(k)f(card)h(b)r(eing)664
4315 y(dealt,)g(but)g(w)n(e)f(w)n(ould)g(not)h(kno)n(w)f(whic)n(h)g(un)
n(til)h(the)g(card)f(is)h(sho)n(wn.)575 4420 y Ff({)41
b Fe(state)26 b(unc)l(ertainty)7 b Fm(:)23 b(The)g(decision)g(mak)n(er)
f(migh)n(t)h(not)g(kno)n(w)g(information)f(that)i(ma)n(y)664
4520 y(a\013ect)41 b(the)h(outcomes)e(of)h(its)g(future)h(decisions.)e
(F)-7 b(or)40 b(example,)h(in)g(the)h(game)e(of)664 4620
y(Scrabble)974 4589 y Fl(TM)1085 4620 y Fm(,)27 b(a)h(pla)n(y)n(er)e
(cannot)h(see)g(the)h(other)f(pla)n(y)n(er's)f(tiles.)575
4725 y Ff({)41 b Fe(opp)l(onent)28 b(unc)l(ertainty)7
b Fm(:)26 b(In)f(m)n(ulti-agen)n(t)g(systems,)g(and)g(esp)r(ecially)g
(games,)f(the)i(de-)664 4825 y(cision)34 b(mak)n(er)f(do)r(es)g(not)i
(kno)n(w)e(precisely)g(ho)n(w)h(other)f(agen)n(ts)g(in)h(the)h(system)f
(will)664 4924 y(resp)r(ond.)p eop
%%Page: 2 2
2 1 bop 523 232 a Fj(2)237 b(Shi)26 b(and)f(Littman)648
448 y Fm(T)-7 b(raditional)28 b(w)n(ork)f(in)j(game)e(theory)g(has)h(a)
f(mathematical)h(framew)n(ork)e(for)i(reason-)523 548
y(ing)c(ab)r(out)g(uncertain)n(t)n(y)-7 b(.)25 b(Outcome)g(and)g(state)
g(uncertain)n(t)n(y)f(are)h(mo)r(deled)g(b)n(y)g(probabil-)523
648 y(it)n(y)32 b(theory;)f(decision)g(mak)n(ers)f(main)n(tain)i
(probabilit)n(y)e(distributions)i(o)n(v)n(er)e(the)i(curren)n(t)523
747 y(state)i(and)g(future)g(ev)n(en)n(ts,)f(and)h(decisions)g(are)f
(made)g(to)h(maximize)g(exp)r(ected)g(utilit)n(y)-7 b(.)523
847 y(Because)25 b(opp)r(onen)n(ts)g(need)h(not)g(b)r(eha)n(v)n(e)f
(according)f(to)i(an)n(y)f(\014xed)g(probabilit)n(y)g(distribu-)523
946 y(tion,)f(ho)n(w)n(ev)n(er,)d(opp)r(onen)n(t)j(uncertain)n(t)n(y)e
(is)i(handled)f(di\013eren)n(tly)-7 b(.)24 b(In)g(the)g
Fe(game-the)l(or)l(etic)523 1046 y(appr)l(o)l(ach)31
b Fm([7],)22 b(an)f(agen)n(t)g(mak)n(es)g(decisions)g(to)h(maximize)g
(its)g(exp)r(ected)g(utilit)n(y)h(assuming)523 1146 y(the)f(opp)r(onen)
n(t)g(mak)n(es)f(decisions)h(to)g(minimize)g(the)h(agen)n(t's)e(utilit)
n(y)-7 b(.)22 b(Th)n(us,)g(although)g(the)523 1245 y(decision)j(mak)n
(er)f(do)r(es)h(not)g(kno)n(w)f(ho)n(w)h(the)h(opp)r(onen)n(t)f(will)g
(actually)g(b)r(eha)n(v)n(e,)f(it)i(do)r(es)f(as)523
1345 y(w)n(ell)i(as)g(p)r(ossible)h(in)f(the)h(w)n(orst)f(case.)648
1446 y(The)i(game-theoretic)e(approac)n(h)g(has)i(b)r(een)g(applied)g
(to)g(a)g(large)e(n)n(um)n(b)r(er)i(of)g(games,)523 1546
y(suc)n(h)d(as)g(c)n(hess,)g(bac)n(kgammon,)f(c)n(hec)n(k)n(ers,)g(and)
i(man)n(y)f(others.)g(In)h(fact,)g(it)g(is)f(safe)h(to)f(sa)n(y)523
1646 y(that)19 b(this)h(is)f(the)g(predominan)n(t)f(approac)n(h)f(in)j
(use)f(in)g(computer)g(games)f(researc)n(h.)e(Billings)523
1745 y(et)34 b(al.)f([1])g(argue)f(that)i(this)g(approac)n(h)e(is)h
(not)h(appropriate)e(for)h(games)f(suc)n(h)h(as)g(p)r(ok)n(er)523
1845 y(where)19 b(\(a\))g(opp)r(onen)n(t)g(pla)n(y)g(is)g(probably)f
(not)h(v)n(ery)f(strong,)g(and)h(\(b\))h(rep)r(eated)f(encoun)n(ters)
523 1945 y(giv)n(e)24 b(the)h(decision)f(mak)n(er)f(an)i(opp)r(ortunit)
n(y)f(to)g(learn)g(patterns)g(in)h(the)g(opp)r(onen)n(t's)g(pla)n(y)-7
b(.)523 2044 y(Th)n(us,)34 b(opp)r(onen)n(t)h(uncertain)n(t)n(y)f(can,)
g(and)g(p)r(erhaps)g(should,)h(b)r(e)g(treated)f(as)g(a)g(t)n(yp)r(e)h
(of)523 2144 y(state/e\013ect)27 b(uncertain)n(t)n(y)-7
b(.)648 2245 y(W)g(e)34 b(ha)n(v)n(e)e(decided)j(to)e(attac)n(k)g(p)r
(ok)n(er)g(using)h(a)f(game-theoretic)f(approac)n(h,)g(mainly)523
2345 y(b)r(ecause)27 b(w)n(e)h(b)r(eliev)n(e)f(this)h(is)g(still)g(the)
g(b)r(est)g(w)n(a)n(y)e(to)i(create)f(an)g(extremely)g(high-qualit)n(y)
523 2445 y(pla)n(y)n(er.)d(Learning)g(tec)n(hniques)i(run)f(the)h(risk)
f(of)g(b)r(eing)h(fo)r(oled)f(in)n(to)h(lo)n(w-qualit)n(y)d(pla)n(y)i
(b)n(y)523 2544 y(a)31 b(su\016cien)n(tly)g(clev)n(er)f(adv)n(ersary)f
(and)i(the)g(game-theoretic)f(approac)n(h)f(guards)h(against)523
2644 y(this.)36 b(In)g(addition,)g(\014nding)g(an)g(optimal)f(or)g
(appro)n(ximately)f(optimal)i(strategy)e(using)523 2743
y(game)j(theory)f(can)h(lead)g(to)g(unexp)r(ected)h(insigh)n(ts)f(in)n
(to)g(the)h(structure)f(of)g(the)h(game.)523 2843 y(W)-7
b(e)31 b(describ)r(e)g(an)g(instance)f(of)h(this)h(from)e(our)h(p)r(ok)
n(er)e(pla)n(y)n(er)h(in)h(Section)g(5.)g(Note)g(that,)523
2943 y(throughout)c(the)h(pap)r(er,)f(w)n(e)g(treat)g(only)h(2-pla)n(y)
n(er)d(zero-sum)h(p)r(ok)n(er.)648 3044 y(In)19 b(Section)g(2)g(w)n(e)g
(in)n(tro)r(duce)g(the)h(game)e(of)i(p)r(ok)n(er)e(and)h(some)g(of)g
(its)h(unique)f(c)n(hallenges.)523 3144 y(Sections)i(3)g(and)g(4)g
(describ)r(e)g(t)n(w)n(o)g(tec)n(hniques)g(w)n(e)g(dev)n(elop)r(ed)g
(for)g(attac)n(king)f(p)r(ok)n(er)g(games)523 3243 y(using)27
b(game)g(theory)-7 b(.)27 b(Section)h(5)f(presen)n(ts)g(some)g(results)
g(and)g(Section)h(6)f(concludes.)523 3518 y Fg(2)112
b(P)m(ok)m(er)37 b(In)m(tro)s(duction)523 3727 y Fm(Consider)27
b(the)i(follo)n(wing)e(mini-p)r(ok)n(er)h(game.)f(W)-7
b(e)29 b(start)e(with)i(a)f(dec)n(k)g(of)g(3)g(cards:)f(J,)h(Q,)523
3827 y(K.)22 b(W)-7 b(e)23 b(deal)f(one)g(card)g(to)g(eac)n(h)f(of)i(t)
n(w)n(o)e(pla)n(y)n(ers.)g(Eac)n(h)g(pla)n(y)n(er)g(con)n(tributes)h
(one)g(dollar)f(to)523 3926 y(the)i(p)r(ot)g(\(an)n(te\))g(and)g(lo)r
(oks)f(at)g(his)h(or)f(her)g(card.)g(Next,)h(a)g(b)r(etting)g(round)g
(commences.)f(In)523 4026 y(the)29 b(b)r(etting)g(round,)f(the)g(pla)n
(y)n(ers)f(lo)r(ok)g(at)h(their)h(cards,)e(then)i(alternate)e(either)h
(b)r(etting)523 4125 y(\(adding)e(a)h(dollar)e(to)h(the)h(p)r(ot\))g
(or)f(passing.)g(If)h(a)f(pla)n(y)n(er)f(passes)g(when)i(the)g(other)f
(pla)n(y)n(er)523 4225 y(has)e(con)n(tributed)h(more)f(money)h(to)f
(the)i(p)r(ot,)f(that)g(pla)n(y)n(er)e(\\folds")h(and)h(forfeits)f(the)
i(p)r(ot.)523 4325 y(On)38 b(the)h(other)e(hand,)i(if)f(there)h(are)e
(t)n(w)n(o)g(consecutiv)n(e)h(passes)f(or)g(b)r(oth)i(pla)n(y)n(ers)d
(ha)n(v)n(e)523 4424 y(added)i(the)h(maxim)n(um)f(n)n(um)n(b)r(er)g(of)
g(dollars)f(to)h(the)h(p)r(ot)f(\(1,)g(for)g(this)g(example\),)h(the)
523 4524 y(pla)n(y)n(ers)26 b(rev)n(eal)g(their)h(cards)g(and)g(the)h
(one)g(with)g(the)g(higher)f(card)f(wins)i(the)g(p)r(ot.)648
4625 y(W)-7 b(e)37 b(seek)g(a)h(game-theoretic)d(strategy)i(for)g(this)
g(game.)g(Consider)g(the)h(game)e(tree)523 4725 y(sho)n(wn)29
b(in)i(Figure)f(1,)f(where)h(the)h(lea)n(v)n(es)d(are)i(lab)r(eled)g
(with)h(pla)n(y)n(er)d(1's)i(winnings)g(if)h(the)523
4825 y(corresp)r(onding)20 b(branc)n(hes)h(are)h(follo)n(w)n(ed.)f(If)i
(the)f(game)g(w)n(ere)f(one)h(of)g(p)r(erfect)h(information)523
4924 y(\(pla)n(y)n(ers)f(can)i(see)g(eac)n(h)f(others')g(card\),)g(an)h
(optimal)g(strategy)e(could)i(b)r(e)g(found)h(b)n(y)e(\\min-)p
eop
%%Page: 3 3
3 2 bop 2370 232 a Fj(Game-Theoretic)26 b(P)n(ok)n(er)238
b(3)523 448 y Fm(imaxing")34 b(up)i(from)e(the)i(lea)n(v)n(es.)e(This)h
(computes,)g(for)g(eac)n(h)f(no)r(de)h(in)h(the)f(tree,)g(what)523
548 y(pla)n(y)n(er)25 b(1)h(w)n(ould)g(win)h(on)g(a)n(v)n(erage)c(if)28
b(she)e(b)r(et)h(optimally)g(while)g(pla)n(y)n(er)e(2)h(made)g(optimal)
523 648 y(resp)r(onses.)523 848 y
 23681433 6867612 131563 -40061091 47033958 -26049576 startTexFig

 270 rotate
 523 848 a
%%BeginDocument: jqk.ps
%!PS-Adobe-3.0
%%BoundingBox: 396 2 609 715
%%Pages: 1 0
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%DocumentNeedsFonts: (atend)
%%DocumentSuppliedFonts: (atend)
%%Creator: Frame 5.5 - modified by fixfm5
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.5, for use with Adobe Unix Frame 5.5 products
%
% This ps_prolog file is Copyright (c) 1986-1996 Adobe Systems, Incoporated.
% All rights reserved.  This ps_prolog file may be freely copied and 
% distributed in conjunction with documents created using FrameMaker, 
% FrameMaker+SGML, FrameReader, and FrameViewer as long as this 
% copyright notice is preserved.
/FMDocSave save def
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.5) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	2 copy exch = = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsetsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orghalftone
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
	/tintGray
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known systemdict /currentdistillerparams known and {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix defaultmatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 1] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/tintCMYK {
	1 tintGray sub FrameCurColors 0 4 getinterval aload pop 	
	4 index mul 5 1 roll										
	3 index mul 5 1 roll										
	2 index mul 5 1 roll										
	mul 4 1 roll												
}bind def
/tintRGB {
	1 tintGray sub FrameCurColors 4 3 getinterval aload pop 	
	1 exch sub 3 index mul 1 exch sub 4 1 roll					
	1 exch sub 2 index mul 1 exch sub 4 1 roll					
	1 exch sub mul 1 exch sub 3 1 roll							
}bind def
/combineColor {
	/tintGray 1 1 FrameCurGray sub FrameCurColors 7 get mul sub def
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			tintCMYK FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				tintGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					tintCMYK
					RealSetcmykcolor
				} {
					tintRGB
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ tintGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{tintGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop tintGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop tintGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop tintGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix defaultmatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix defaultmatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	fMLevel1 {
		FMPColor {
			orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
		}
		{
			orgxfer cvx settransfer
		} ifelse
		orgfreq organgle orgproc cvx setscreen
	} {
		orghalftone sethalftone
	}ifelse
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	dup 1 gt {/#copies exch def} {pop} ifelse
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	
	fMLevel1 not {
		/orghalftone currenthalftone def
	}if 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMENDDOCUMENT {
	FMDocSave restore	
} def
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature: *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	
	mark
	statusdict begin 
		/setpageparams where {
			pop
			paperwidth paperheight 0 1 
			{setpageparams} stopped 
		} { 
			true 
		} ifelse
		
		{
			
			/setpagedevice where {
				pop 
				1 dict dup begin
					/PageSize [ paperwidth paperheight ] def
				end 
				{setpagedevice} stopped
			} {
				true	
			} ifelse
		} {
			false		
		} ifelse 
	end
	{cleartomark true}{cleartomark false}ifelse
} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		8 1 roll
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
		8 -1 roll
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add dup 0 ne {div} {pop pop .5} ifelse fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	[FMsetsize 0 0 FMpointsize 0 0] makefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	/FMsetsize FMpointsize def
	F 
	} bind def
/QQ { 
	/FMsetsize exch def
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	2 copy 0.0 0.0 1.0 5 3 roll arc 
	round cvi 360 mod exch round cvi 360 mod eq {closepath} if 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.5) FMVERSION
1 1 0 0 612 792 0 1 7 FMDOCUMENT
%%IncludeFont: Times-Roman
0 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
612 792 1 FMBEGINPAGE
0 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 1 K
81.95 249.03 71.57 226.93 2 L
0.5 H
2 Z
0 X
N
44.96 228.73 53.98 208.88 2 L
N
44.51 229.18 32.33 210.23 2 L
N
35.93 250.84 23.75 229.63 2 L
N
35.03 250.39 45.41 228.73 2 L
N
23.75 228.28 11.57 209.33 2 L
N
90 450 8.35 6.99 11.35 191.96 A
0 10.83 Q
(-1) 6.61 189.93 T
0 16.24 Q
(B) 39.54 225.98 T
11.57 209.33 11.57 198.96 2 L
V
N
90 450 8.35 6.99 31.31 191.96 A
0 10.83 Q
(+1) 26.57 189.93 T
90 450 8.35 6.99 51.27 191.96 A
(-2) 46.54 189.93 T
90 450 8.35 6.99 71.24 191.96 A
(-1) 66.5 189.93 T
90 450 8.35 6.99 91.2 191.96 A
(-2) 86.46 189.93 T
31.87 207.53 31.87 198.5 2 L
V
N
51.72 208.43 51.72 199.41 2 L
V
N
71.57 227.38 71.57 198.5 2 L
V
N
91.88 227.38 91.88 198.5 2 L
V
N
0 16.24 Q
(P) 20.82 225.98 T
59.39 272.94 36.84 252.64 2 L
N
(P) 33 248.54 T
60.75 272.49 82.85 249.93 2 L
N
83.75 248.13 91.88 228.73 2 L
N
(B) 77.44 248.54 T
(P) 29.39 207.48 T
(B) 47.21 207.48 T
(P) 67.74 225.98 T
(B) 87.81 225.98 T
180.94 249.03 170.56 226.93 2 L
N
143.94 228.73 152.97 208.88 2 L
N
143.49 229.18 131.31 210.23 2 L
N
134.92 250.84 122.74 229.63 2 L
N
134.02 250.39 144.39 228.73 2 L
N
122.74 228.28 110.56 209.33 2 L
N
90 450 8.35 6.99 110.33 191.96 A
0 10.83 Q
(-1) 105.6 189.93 T
0 16.24 Q
(B) 138.53 225.98 T
110.56 209.33 110.56 198.96 2 L
V
N
90 450 8.35 6.99 130.29 191.96 A
0 10.83 Q
(+1) 125.56 189.93 T
90 450 8.35 6.99 150.26 191.96 A
(-2) 145.52 189.93 T
90 450 8.35 6.99 170.22 191.96 A
(-1) 165.49 189.93 T
90 450 8.35 6.99 190.18 191.96 A
(-2) 185.45 189.93 T
130.86 207.53 130.86 198.5 2 L
V
N
150.71 208.43 150.71 199.41 2 L
V
N
170.56 227.38 170.56 198.5 2 L
V
N
190.86 227.38 190.86 198.5 2 L
V
N
0 16.24 Q
(P) 119.8 225.98 T
158.38 272.94 135.82 252.64 2 L
N
(P) 131.98 248.54 T
159.73 272.49 181.84 249.93 2 L
N
182.74 248.13 190.86 228.73 2 L
N
(B) 176.42 248.54 T
(P) 128.38 207.48 T
(B) 146.2 207.48 T
(P) 166.72 225.98 T
(B) 186.8 225.98 T
279.92 249.03 269.55 226.93 2 L
N
242.93 228.73 251.95 208.88 2 L
N
242.48 229.18 230.3 210.23 2 L
N
233.91 250.84 221.73 229.63 2 L
N
233 250.39 243.38 228.73 2 L
N
221.73 228.28 209.54 209.33 2 L
N
90 450 8.35 6.99 209.32 191.96 A
0 10.83 Q
(-1) 204.58 189.93 T
0 16.24 Q
(B) 237.51 225.98 T
209.54 209.33 209.54 198.96 2 L
V
N
90 450 8.35 6.99 229.28 191.96 A
0 10.83 Q
(+1) 224.54 189.93 T
90 450 8.35 6.99 249.24 191.96 A
(-2) 244.51 189.93 T
90 450 8.35 6.99 269.21 191.96 A
(-1) 264.47 189.93 T
90 450 8.35 6.99 289.17 191.96 A
(-2) 284.43 189.93 T
229.85 207.53 229.85 198.5 2 L
V
N
249.7 208.43 249.7 199.41 2 L
V
N
269.55 227.38 269.55 198.5 2 L
V
N
289.85 227.38 289.85 198.5 2 L
V
N
0 16.24 Q
(P) 218.79 225.98 T
257.37 272.94 234.81 252.64 2 L
N
(P) 230.97 248.54 T
258.72 272.49 280.83 249.93 2 L
N
281.73 248.13 289.85 228.73 2 L
N
(B) 275.41 248.54 T
(P) 227.36 207.48 T
(B) 245.18 207.48 T
(P) 265.71 225.98 T
(B) 285.79 225.98 T
378.91 249.03 368.53 226.93 2 L
N
341.92 228.73 350.94 208.88 2 L
N
341.46 229.18 329.28 210.23 2 L
N
332.89 250.84 320.71 229.63 2 L
N
331.99 250.39 342.37 228.73 2 L
N
320.71 228.28 308.53 209.33 2 L
N
90 450 8.35 6.99 308.3 191.96 A
0 10.83 Q
(+1) 303.57 189.93 T
0 16.24 Q
(B) 336.5 225.98 T
308.53 209.33 308.53 198.96 2 L
V
N
90 450 8.35 6.99 328.27 191.96 A
0 10.83 Q
(+1) 323.53 189.93 T
90 450 8.35 6.99 348.23 191.96 A
(+2) 343.49 189.93 T
90 450 8.35 6.99 368.19 191.96 A
(-1) 363.46 189.93 T
90 450 8.35 6.99 388.16 191.96 A
(+2) 383.42 189.93 T
328.83 207.53 328.83 198.5 2 L
V
N
348.68 208.43 348.68 199.41 2 L
V
N
368.53 227.38 368.53 198.5 2 L
V
N
388.83 227.38 388.83 198.5 2 L
V
N
0 16.24 Q
(P) 317.77 225.98 T
356.35 272.94 333.8 252.64 2 L
N
(P) 329.96 248.54 T
357.7 272.49 379.81 249.93 2 L
N
380.71 248.13 388.83 228.73 2 L
N
(B) 374.39 248.54 T
(P) 326.35 207.48 T
(B) 344.17 207.48 T
(P) 364.7 225.98 T
(B) 384.77 225.98 T
477.9 249.03 467.52 226.93 2 L
N
440.9 228.73 449.92 208.88 2 L
N
440.45 229.18 428.27 210.23 2 L
N
431.88 250.84 419.7 229.63 2 L
N
430.98 250.39 441.35 228.73 2 L
N
419.7 228.28 407.52 209.33 2 L
N
90 450 8.35 6.99 407.29 191.96 A
0 10.83 Q
(+1) 402.55 189.93 T
0 16.24 Q
(B) 435.48 225.98 T
407.52 209.33 407.52 198.96 2 L
V
N
90 450 8.35 6.99 427.25 191.96 A
0 10.83 Q
(+1) 422.52 189.93 T
90 450 8.35 6.99 447.22 191.96 A
(+2) 442.48 189.93 T
90 450 8.35 6.99 467.18 191.96 A
(-1) 462.44 189.93 T
90 450 8.35 6.99 487.14 191.96 A
(+2) 482.41 189.93 T
427.82 207.53 427.82 198.5 2 L
V
N
447.67 208.43 447.67 199.41 2 L
V
N
467.52 227.38 467.52 198.5 2 L
V
N
487.82 227.38 487.82 198.5 2 L
V
N
0 16.24 Q
(P) 416.76 225.98 T
455.34 272.94 432.78 252.64 2 L
N
(P) 428.94 248.54 T
456.69 272.49 478.8 249.93 2 L
N
479.7 248.13 487.82 228.73 2 L
N
(B) 473.38 248.54 T
(P) 425.33 207.48 T
(B) 443.15 207.48 T
(P) 463.68 225.98 T
(B) 483.76 225.98 T
576.88 249.03 566.51 226.93 2 L
N
539.89 228.73 548.91 208.88 2 L
N
539.44 229.18 527.26 210.23 2 L
N
530.86 250.84 518.68 229.63 2 L
N
529.96 250.39 540.34 228.73 2 L
N
518.68 228.28 506.5 209.33 2 L
N
90 450 8.35 6.99 506.28 191.96 A
0 10.83 Q
(+1) 501.54 189.93 T
0 16.24 Q
(B) 534.47 225.98 T
506.5 209.33 506.5 198.96 2 L
V
N
90 450 8.35 6.99 526.24 191.96 A
0 10.83 Q
(+1) 521.5 189.93 T
90 450 8.35 6.99 546.2 191.96 A
(+2) 541.47 189.93 T
90 450 8.35 6.99 566.17 191.96 A
(-1) 561.43 189.93 T
90 450 8.35 6.99 586.13 191.96 A
(+2) 581.39 189.93 T
526.8 207.53 526.8 198.5 2 L
V
N
546.66 208.43 546.66 199.41 2 L
V
N
566.51 227.38 566.51 198.5 2 L
V
N
586.81 227.38 586.81 198.5 2 L
V
N
0 16.24 Q
(P) 515.75 225.98 T
554.32 272.94 531.77 252.64 2 L
N
(P) 527.93 248.54 T
555.68 272.49 577.78 249.93 2 L
N
578.69 248.13 586.81 228.73 2 L
N
(B) 572.37 248.54 T
(P) 524.32 207.48 T
(B) 542.14 207.48 T
(P) 562.67 225.98 T
(B) 582.74 225.98 T
0 20.34 Q
(Q) 51.3 278.21 T
(K) 152.48 278.21 T
(K) 253.65 278.21 T
(J) 354.83 278.21 T
(J) 449.23 278.21 T
(Q) 543.64 278.21 T
(J) 107.23 343.46 T
(Q) 298.74 344.31 T
(K) 500.42 344.31 T
59.78 294.31 111.47 340.92 2 L
N
158.92 290.92 110.62 343.46 2 L
N
259.76 294.31 306.37 337.53 2 L
N
351.28 290.92 306.37 336.68 2 L
N
458.9 294.31 506.35 339.22 2 L
N
544.49 296.01 506.35 338.38 2 L
N
[7.6 6.586] 0 I
12.32 242.62 207.22 262.96 10.17 RR
N
[7.419 6.43] 0 I
217.39 242.62 399.58 264.65 11.02 RR
N
[7.474 6.478] 0 I
418.22 241.77 595.33 262.96 10.59 RR
N
[7.478 6.481] 0 I
308.91 221.44 495.34 238.38 8.47 RR
N
J
112.31 361.25 307.21 396 2 L
N
306.37 395.15 501.27 362.1 2 L
N
306.37 362.1 306.37 395.15 2 L
N
0 18 Q
(Player 1 bet) 603 249.71 T
(Player 2 bet) 603 226.71 T
(Player 1 bet) 603 208.71 T
(Player 1 payoff) 603 186.71 T
(Player 2 card) 603 282.71 T
(Player 1 card) 603 356.71 T
[7.543 6.537] 0 I
113.16 221.44 301.28 238.38 8.47 RR
N
[7.563 6.554] 0 I
12.32 222.28 102.14 239.23 8.47 RR
N
[7.563 6.554] 0 I
506.35 222.28 596.18 239.23 8.47 RR
N
[7.417 6.428] 0 I
23.34 204.49 160.62 219.74 7.63 RR
N
[7.417 6.428] 0 I
222.48 204.49 359.75 219.74 7.63 RR
N
[7.417 6.428] 0 I
420.77 204.49 558.04 219.74 7.63 RR
N
[7.617 6.601] 3.808 I
97.06 233.3 M
 97.06 254.36 188.5 271.43 301.28 271.43 D
N
[7.281 6.31] 3.641 I
302.13 271.43 M
 418.19 271.43 512.29 256.26 512.29 237.54 D
N
J
0 10.17 Q
FMENDPAGE
%%EndPage: "1" 2
%%Trailer
FMENDDOCUMENT
%%PageOrder: Descend
%%Pages: 2
%%DocumentFonts: Times-Roman
%%DocumentNeedsFonts: Times-Roman
%%DocumentSuppliedFonts:
%%EOF

%%EndDocument

 endTexFig
 1178 1892 a Fh(Fig.)15 b(1.)25 b Fj(Game)h(tree)f(for)i(a)f(v)n(ery)f
(small)h(p)r(ok)n(er)f(game)648 2334 y Fm(Of)32 b(course,)f(a)g
(complete-information)g(v)n(ersion)g(of)h(this)g(game)f(w)n(ould)h(b)r
(e)g(p)r(oin)n(tless,)523 2434 y(as)h(whic)n(hev)n(er)e(pla)n(y)n(er)h
(w)n(as)g(dealt)h(the)h(lo)n(w)n(er)d(card)i(w)n(ould)f(pass)h(and)g
(the)g(other)g(pla)n(y)n(er)523 2533 y(w)n(ould)f(win)g(the)h(an)n(te.)
e(The)i(c)n(hallenge)e(here)g(is)h(that,)h(b)r(ecause)f(cards)f(are)g
(priv)-5 b(ate,)32 b(the)523 2633 y(game-tree)22 b(no)r(des)h(that)h
(share)f(information)g(sets)g(with)h(eac)n(h)f(other)g(\(o)n(v)-5
b(als)23 b(in)g(the)h(\014gure\))523 2733 y(are)29 b(indistinguishable)
i(and)f(the)g(pla)n(y)n(er)f(m)n(ust)h(mak)n(e)g(the)h(same)e(c)n
(hoice)h(from)g(states)g(in)523 2832 y(these)e(sets.)f(Using)h(a)f
(simple)h(b)r(ottom-up)f(approac)n(h,)f(it)i(is)g(not)f(at)h(all)f
(eviden)n(t)h(ho)n(w)f(this)523 2932 y(constrain)n(t)20
b(can)h(b)r(e)h(satis\014ed.)f(F)-7 b(urther,)21 b(optimal)g(pla)n(y)g
(in)g(imp)r(erfect)h(information)f(games)523 3031 y(is)28
b(often)f(randomized)g(and)g(simple)h(game-tree)e(searc)n(h)g(cannot)h
(rev)n(eal)g(this.)648 3131 y(Koller)32 b(et)h(al.)h([3])f(pro)n(vide)f
(an)h(algorithm)g(that)g(maps)g(a)g(game)g(tree)g(notated)g(with)523
3231 y(information)g(sets)h(to)g(an)g(optimization)f(problem,)h(namely)
g(a)f(linear)g(program.)f(When)523 3330 y(this)23 b(optimization)f
(problem)g(is)h(solv)n(ed,)e(it)i(rev)n(eals)e(the)i(optimal)f(\(p)r
(ossibly)h(randomized\))523 3430 y(strategy)j(for)g(the)i(game.)e
(Roughly)h(sp)r(eaking,)f(v)-5 b(ariables)26 b(in)h(the)h(linear)e
(program)f(repre-)523 3530 y(sen)n(t)33 b(sto)r(c)n(hastic)f
(decisions,)g(constrain)n(ts)f(represen)n(t)h(making)g(the)h(same)f
(decision)g(from)523 3629 y(all)f(states)h(in)g(the)g(same)f
(information)g(set,)h(and)f(the)h(ob)5 b(jectiv)n(e)31
b(function)i(captures)e(the)523 3729 y(optimal)c(exp)r(ected)h(minimax)
g(winnings.)648 3828 y(An)e(optimal)f(strategy)g(for)g(this)h(t)n(yp)r
(e)g(of)g(game)f(can)g(ha)n(v)n(e)f(v)n(ery)h(ric)n(h)g(and)h(in)n
(teresting)523 3928 y(structure.)i(Consider)g(what)g(pla)n(y)n(er)g(1)g
(could)g(do)h(when)f(she)h(has)f(the)h(J.)f(Pla)n(y)n(er)f(2)h(migh)n
(t)523 4028 y(ha)n(v)n(e)35 b(either)h(the)h(Q)f(or)f(the)i(K.)f(In)g
(either)g(case,)g(pla)n(y)n(er)e(1)i(will)h(lose,)e(but)i(if)g(pla)n(y)
n(er)d(2)523 4127 y(has)h(the)h(Q)f(and)h(pla)n(y)n(er)d(1)j(can)f(con)
n(vince)f(him)i(she)g(has)f(the)h(K)f(\(p)r(erhaps)g(b)n(y)g(b)r
(etting)523 4227 y(whenev)n(er)28 b(p)r(ossible\),)h(pla)n(y)n(er)f(2)g
(migh)n(t)h(fold)h(and)f(she)g(w)n(ould)f(win.)i(This)f(is)g(an)f
(example)523 4327 y(of)f(\\blu\016ng".)f(Consider)h(also)f(what)h(pla)n
(y)n(er)e(1)i(could)g(do)f(if)i(she)f(had)g(the)g(K.)g(If)h(she)f(b)r
(ets)523 4426 y(grudgingly)c(\(only)h(matc)n(hing)f(pla)n(y)n(er)g(2's)
h(b)r(ets)g(when)h(necessary\),)d(she)j(migh)n(t)f(b)r(e)g(able)g(to)
523 4526 y(get)i(pla)n(y)n(er)f(2)h(to)g(b)r(et)h(b)r(efore)f(b)r
(eating)g(him.)h(This)f(is)g(sometimes)g(called)g(\\slo)n(w)e(pla)n
(ying".)523 4625 y(These)36 b(strategies)f(are)g(practiced)g(b)n(y)h
(exp)r(erienced)g(p)r(ok)n(er)f(pla)n(y)n(ers)f(and)i(emerge)f(from)523
4725 y(game-theoretic)26 b(solutions)h(as)g(w)n(ell)g([4].)648
4825 y(Th)n(us,)21 b(in)n(teresting)h(and)g(surprising)e(strategies)h
(for)g(complex)h(imp)r(erfect)h(information)523 4924
y(games)h(can)g(emerge)g(from)g(game-theoretic)f(solutions.)h(F)-7
b(urthermore,)24 b(using)g(the)h(linear-)p eop
%%Page: 4 4
4 3 bop 523 232 a Fj(4)237 b(Shi)26 b(and)f(Littman)523
448 y Fm(programming)d(approac)n(h,)h(solution)g(time)i(is)f(p)r
(olynomial)g(in)g(the)h(size)f(of)g(the)h(game)e(tree.)523
548 y(Unfortunately)-7 b(,)31 b(these)h(game)e(trees)g(can)h(get)g
(quite)h(large.)d(Consider)i(a)f(p)r(ok)n(er)g(game)h(in)523
648 y(whic)n(h)g Fd(c)g Fm(cards)e(are)h(dealt)h(from)g(a)f(dec)n(k)g
(of)h Fd(d)g Fm(cards)f(and)h(pla)n(y)n(ers)e(carry)g(out)i
Fd(b)f Fm(b)r(etting)523 747 y(rounds)f(eac)n(h)g(with)h(a)f(maxim)n
(um)h(of)g Fd(r)i Fm(raises)d(p)r(er)g(round.)2418 717
y Fl(1)2485 747 y Fm(The)h(game)e(tree)i(for)f(suc)n(h)g(a)523
847 y(game)d(con)n(tains)f(at)h(least)g(\()p Fd(d)16
b Fc(\000)g Fd(c)g Fm(+)f(1\))1734 817 y Fb(c)1791 847
y Fm(2)1833 817 y Fb(r)r(b)1925 847 y Fm(lea)n(v)n(es.)24
b(The)j(justi\014cation)f(for)g(this)h(equation)523 946
y(is)g(that)h(the)g(branc)n(hing)f(factor)f(for)h(eac)n(h)g(of)h(the)f
Fd(c)h Fm(dealt)g(cards)e(is)h(the)h(n)n(um)n(b)r(er)g(of)f(cards)523
1046 y(not)d(y)n(et)f(dealt)h(\(at)f(least)g Fd(d)10
b Fc(\000)g Fd(c)g Fm(+)g(1\).)25 b(Eac)n(h)d(of)i(the)g
Fd(b)f Fm(b)r(etting)i(rounds)d(consists)h(of)h(at)f(most)523
1146 y Fd(r)k Fm(raises,)c(eac)n(h)g(of)i(whic)n(h)f(can)g(at)g(most)g
(double)g(the)g(game-tree)f(size)h(\(one)g(for)g(eac)n(h)f(order)523
1245 y(the)28 b(t)n(w)n(o)f(pla)n(y)n(ers)f(carry)g(out)h(their)h
(raises\).)648 1345 y(Koller)k(and)h(Pfe\013er)f([4])h(rep)r(ort)g
(solving)f(games)g(of)h(size)g(\()p Fd(b;)14 b(c;)g(d;)g(r)r
Fm(\))34 b(=)e(\(1)p Fd(;)14 b Fm(2)p Fd(;)g Fm(128)p
Fd(;)g Fm(1\))523 1445 y(\(more)39 b(than)h(32K)f(lea)n(v)n(es\),)f
(\(1)p Fd(;)14 b Fm(2)p Fd(;)g Fm(3)p Fd(;)g Fm(11\))38
b(\(more)h(than)h(8K)f(lea)n(v)n(es\),)g(and)h(\(1)p
Fd(;)14 b Fm(10)p Fd(;)g Fm(11)p Fd(;)g Fm(3\))523 1544
y(\(more)39 b(than)g(8K)f(lea)n(v)n(es\).)g(P)n(ok)n(er)f(games)h(pla)n
(y)n(ed)g(b)n(y)h(p)r(eople)g(are)g(m)n(uc)n(h)g(larger.)e(The)523
1644 y(t)n(w)n(o-pla)n(y)n(er)d(v)n(ersion)h(of)i(T)-7
b(exas)36 b(Hold'em,)h(discussed)f(in)h(Section)g(4,)f(has)g(\()p
Fd(b;)14 b(c;)g(d;)g(r)r Fm(\))39 b(=)523 1744 y(\(4)p
Fd(;)14 b Fm(9)p Fd(;)g Fm(52)p Fd(;)g Fm(3\))31 b(or)h(more)h(than)g
(3)p Fd(:)p Fm(7)21 b Fc(\002)h Fm(10)1758 1714 y Fl(18)1860
1744 y Fm(lea)n(v)n(es.)32 b(Note)h(that,)g(often,)h(a)e(more)h
(appropri-)523 1843 y(ate)d(represen)n(tation)f(for)g(a)h(game)g(is)g
(a)g(directed)g(acyclic)f(graph,)g(since)i(the)f(order)f(cards)523
1943 y(are)j(dealt)h(is)g(not)g(imp)r(ortan)n(t)g(sometimes)g(\(pla)n
(y)n(er's)e(hole)i(cards)f(or)g(the)i(\015op)f(in)g(T)-7
b(exas)523 2043 y(Hold'em\).)27 b(W)-7 b(e)27 b(do)f(not)h(consider)e
(this)i(optimization)g(in)f(our)g(analysis,)g(although)f(it)i(can)523
2142 y(substan)n(tially)20 b(decrease)f(the)i(game)e(represen)n
(tation.)g(In)i(either)f(case,)g(though,)g(full)h(games)523
2242 y(are)27 b(w)n(ell)h(b)r(ey)n(ond)f(what)h(can)g(b)r(e)g(solv)n
(ed)f(using)h(the)g(linear-programming)d(approac)n(h.)h(In)523
2341 y(this)32 b(pap)r(er,)g(w)n(e)g(examine)f(sev)n(eral)f
(abstraction-based)g(approac)n(hes)g(that)i(can)g(b)r(e)g(used)523
2441 y(to)g(generate)e(appro)n(ximations)g(to)i(large)f(imp)r(erfect)h
(information)f(games.)g(Note)h(that)g(a)523 2541 y(related)27
b(theoretical)g(treatmen)n(t)g(of)h(game-theoretic)e(abstraction)g(is)h
(underw)n(a)n(y)f([5].)648 2641 y(Section)g(3)f(describ)r(es)h(binning)
g(metho)r(ds,)h(whic)n(h)f(e\013ectiv)n(ely)g(reduce)g(the)g(n)n(um)n
(b)r(er)g(of)523 2740 y(cards)c(in)i(the)g(dec)n(k)f
Fd(d)p Fm(.)h(Section)f(4)g(describ)r(es)g(w)n(a)n(ys)f(of)h(treating)g
(b)r(etting)h(rounds)f(indep)r(en-)523 2840 y(den)n(tly)28
b(to)f(e\013ectiv)n(ely)g(reduce)g(the)h(n)n(um)n(b)r(er)f(of)h(b)r
(etting)g(rounds)f Fd(r)r Fm(.)h(Section)g(5)f(describ)r(es)523
2939 y(the)33 b(results)f(of)h(applying)f(these)h(ideas)f(in)h(a)g
(game)e(w)n(e)i(in)n(v)n(en)n(ted)f(called)g(Rho)r(de)h(Island)523
3039 y(Hold'em.)523 3306 y Fg(3)112 b(Binning)523 3506
y Fm(The)28 b(simple)g(three-card)e(game)h(in)h(Section)f(2)h(can)f(b)r
(e)h(easily)f(scaled)g(up)h(b)n(y)f(considering)523 3606
y(larger)g(dec)n(ks.)i(Ev)n(en)f(with)i(a)e(52-card)f(dec)n(k)i(and)g
(3)f(raises,)g(the)i(game)e(is)h(not)g(v)n(ery)f(c)n(hal-)523
3705 y(lenging)d(to)h(solv)n(e)f(\(around)g(21K)g(lea)n(v)n(es)g(in)h
(the)g(game)f(tree\).)h(Ho)n(w)n(ev)n(er,)f(it)h(is)g(not)g(a)g(h)n
(uge)523 3805 y(leap)d(to)h(imagine)f(a)h(p)r(ok)n(er)e(v)-5
b(ariation)23 b(where)g(pla)n(y)n(ers)f(are)h(dealt)h(5-card)e(hands)h
(and)h(m)n(ust)523 3905 y(b)r(et)32 b(on)g(them.)g(This)g(is)f(similar)
g(to,)h(but)g(not)g(iden)n(titical)g(to,)f(dealing)g(eac)n(h)g(pla)n(y)
n(er)f(one)523 4004 y(card)d(from)g(a)g(dec)n(k)g(of)g(size)h(52)e(c)n
(ho)r(ose)g(5)h(\(around)g(2.6M\))g(cards)g(with)h(the)g(highest)f
(card)523 4104 y(winning,)d(since)g(there)g(is)g(a)f(w)n(ell)h
(de\014ned)g(total)g(order)f(o)n(v)n(er)f(all)i(p)r(ossible)f(hands.)h
(The)g(full)523 4203 y(game)j(tree)g(has)g(more)g(than)h(5)p
Fd(:)p Fm(4)17 b Fc(\002)h Fm(10)1747 4173 y Fl(13)1844
4203 y Fm(lea)n(v)n(es.)648 4303 y(F)-7 b(or)23 b(games)h(lik)n(e)g
(this,)h(with)g(a)f(single)g(b)r(etting)h(round)f(based)g(on)g(the)h
(en)n(tire)f(hand,)g(w)n(e)523 4403 y(can)29 b(use)g(a)g(grouping)f
(metho)r(d)i(to)f(reduce)g(the)h(n)n(um)n(b)r(er)f(of)h(distinct)g
(hands)f(considered.)523 4503 y(W)-7 b(e)31 b(rank)f(all)h(p)r(ossible)
f(hands)h(b)n(y)f(their)h(strength)f(to)h(obtain)f(a)h(ranking)e(of)i
(eac)n(h)f(hand)523 4602 y(\(a)25 b(hand)h(with)f(higher)g(v)-5
b(alue)25 b(alw)n(a)n(ys)f(b)r(eats)h(a)g(hand)g(with)h(lo)n(w)n(er)e
(v)-5 b(alue\).)26 b(F)-7 b(or)24 b(an)n(y)h(hand,)p
523 4656 473 4 v 546 4710 a Fk(1)606 4742 y Fj(Throughout)i(this)g(pap)
r(er,)g(w)n(e)h(use)f(\\raise")h(to)f(mean)f(putting)h(money)e(in)i
(the)g(p)r(ot)f(after)i(the)606 4833 y(an)n(te.)h(This)g(is)h
(di\013eren)n(t)e(from)g(the)h(term)e(\\b)r(etting)i(lev)n(els")h(used)
e(b)n(y)g(some)h(authors,)g(whic)n(h)606 4924 y(do)r(es)d(not)g(coun)n
(t)f(the)g(\014rst)h(b)r(et)f(as)h(a)g(raise.)p eop
%%Page: 5 5
5 4 bop 2370 232 a Fj(Game-Theoretic)26 b(P)n(ok)n(er)238
b(5)523 448 y Fm(w)n(e)28 b(can)f(determine)h(its)g(ranking)f(v)n(ery)g
(fast)h(either)g(b)n(y)g(lo)r(oking)f(it)h(up)g(in)g(a)g(database,)f
(or)523 548 y(just)h(calculating)f(it)h(in)g(real-time.)648
659 y(Next,)38 b(w)n(e)f(group)g(hands)h(in)n(to)f(equal-size)g(bins.)h
(Eac)n(h)f(bin)h(con)n(tains)f(hands)g(with)523 759 y(similar)29
b(rankings.)f(The)i(game)f(is)h(then)g(solv)n(ed)f(at)h(the)g(lev)n(el)
f(of)h(bins:)g(w)n(e)f(imagine)h(that)523 858 y(pla)n(y)n(ers)d(are)g
(randomly)h(assigned)f(to)i(bins,)f(with)i(the)f(highest)f(ranking)f
(bin)i(the)g(winner)523 958 y(and)38 b(ties)h(brok)n(en)e(arbitrarily;)
g(b)r(etting)i(strategies)e(are)g(computed)i(for)f(the)h(resulting)523
1058 y(game.)f(The)h(n)n(um)n(b)r(er)g(of)g(bins)g(used)f(in)h(the)h
(appro)n(ximation)d(con)n(trols)g(the)i(degree)f(of)523
1157 y(abstraction)26 b(and)i(can)f(b)r(e)h(adjusted)f(to)h(accommo)r
(date)e(space)h(and)g(time)h(requiremen)n(ts.)648 1268
y(A)n(t)19 b(a)g(high)g(lev)n(el,)f(this)i(ma)n(y)e(not)h(b)r(e)h(to)r
(o)f(di\013eren)n(t)g(from)g(ho)n(w)f(h)n(umans)h(pla)n(y)f(p)r(ok)n
(er.)h(W)-7 b(e)523 1368 y(do)23 b(not)g(really)f(care)g(whether)h(w)n
(e)f(ha)n(v)n(e)g(t)n(w)n(o)h(kings)f(with)i(a)e(\014v)n(e)h(of)g
(spades)f(or)g(whether)h(w)n(e)523 1468 y(ha)n(v)n(e)j(t)n(w)n(o)h
(kings)f(with)i(a)f(six)g(of)g(diamonds;)g(w)n(e)f(treat)h(these)g
(situations)g(fairly)g(similarly)523 1567 y(in)i(terms)f(of)g(our)g
(decision)g(making.)g(Also,)g(note)g(that)h(if)g(w)n(e)f(pro)r(duce)g
(a)g(strategy)f(using)523 1667 y(the)32 b(same)e(n)n(um)n(b)r(er)h(of)h
(bins)f(as)g(the)g(total)g(n)n(um)n(b)r(er)g(of)g(hands)g(p)r(ossible,)
g(then)h(what)f(w)n(e)523 1767 y(ha)n(v)n(e)c(is)g(the)h(true)g
(optimal)f(strategy)-7 b(.)27 b(Of)h(course,)e(the)i(accuracy)e(of)i
(the)g(appro)n(ximation)523 1866 y(dep)r(ends)g(on)f(ho)n(w)g(the)h
(groups)f(are)f(formed.)648 1977 y(F)-7 b(or)38 b(our)h(test-b)r(ed,)h
(w)n(e)f(used)h(a)f(game)g(with)h(200)e(p)r(ossible)h(hands.)h(Both)f
(pla)n(y)n(ers)523 2077 y(initially)34 b(an)n(te)f(one)h(c)n(hip)f(in)n
(to)h(the)g(p)r(ot.)g(Eac)n(h)e(pla)n(y)n(er)h(is)g(then)h(dealt)g(a)f
(hand)h(and)g(the)523 2177 y(b)r(etting)39 b(round)e(b)r(egins.)h(F)-7
b(or)38 b(this)g(game,)g(\()p Fd(b;)14 b(c;)g(d;)g(r)r
Fm(\))41 b(=)f(\(1)p Fd(;)14 b Fm(2)p Fd(;)g Fm(200)p
Fd(;)g Fm(1\).)36 b(Its)i(game)f(tree)523 2276 y(con)n(tains)27
b(at)g(least)g(79K)g(lea)n(v)n(es.)648 2387 y(W)-7 b(e)20
b(\014rst)g(generated)g(the)g(optimal)h(strategy)e(for)g(pla)n(y)n(er)g
(1.)h(W)-7 b(e)21 b(then)g(ran)e(exp)r(erimen)n(ts)523
2487 y(dividing)j(hands)f(in)n(to)h(from)f(4)g(to)h(200)e(bins)i(and)f
(pro)r(duced)h(strategies)e(for)h(pla)n(y)n(er)f(2)i(based)523
2587 y(on)28 b(eac)n(h)g(of)h(these)g(groupings.)e(So,)h(for)h
(example,)f(when)h(w)n(e)f(used)h(50)f(bins)h(to)f(solv)n(e)g(our)523
2686 y(game,)23 b(bin)i(n)n(um)n(b)r(er)f(1)g(\(the)g(lo)n(w)n(est)f
(bin\))i(con)n(tained)f(the)g(lo)n(w)n(est)f(hands)h(of)g(1,)g(2,)g(3)f
(and)h(4.)523 2786 y(Similarly)-7 b(,)26 b(bin)g(n)n(um)n(b)r(er)g(50)g
(con)n(tained)f(the)i(highest)f(hands)g(of)g(197,)f(198,)f(199,)h(and)h
(200.)648 2897 y(Figure)40 b(2)h(sho)n(ws)g(ho)n(w)f(w)n(ell)i(pla)n(y)
n(er)d(1)i(fared)g(against)f(the)i(optimal)f(strategy)g(for)523
2997 y(pla)n(y)n(er)24 b(2)g(based)h(on)g(1,000,000)d(games)i(\(w)n(e)h
(felt)h(this)g(n)n(um)n(b)r(er)f(of)g(games)f(w)n(ould)h(b)r(e)g
(su\016-)523 3096 y(cien)n(t)f(to)h(see)f(statistically)f(signi\014can)
n(t)h(results\).)g(Note)g(that)h(pla)n(y)n(er)e(2)h(has)g(an)g(adv)-5
b(an)n(tage)523 3196 y(in)30 b(this)h(and)e(most)h(p)r(ok)n(er)f(games)
g(b)n(y)h(virtue)f(of)h(gaining)f(information)h(from)f(seeing)h(the)523
3296 y(other)i(pla)n(y)n(er's)e(initial)j(selection.)f(The)h(results)e
(are)h(quite)h(encouraging;)d(using)i(as)g(few)523 3395
y(bins)25 b(as)f(10\045)f(of)i(the)g(n)n(um)n(b)r(er)f(of)h(hands,)f
(the)h(resulting)f(pla)n(y)g(is)g(almost)g(as)g(go)r(o)r(d)g(as)g(that)
523 3495 y(of)k(the)g(optimal)f(strategy)-7 b(.)648 3606
y(In)34 b(p)r(opular)g(p)r(ok)n(er)g(games,)f(pla)n(y)n(ers)g(m)n(ust)i
(b)r(et)g(based)f(on)g(partial)g(hands)g(and)h(the)523
3706 y(principle)26 b(concern)f(is)h(\\hand)f(p)r(oten)n(tial".)h(The)g
(ranking)f(tric)n(k)g(just)i(describ)r(ed)e(do)r(es)h(not)523
3805 y(directly)38 b(apply)f(here)g(b)r(ecause)h(there)f(is)h(no)g
(direct)f(linear)g(ranking.)g(F)-7 b(or)37 b(example,)g(a)523
3905 y(partial)25 b(hand)i(consisting)e(of)h(four)g(spades)g(could)g
(turn)g(in)n(to)g(a)g(\015ush)g(if)h(another)e(spade)h(is)523
4005 y(added)g(\(go)r(o)r(d)g(hand\))g(or)g(nothing)g(in)g(particular)f
(if)h(a)g(non-spade)f(is)h(added)g(\(bad)h(hand\).)648
4116 y(One)37 b(w)n(a)n(y)f(to)i(score)e(partial)h(hands)g(is)h(to)f
(use)h(the)g(a)n(v)n(erage)d(rank)h(of)i(all)f(p)r(ossible)523
4215 y(complete)20 b(hands)h(that)f(the)h(partial)f(hand)g(can)g(dev)n
(elop)g(in)n(to.)g(P)n(artial)f(hands)h(can)g(then)h(b)r(e)523
4315 y(binned)e(according)e(to)i(their)g(assigned)e(scores.)g(Note)i
(that)g(this)g(is)g(only)f(an)h(appro)n(ximation)523
4415 y(and)h(a)g(con)n(v)n(enien)n(t)f(w)n(a)n(y)g(of)i(grouping)d
(hands)i(in)n(to)g(bins;)h(w)n(e)f(are)f(not)h(actually)g(using)g
(these)523 4514 y(scores)34 b(to)i(judge)g(hands.)g(W)-7
b(e)36 b(pla)n(y)f(eac)n(h)g(bin)h(against)f(another)g(to)h(get)f(the)i
(exp)r(ected)523 4614 y(pa)n(y)n(o\013,)27 b(and)g(this)h(is)f(used)h
(in)g(de\014ning)f(the)h(pa)n(y)n(o\013s)f(for)g(the)h(\\abstracted")d
(game.)648 4725 y(W)-7 b(e)23 b(in)n(tro)r(duced)h(another)e(game)h(to)
g(test)h(our)f(metho)r(d)h(for)f(dealing)g(with)h(games)e(with)523
4825 y(p)r(oten)n(tial.)j(F)-7 b(or)25 b(this)g(game,)g(w)n(e)g(use)g
(a)g(52-card)e(dec)n(k.)i(Eac)n(h)f(pla)n(y)n(er)f(is)i(dealt)g(one)g
(priv)-5 b(ate)523 4924 y(card.)25 b(A)g(third)h(\\public")f(card)f(is)
i(dealt)f(on)n(to)f(the)i(table)g(to)f(b)r(e)h(shared)e(b)n(y)h(b)r
(oth)h(pla)n(y)n(ers.)p eop
%%Page: 6 6
6 5 bop 523 232 a Fj(6)237 b(Shi)26 b(and)f(Littman)523
365 y
 18945146 13072143 3289088 3289088 26970521 19866091 startTexFig
 523 365 a
%%BeginDocument: fig1.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: gnuplot 3.7 patchlevel 1
%%CreationDate: Thu May 18 23:05:40 2000
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color true def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -100 def
/dl {10 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth } def
/AL { stroke userlinewidth 2 div setlinewidth } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Times-Roman) findfont 300 scalefont setfont
1.000 UL
LTb
1710 900 M
63 0 V
4917 0 R
-63 0 V
-5097 0 R
(5000) Rshow
1710 1440 M
63 0 V
4917 0 R
-63 0 V
-5097 0 R
(10000) Rshow
1710 1980 M
63 0 V
4917 0 R
-63 0 V
-5097 0 R
(15000) Rshow
1710 2520 M
63 0 V
4917 0 R
-63 0 V
-5097 0 R
(20000) Rshow
1710 3060 M
63 0 V
4917 0 R
-63 0 V
-5097 0 R
(25000) Rshow
1710 3600 M
63 0 V
4917 0 R
-63 0 V
-5097 0 R
(30000) Rshow
1710 4140 M
63 0 V
4917 0 R
-63 0 V
-5097 0 R
(35000) Rshow
1710 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(0) Cshow
2208 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(20) Cshow
2706 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(40) Cshow
3204 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(60) Cshow
3702 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(80) Cshow
4200 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(100) Cshow
4698 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(120) Cshow
5196 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(140) Cshow
5694 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(160) Cshow
6192 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(180) Cshow
6690 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(200) Cshow
1.000 UL
LTb
1710 900 M
4980 0 V
0 3240 V
-4980 0 V
0 -3240 V
300 2520 M
currentpoint gsave translate 90 rotate 0 0 M
(Payoff) Cshow
grestore
4200 150 M
(Number of bins used) Cshow
4200 4590 M
(Game Without Potential) Cshow
1.000 UP
1.000 UL
LT0
6690 3883 M
6565 3682 L
6441 3487 L
-125 186 V
6192 3569 L
-125 -21 V
-124 268 V
5818 3613 L
-124 88 V
-125 -18 V
-124 -83 V
5320 3465 L
-124 260 V
5071 3556 L
-124 113 V
-125 40 V
-124 -22 V
-125 -24 V
4449 3433 L
-125 219 V
-124 169 V
4075 3440 L
-124 201 V
3826 3502 L
-124 -47 V
3577 3319 L
-124 -74 V
-125 290 V
-124 -96 V
-125 331 V
-124 -29 V
2830 3338 L
-124 70 V
2581 3213 L
-124 -70 V
-125 255 V
2208 3133 L
-125 -4 V
1959 2284 L
1834 1232 L
6690 3883 Pls
6565 3682 Pls
6441 3487 Pls
6316 3673 Pls
6192 3569 Pls
6067 3548 Pls
5943 3816 Pls
5818 3613 Pls
5694 3701 Pls
5569 3683 Pls
5445 3600 Pls
5320 3465 Pls
5196 3725 Pls
5071 3556 Pls
4947 3669 Pls
4822 3709 Pls
4698 3687 Pls
4573 3663 Pls
4449 3433 Pls
4324 3652 Pls
4200 3821 Pls
4075 3440 Pls
3951 3641 Pls
3826 3502 Pls
3702 3455 Pls
3577 3319 Pls
3453 3245 Pls
3328 3535 Pls
3204 3439 Pls
3079 3770 Pls
2955 3741 Pls
2830 3338 Pls
2706 3408 Pls
2581 3213 Pls
2457 3143 Pls
2332 3398 Pls
2208 3133 Pls
2083 3129 Pls
1959 2284 Pls
1834 1232 Pls
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Times-Roman

%%EndDocument

 endTexFig
 850 2196 a Fh(Fig.)14 b(2.)26 b Fj(P)n(a)n(y)n(o\013)f(vs.)h(optimal)g
(for)g(a)g(game)g(with)g(b)r(etting)f(only)h(at)g(the)f(end)523
2659 y Fm(Pla)n(y)n(ers)j(then)j(b)r(et)g(\(up)g(to)g(three)f
(raises\).)g(A)g(\014nal)h(public)g(card)e(is)i(then)g(dealt)f(and)h
(the)523 2759 y(pla)n(y)n(er)h(with)i(the)g(b)r(est)g(3-card)e(hand)h
(\(one)h(priv)-5 b(ate)33 b(and)h(t)n(w)n(o)e(public)i(cards\))f(wins)h
(the)523 2858 y(p)r(ot.)668 2828 y Fl(2)743 2858 y Fm(F)-7
b(or)36 b(this)h(game,)f(\()p Fd(b;)14 b(c;)g(d;)g(r)r
Fm(\))40 b(=)e(\(1)p Fd(;)14 b Fm(4)p Fd(;)g Fm(52)p
Fd(;)g Fm(3\),)35 b(so)h(the)i(game)e(tree)g(has)h(o)n(v)n(er)e(46M)523
2958 y(lea)n(v)n(es.)648 3066 y(Although)27 b(this)h(game)f(tree)g(w)n
(ould)g(b)r(e)h(to)r(o)f(large)f(to)i(solv)n(e)e(with)i(our)f(a)n(v)-5
b(ailable)26 b(soft-)523 3166 y(w)n(are,)32 b(w)n(e)g(can)h(eliminate)g
(t)n(w)n(o)f(of)h(the)h(cards)e(from)g(the)i(computation.)e(First,)h(b)
r(ecause)523 3265 y(one)22 b(public)h(card)f(is)g(dealt)g(b)r(efore)g
(an)n(y)g(b)r(etting)h(tak)n(es)f(place,)g(it)g(is)h
Fe(public)j(know)t(le)l(dge)k Fm(and)523 3365 y(w)n(e)j(can)g(essen)n
(tially)f(treat)g(this)i(card)e(as)h(part)f(of)h(the)h(problem)e
(statemen)n(t)i(\(assuming)523 3465 y(w)n(e)j(are)f(willing)i(to)f
(solv)n(e)f(a)h(linear)f(program)g(at)h(game)f(time\).)j(Second,)e(b)r
(ecause)g(the)523 3564 y(other)23 b(public)i(card)e(is)h(dealt)g(after)
g(b)r(etting)g(is)g(complete,)g(w)n(e)g(can)f(compute)i(the)f
Fe(exp)l(e)l(cte)l(d)523 3664 y(value)42 b Fm(of)34 b(the)h(winnings)g
(o)n(v)n(er)d(all)j(p)r(ossible)f(cards)f(when)i(w)n(e)g(compute)f(the)
h(v)-5 b(alues)35 b(for)523 3763 y(the)e(lea)n(v)n(es.)f(Therefore,)f
(w)n(e)i(really)f(only)g(ha)n(v)n(e)g(to)h(reason)e(sp)r(eci\014cally)i
(ab)r(out)f(the)i(t)n(w)n(o)523 3863 y(hidden)28 b(cards,)e(or)g(a)g
(game)h(tree)f(with)i(around)e(21K)f(lea)n(v)n(es.)h(Figure)g(3)h(sho)n
(ws)f(the)h(result)523 3963 y(of)33 b(pla)n(y)n(er)e(2)h(v)n(ersus)f
(pla)n(y)n(er)h(1)g(\(pla)n(y)n(er)f(2)i(is)f(using)g(the)i(optimal)e
(strategy\).)g(Similar)g(to)523 4062 y(the)d(game)f(without)h(p)r(oten)
n(tial,)g(w)n(e)f(can)h(do)f(quite)h(w)n(ell)g(using)f(a)h(v)n(ery)e
(small)i(n)n(um)n(b)r(er)f(of)523 4162 y(bins.)648 4270
y(In)c(a)g(game)g(with)g(m)n(ultiple)h(b)r(etting)g(rounds,)f(a)g
(di\013eren)n(t)g(binning)h(sc)n(heme)f(w)n(ould)g(b)r(e)523
4370 y(used)h(at)f(eac)n(h)g(round,)g(with)h(transition)f
(probabilities)g(calculated)g(b)r(et)n(w)n(een)h(consecutiv)n(e)523
4469 y(pairs)30 b(of)i(bins.)f(These)h(probabilities)e(can)h(b)r(e)h
(calculated)f(b)n(y)g(en)n(umeration)g(\(costly\))g(or)523
4569 y(b)n(y)g(random)g(sampling)g(\(risky\).)h(F)-7
b(or)31 b(a)g(game)g(with)h Fd(b)f Fm(b)r(etting)i(rounds)e(at)g
Fd(r)k Fm(raises)30 b(p)r(er)p 523 4656 473 4 v 546 4710
a Fk(2)606 4742 y Fj(Three-card)83 b(hands)g(are)g(rank)n(ed)f(sligh)n
(tly)i(di\013eren)n(tly)e(from)h(\014v)n(e-card)f(hands:)606
4833 y(three)74 b(of)g(a)g(kind)f(b)r(eats)h(a)g(straigh)n(t,)h(and)e
(a)h(straigh)n(t)h(b)r(eats)f(a)g(\015ush.)f(See)606
4924 y Fi(http://conjelco.com/faq/poker)q(.htm)q(l#P15)32
b Fj(for)27 b(details.)p eop
%%Page: 7 7
7 6 bop 2370 232 a Fj(Game-Theoretic)26 b(P)n(ok)n(er)238
b(7)523 365 y
 18945146 13072143 3289088 3289088 26970521 19866091 startTexFig
 523 365 a
%%BeginDocument: fig2.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: gnuplot 3.7 patchlevel 1
%%CreationDate: Thu May 18 23:05:34 2000
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color true def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -100 def
/dl {10 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth } def
/AL { stroke userlinewidth 2 div setlinewidth } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Times-Roman) findfont 300 scalefont setfont
1.000 UL
LTb
1890 900 M
63 0 V
4737 0 R
-63 0 V
-4917 0 R
(-20000) Rshow
1890 1224 M
63 0 V
4737 0 R
-63 0 V
-4917 0 R
(-15000) Rshow
1890 1548 M
63 0 V
4737 0 R
-63 0 V
-4917 0 R
(-10000) Rshow
1890 1872 M
63 0 V
4737 0 R
-63 0 V
-4917 0 R
(-5000) Rshow
1890 2196 M
63 0 V
4737 0 R
-63 0 V
-4917 0 R
(0) Rshow
1890 2520 M
63 0 V
4737 0 R
-63 0 V
-4917 0 R
(5000) Rshow
1890 2844 M
63 0 V
4737 0 R
-63 0 V
-4917 0 R
(10000) Rshow
1890 3168 M
63 0 V
4737 0 R
-63 0 V
-4917 0 R
(15000) Rshow
1890 3492 M
63 0 V
4737 0 R
-63 0 V
-4917 0 R
(20000) Rshow
1890 3816 M
63 0 V
4737 0 R
-63 0 V
-4917 0 R
(25000) Rshow
1890 4140 M
63 0 V
4737 0 R
-63 0 V
-4917 0 R
(30000) Rshow
1890 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(0) Cshow
2326 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(5) Cshow
2763 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(10) Cshow
3199 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(15) Cshow
3635 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(20) Cshow
4072 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(25) Cshow
4508 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(30) Cshow
4945 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(35) Cshow
5381 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(40) Cshow
5817 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(45) Cshow
6254 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(50) Cshow
6690 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(55) Cshow
1.000 UL
LTb
1890 900 M
4800 0 V
0 3240 V
-4800 0 V
0 -3240 V
300 2520 M
currentpoint gsave translate 90 rotate 0 0 M
(Payoff) Cshow
grestore
4290 150 M
(Number of bins used) Cshow
4290 4590 M
(Game With Potential) Cshow
1.000 UP
1.000 UL
LT0
2239 1046 M
175 1140 V
174 204 V
175 954 V
174 89 V
175 -277 V
174 787 V
175 -521 V
174 563 V
175 -59 V
175 40 V
174 -65 V
175 -227 V
174 382 V
175 -140 V
174 154 V
175 -401 V
174 189 V
175 20 V
174 152 V
175 39 V
175 15 V
174 -95 V
175 76 V
174 38 V
2239 1046 Pls
2414 2186 Pls
2588 2390 Pls
2763 3344 Pls
2937 3433 Pls
3112 3156 Pls
3286 3943 Pls
3461 3422 Pls
3635 3985 Pls
3810 3926 Pls
3985 3966 Pls
4159 3901 Pls
4334 3674 Pls
4508 4056 Pls
4683 3916 Pls
4857 4070 Pls
5032 3669 Pls
5206 3858 Pls
5381 3878 Pls
5555 4030 Pls
5730 4069 Pls
5905 4084 Pls
6079 3989 Pls
6254 4065 Pls
6428 4103 Pls
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Times-Roman

%%EndDocument

 endTexFig
 995 2196 a Fh(Fig.)14 b(3.)26 b Fj(P)n(a)n(y)n(o\013)f(vs.)h(optimal)g
(for)g(a)g(game)g(with)g(hand)f(p)r(oten)n(tial)523 2645
y Fm(round)d(with)h Fd(B)k Fm(bins)22 b(used)h(b)r(et)n(w)n(een)f(eac)n
(h)g(round,)g(the)h(abstracted)e(game)h(tree)g(has)g
Fd(B)3264 2615 y Fb(b)3297 2645 y Fm(2)3339 2615 y Fb(r)r(b)523
2745 y Fm(lea)n(v)n(es.)i(This)i(can)f(b)r(e)i(a)e(substan)n(tial)g
(reduction)g(if)i Fd(b)22 b(<<)g(c)k Fm(\(man)n(y)g(cards)e(dealt)i(b)r
(et)n(w)n(een)523 2845 y(eac)n(h)h(b)r(etting)h(round\))f(or)g
Fd(B)g(<<)c(d)k Fm(\(far)h(few)n(er)f(bins)h(than)f(unique)h(cards)f
(in)g(the)h(dec)n(k\).)523 3119 y Fg(4)112 b(Indep)s(enden)m(t)39
b(Betting)d(Rounds)523 3327 y Fm(T)-7 b(exas)20 b(Hold'em)h(is)g(a)f(p)
r(ok)n(er)g(v)-5 b(arian)n(t)20 b(used)h(to)g(decide)g(the)g(w)n(orld)f
(c)n(hampion.)g(Eac)n(h)g(pla)n(y)n(er)523 3427 y(is)i(dealt)h(t)n(w)n
(o)e(cards,)h(follo)n(w)n(ed)f(b)n(y)h(a)g(b)r(etting)h(round,)f(then)h
(three)f(public)h(cards)f(are)f(dealt,)523 3526 y(follo)n(w)n(ed)26
b(b)n(y)i(a)f(b)r(etting)h(round,)f(then)h(one)f(public)h(card,)f
(follo)n(w)n(ed)f(b)n(y)h(a)g(b)r(etting)h(round,)523
3626 y(then)d(one)f(\014nal)g(public)h(card)e(and)i(b)r(etting)g
(round.)e(Th)n(us,)i(the)f(game-tree)f(size)h(for)g(T)-7
b(exas)523 3725 y(Hold'em)28 b(is)f(h)n(uge.)648 3827
y(In)41 b(the)g(con)n(text)g(of)g(our)f(curren)n(t)h(w)n(ork,)e(w)n(e)i
(in)n(tro)r(duce)g Fe(R)n(ho)l(de)i(Island)g(Hold'em)p
Fm(,)523 3926 y(whic)n(h)35 b(is)g(in)n(tended)h(to)f(b)r(e)g(similar)g
(to)g(T)-7 b(exas)34 b(Hold'em)h(in)g(st)n(yle,)g(but)h(m)n(uc)n(h)f
(smaller.)523 4026 y(In)f(Rho)r(de)f(Island)g(Hold'em,)h(eac)n(h)e(pla)
n(y)n(er)g(is)h(dealt)h(one)e(priv)-5 b(ate)33 b(card,)g(follo)n(w)n
(ed)f(b)n(y)h(a)523 4126 y(b)r(etting)d(round,)f(follo)n(w)n(ed)f(b)n
(y)h(a)g(public)g(card,)g(follo)n(w)n(ed)f(b)n(y)h(a)f(b)r(etting)i
(round,)f(follo)n(w)n(ed)523 4225 y(b)n(y)35 b(a)f(\014nal)h(public)h
(card)e(and)h(b)r(etting)g(round.)g(The)g(three-card)f(hands)g(based)h
(on)g(the)523 4325 y(priv)-5 b(ate)24 b(card)f(and)h(t)n(w)n(o)f
(public)h(cards)f(are)g(compared.)g(Although)h(this)g(is)g(clearly)f(a)
g(m)n(uc)n(h)523 4424 y(smaller)i(game)g(than)h(T)-7
b(exas)25 b(Hold'em,)h(at)g(\()p Fd(b;)14 b(c;)g(d;)g(r)r
Fm(\))24 b(=)f(\(3)p Fd(;)14 b Fm(4)p Fd(;)g Fm(52)p
Fd(;)g Fm(3\))24 b(the)i(game)f(tree)h(still)523 4524
y(has)h(more)g(than)h(2.9B)e(lea)n(v)n(es.)648 4625 y(Although)20
b(the)h(binning)g(idea)f(from)g(the)h(previous)e(section)h(could)g(b)r
(e)h(applied)g(to)f(these)523 4725 y(games)33 b(with)i(p)r(erhaps)f(b)r
(et)n(w)n(een)h(5)f(and)g(10)g(bins,)g(w)n(e)g(decided)h(to)f(explore)g
(a)g(di\013eren)n(t)523 4825 y(t)n(yp)r(e)25 b(of)h(appro)n(ximation.)d
(Whereas)h(binning)i(tec)n(hniques)f(are)f(useful)i(in)f(con)n
(trolling)f(the)523 4924 y(com)n(binatorial)g(explosion)h(due)h(to)g
(the)h(n)n(um)n(b)r(er)f(of)g(di\013eren)n(t)g(hands)g(that)g(can)g(b)r
(e)g(dealt,)p eop
%%Page: 8 8
8 7 bop 523 232 a Fj(8)237 b(Shi)26 b(and)f(Littman)523
448 y Fm(the)30 b(tec)n(hniques)f(in)g(this)h(section)e(address)g(the)i
(explosion)e(due)i(to)f(the)g(large)f(n)n(um)n(b)r(er)h(of)523
548 y(b)r(etting)35 b(rounds.)f(The)h(main)g(idea)f(is)g(to)h(treat)f
(b)r(etting)h(rounds)f(quasi-indep)r(enden)n(tly)523
648 y(instead)27 b(of)h(solving)f(the)h(en)n(tire)f(game)f(at)i(once.)
523 839 y
 22544723 16577003 263127 -40192655 41245163 -10064609 startTexFig

 270 rotate
 523 839 a
%%BeginDocument: prune.ps
%!PS-Adobe-3.0
%%BoundingBox: 153 4 611 627
%%Pages: 1 0
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%DocumentNeedsFonts: (atend)
%%DocumentSuppliedFonts: (atend)
%%Creator: Frame 5.5 - modified by fixfm5
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.5, for use with Adobe Unix Frame 5.5 products
%
% This ps_prolog file is Copyright (c) 1986-1996 Adobe Systems, Incoporated.
% All rights reserved.  This ps_prolog file may be freely copied and 
% distributed in conjunction with documents created using FrameMaker, 
% FrameMaker+SGML, FrameReader, and FrameViewer as long as this 
% copyright notice is preserved.
/FMDocSave save def
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.5) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	2 copy exch = = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsetsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orghalftone
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
	/tintGray
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known systemdict /currentdistillerparams known and {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix defaultmatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 1] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/tintCMYK {
	1 tintGray sub FrameCurColors 0 4 getinterval aload pop 	
	4 index mul 5 1 roll										
	3 index mul 5 1 roll										
	2 index mul 5 1 roll										
	mul 4 1 roll												
}bind def
/tintRGB {
	1 tintGray sub FrameCurColors 4 3 getinterval aload pop 	
	1 exch sub 3 index mul 1 exch sub 4 1 roll					
	1 exch sub 2 index mul 1 exch sub 4 1 roll					
	1 exch sub mul 1 exch sub 3 1 roll							
}bind def
/combineColor {
	/tintGray 1 1 FrameCurGray sub FrameCurColors 7 get mul sub def
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			tintCMYK FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				tintGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					tintCMYK
					RealSetcmykcolor
				} {
					tintRGB
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ tintGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{tintGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop tintGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop tintGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop tintGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix defaultmatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix defaultmatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	fMLevel1 {
		FMPColor {
			orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
		}
		{
			orgxfer cvx settransfer
		} ifelse
		orgfreq organgle orgproc cvx setscreen
	} {
		orghalftone sethalftone
	}ifelse
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	dup 1 gt {/#copies exch def} {pop} ifelse
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	
	fMLevel1 not {
		/orghalftone currenthalftone def
	}if 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMENDDOCUMENT {
	FMDocSave restore	
} def
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature: *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	
	mark
	statusdict begin 
		/setpageparams where {
			pop
			paperwidth paperheight 0 1 
			{setpageparams} stopped 
		} { 
			true 
		} ifelse
		
		{
			
			/setpagedevice where {
				pop 
				1 dict dup begin
					/PageSize [ paperwidth paperheight ] def
				end 
				{setpagedevice} stopped
			} {
				true	
			} ifelse
		} {
			false		
		} ifelse 
	end
	{cleartomark true}{cleartomark false}ifelse
} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		8 1 roll
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
		8 -1 roll
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add dup 0 ne {div} {pop pop .5} ifelse fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	[FMsetsize 0 0 FMpointsize 0 0] makefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	/FMsetsize FMpointsize def
	F 
	} bind def
/QQ { 
	/FMsetsize exch def
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	2 copy 0.0 0.0 1.0 5 3 roll arc 
	round cvi 360 mod exch round cvi 360 mod eq {closepath} if 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.5) FMVERSION
1 1 0 0 612 792 0 1 7 FMDOCUMENT
%%IncludeFont: Times-Roman
0 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "2" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 1 FMBEGINPAGE
0 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 1 K
J
0 18 Q
0 X
(Player 1 card) 103.3 568.18 T
59.62 601.08 8 541.95 101.21 541.95 3 Y
7 X
V
0.5 H
2 Z
0 X
N
(52) 49.74 568.38 T
31.65 568.38 M
 45.03 558.72 67.18 558.42 80.34 569.77 D
N
(Player 2 card) 103.3 506.96 T
59.62 539.86 8 480.73 101.21 480.73 3 Y
7 X
V
0 X
N
(51) 49.74 507.17 T
31.65 507.17 M
 45.03 497.51 67.18 497.2 80.34 508.56 D
N
59.62 480.73 8 421.6 101.21 421.6 3 Y
7 X
V
3 H
0 X
N
(8) 54.24 448.04 T
31.65 448.04 M
 45.03 438.38 67.18 438.07 80.34 449.43 D
N
(Public card 1) 103.3 388.01 T
59.62 420.91 8 361.78 101.21 361.78 3 Y
7 X
V
0.5 H
0 X
N
(50) 49.74 388.21 T
31.65 388.21 M
 45.03 378.56 67.18 378.25 80.34 389.6 D
N
(Betting round 2) 103.3 328.88 T
59.62 361.78 8 302.65 101.21 302.65 3 Y
7 X
V
3 H
0 X
N
(8) 54.24 329.08 T
31.65 329.08 M
 45.03 319.43 67.18 319.12 80.34 330.47 D
N
(Public card 2) 103.3 268.36 T
59.62 301.26 8 242.13 101.21 242.13 3 Y
7 X
V
0.5 H
0 X
N
(49) 49.74 268.56 T
31.65 268.56 M
 45.03 258.91 67.18 258.6 80.34 269.95 D
N
(Betting round 3) 103.3 209.23 T
59.62 242.13 8 183 101.21 183 3 Y
7 X
V
3 H
0 X
N
(8) 54.24 209.43 T
31.65 209.43 M
 45.03 199.78 67.18 199.47 80.34 210.83 D
N
288.01 601.08 236.38 541.95 329.6 541.95 3 Y
7 X
V
0.5 H
0 X
N
(52) 278.12 568.38 T
260.03 568.38 M
 273.41 558.72 295.56 558.42 308.73 569.77 D
N
288.01 539.86 236.38 480.73 329.6 480.73 3 Y
7 X
V
0 X
N
(51) 278.12 507.17 T
260.03 507.17 M
 273.41 497.51 295.56 497.2 308.73 508.56 D
N
288.01 480.73 236.38 421.6 329.6 421.6 3 Y
7 X
V
3 H
0 X
N
(8) 282.62 448.04 T
260.03 448.04 M
 273.41 438.38 295.56 438.07 308.73 449.43 D
N
288.01 361.78 236.38 302.65 329.6 302.65 3 Y
7 X
V
0.5 H
0 X
N
(8) 282.62 329.08 T
260.03 329.08 M
 273.41 319.43 295.56 319.12 308.73 330.47 D
N
288.01 242.13 236.38 183 329.6 183 3 Y
7 X
V
0 X
N
(8) 282.62 209.43 T
260.03 209.43 M
 273.41 199.78 295.56 199.47 308.73 210.83 D
N
417.39 601.08 365.77 541.95 458.98 541.95 3 Y
7 X
V
0 X
N
(52) 407.5 568.38 T
389.42 568.38 M
 402.79 558.72 424.94 558.42 438.11 569.77 D
N
417.39 539.86 365.77 480.73 458.98 480.73 3 Y
7 X
V
0 X
N
(51) 407.5 507.17 T
389.42 507.17 M
 402.79 497.51 424.94 497.2 438.11 508.56 D
N
417.39 361.78 365.77 302.65 458.98 302.65 3 Y
7 X
V
3 H
0 X
N
(8) 412.01 329.08 T
389.42 329.08 M
 402.79 319.43 424.94 319.12 438.11 330.47 D
N
417.39 242.13 365.77 183 458.98 183 3 Y
7 X
V
0.5 H
0 X
N
(8) 412.01 209.43 T
389.42 209.43 M
 402.79 199.78 424.94 199.47 438.11 210.83 D
N
538.43 601.08 486.8 541.95 580.02 541.95 3 Y
7 X
V
0 X
N
(52) 528.54 568.38 T
510.46 568.38 M
 523.83 558.72 545.98 558.42 559.15 569.77 D
N
538.43 539.86 486.8 480.73 580.02 480.73 3 Y
7 X
V
0 X
N
(51) 528.54 507.17 T
510.46 507.17 M
 523.83 497.51 545.98 497.2 559.15 508.56 D
N
538.43 242.13 486.8 183 580.02 183 3 Y
7 X
V
3 H
0 X
N
(8) 533.04 209.43 T
510.46 209.43 M
 523.83 199.78 545.98 199.47 559.15 210.83 D
N
287.86 421.6 287.86 361.08 2 L
0.5 H
N
287.86 302.65 287.86 242.13 2 L
N
(expected) 292.73 386.82 T
(value) 299.68 372.21 T
(expected) 296.21 276.22 T
(value) 303.16 261.61 T
417.24 480.73 417.24 361.08 2 L
N
(public) 440.89 425.08 T
(knowledge) 434.63 405.6 T
538.28 242.13 538.28 480.73 2 L
1 H
N
417.24 242.13 417.24 301.95 2 L
N
(expected) 427.68 272.04 T
(value) 434.63 257.43 T
(public) 554.28 377.08 T
(knowledge) 548.02 357.6 T
0 24 Q
(Full Game) 12 623 T
(Round 1) 258 617 T
(Round 2) 389 618 T
(Round 3) 510 618 T
0 18 Q
(Betting round 1) 103.3 436.83 T
FMENDPAGE
%%EndPage: "2" 1
%%Trailer
FMENDDOCUMENT
%%PageOrder: Descend
%%Pages: 2
%%DocumentFonts: Times-Roman
%%DocumentNeedsFonts: Times-Roman
%%DocumentSuppliedFonts:
%%EOF

%%EndDocument

 endTexFig
 523 3113 a Fh(Fig.)15 b(4.)35 b Fj(Appro)n(ximating)f(Rho)r(de)h
(Island)g(Hold'em)g(b)n(y)f(handling)h(b)r(etting)h(rounds)f(indep)r
(en-)523 3205 y(den)n(tly)22 b(\(using)g(exp)r(ected)g(v)l(alue)h(for)g
(future)g(cards,)g(\014lling)g(in)g(public)f(kno)n(wledge)h(from)g
(previous)523 3296 y(rounds\))648 3729 y Fm(Figure)e(4)h(illustrates)f
(the)h(pro)r(cess)f(of)h(handling)g(the)g(b)r(etting)h(rounds)e(indep)r
(enden)n(tly)-7 b(.)523 3828 y(W)g(e)22 b(replicate)g(the)g(full)h
(game)e(tree)g(three)h(times,)g(once)g(for)f(eac)n(h)g(b)r(etting)i
(round.)f(T)-7 b(o)21 b(solv)n(e)523 3928 y(the)31 b(\014rst)f(b)r
(etting)h(round,)f(w)n(e)g(mak)n(e)g(the)h(assumption)f(that)g(our)g
(decisions)g(in)g(the)h(\014rst)523 4028 y(b)r(etting)j(round)f(are)g
(not)g(v)n(ery)g(sensitiv)n(e)g(to)g(whether)g(future)h(b)r(etting)h
(decisions)d(come)523 4127 y(b)r(efore)f(or)f(after)h(additional)g
(cards)f(are)g(dealt.)h(By)g(mo)n(ving)g(the)g(dealing)g(of)g(the)h
(public)523 4227 y(cards)i(to)g(the)h(end)g(of)g(the)g(game,)f(w)n(e)g
(can)g(then)i(compute)e(exp)r(ected)h(v)-5 b(alues)35
b(o)n(v)n(er)e(the)523 4327 y(dealt)28 b(cards)e(and)h(remo)n(v)n(e)f
(the)i(corresp)r(onding)e(branc)n(hes)g(from)i(the)g(game)e(tree.)648
4426 y(The)c(a)n(v)n(erage)d(exp)r(ected)j(pa)n(y)n(o\013)e(can)i(b)r
(e)g(calculated)g(b)n(y)f(exhaustiv)n(ely)g(going)g(through)523
4526 y(eac)n(h)36 b(no)r(de.)g(This)h(w)n(orks)e(for)h(a)g(game)g(suc)n
(h)g(as)g(Rho)r(de)h(Island)f(Hold'em.)g(But,)h(for)f(a)523
4625 y(larger)25 b(game)i(suc)n(h)g(as)f(T)-7 b(exas)27
b(Hold'em,)g(a)g(randomized)f(sim)n(ulation)h(can)g(b)r(e)g(p)r
(erformed)523 4725 y(to)h(estimate)f(the)h(a)n(v)n(erage)d(exp)r(ected)
j(pa)n(y)n(o\013.)648 4825 y(Using)j(this)g(tec)n(hnique,)h(the)f(game)
g(tree)g(for)g(solving)f(the)i(\014rst)f(b)r(etting)h(round)f(no)n(w)
523 4924 y(con)n(tains)25 b(around)h(1.4M)g(lea)n(v)n(es)e(and)j(can)f
(b)r(e)g(solv)n(ed)g(o\017ine)g(in)h(appro)n(ximately)d(15)i(min-)p
eop
%%Page: 9 9
9 8 bop 2370 232 a Fj(Game-Theoretic)26 b(P)n(ok)n(er)238
b(9)523 448 y Fm(utes.)23 b(W)-7 b(e)23 b(are)f(curren)n(tly)g
(uncertain)h(regarding)d(the)k(accuracy)d(of)i(the)g(strategy)e
(obtained)523 548 y(using)g(this)h(tec)n(hnique.)g(Because)e(no)i
(information)f(ab)r(out)g(past)h(b)r(etting)g(decisions)f(is)g(lost,)
523 648 y(w)n(e)27 b(h)n(yp)r(othesize)g(that)h(the)g(strategy)f(found)
g(this)h(w)n(a)n(y)f(is)g(optimal)h(or)e(v)n(ery)h(close)g(to)g(it.)648
749 y(T)-7 b(o)32 b(solv)n(e)f(the)i(game)f(tree)h(for)f(the)h(second)f
(b)r(etting)h(round,)g(w)n(e)f(need)h(to)f(build)i(the)523
849 y(part)e(of)g(the)h(tree)f(that)g(represen)n(ts)f(the)i(previous)e
(round)g(as)h(w)n(ell.)g(Again,)g(w)n(e)g(need)g(to)523
948 y(deal)c(with)g(the)h(branc)n(hing)e(caused)g(b)n(y)h(future)g(c)n
(hance)f(ev)n(en)n(ts)h(\(outcome)g(uncertain)n(t)n(y\).)523
1048 y(W)-7 b(e)35 b(ha)n(v)n(e)f(c)n(hosen)f(the)i(alternativ)n(e)f
(of)g(completely)h(ignoring)e(the)i(previous)e(round,)i(so)523
1148 y(w)n(e)29 b(can)f(k)n(eep)h(our)f(game)g(tree)g(at)h(a)g
(reasonable)e(size.)h(The)h(tradeo\013)f(here)h(is)g(the)g(loss)f(of)
523 1247 y(information)34 b(\(the)h(decisions)f(made)g(b)n(y)h(the)g
(pla)n(y)n(ers)d(are)i(lost)g(and)g(those)h(ma)n(y)f(rev)n(eal)523
1347 y(information)f(ab)r(out)h(the)g(opp)r(onen)n(t's)f(hidden)h
(cards\).)f(Ho)n(w)n(ev)n(er,)f(the)i(resulting)f(game)523
1446 y(tree)26 b(only)g(has)g(around)f(170K)g(lea)n(v)n(es)g(and)h(can)
g(b)r(e)h(solv)n(ed)e(in)i(a)f(few)h(seconds.)e(The)i(third)523
1546 y(round)g(is)h(ev)n(en)f(smaller)f(\(around)h(21K)f(lea)n(v)n
(es\))h(and)g(is)h(solv)n(ed)e(in)i(under)g(a)f(second.)523
1821 y Fg(5)112 b(Implemen)m(tation)35 b(and)j(Ev)-6
b(aluation)523 2030 y Fm(Using)20 b(the)h(tec)n(hniques)e(from)h(the)h
(previous)e(section,)h(w)n(e)f(ha)n(v)n(e)g(reduced)h(the)h(game)e
(tree\(s\))523 2129 y(for)24 b(Rho)r(de)i(Island)e(Hold'em)h(to)g(a)g
(manageable)e(size.)i(Ho)n(w)n(ev)n(er,)e(there)i(is)f(a)h(danger)f
(that)523 2229 y(the)35 b(appro)n(ximation)e(pro)r(duced)i(will)g(lead)
g(to)f(strategies)g(far)g(from)h(the)g(optimal)g(pla)n(y)-7
b(.)523 2328 y(T)g(o)26 b(ev)-5 b(aluate)26 b(the)h(p)r(erformance)f
(of)h(our)e(program,)g(w)n(e)h(designed)h(sev)n(eral)d(opp)r(onen)n(ts)
j(for)523 2428 y(it)32 b(to)e(comp)r(ete)i(against.)e(First,)h(w)n(e)f
(designed)h(a)g(rule-based)e(pla)n(y)n(er)h(\(RB\),)i(detailed)f(in)523
2528 y(the)26 b(App)r(endix,,)h(that)f(em)n(ulates)g(ho)n(w)f(a)g(go)r
(o)r(d)h(h)n(uman)f(pla)n(y)n(er)g(migh)n(t)h(pla)n(y)f(the)h(game)f
(of)523 2627 y(Rho)r(de)e(Island)g(Hold'em.)g(The)g(program)e
(generates)g(randomized)h(strategies)g(dep)r(ending)523
2727 y(on)32 b(the)h(state)f(of)g(the)h(game.)f(Next,)h(w)n(e)f(mo)r
(di\014ed)g(the)h(rule-based)e(program)g(to)h(mo)r(del)523
2827 y(di\013eren)n(t)k(pla)n(y)n(er)e(b)r(eha)n(viors.)h(Some)g(pla)n
(y)n(ers)f(are)h(willing)h(to)g(risk)f(more)g(\(risk-seeking)523
2926 y(pla)n(y)n(ers\))23 b(and)i(pursue)f(more)g(aggressiv)n(e)e
(strategies)h(\(A)n(G\),)i(while)g(others)f(are)g(more)g(con-)523
3026 y(serv)-5 b(ativ)n(e)24 b(\(CON\))h(and)g(do)g(not)g(risk)f(m)n
(uc)n(h)h(\(risk-a)n(v)n(erse)d(pla)n(y)n(ers\).)h(W)-7
b(e)26 b(use)f(appropriate)523 3125 y(rules)i(to)h(mo)r(del)f(b)r(oth)h
(t)n(yp)r(es.)648 3227 y(W)-7 b(e)37 b(also)g(ha)n(v)n(e)f(an)h(opp)r
(onen)n(t-mo)r(deling)g(program)f(\(OPP\))g(to)i(pla)n(y)e(the)i(game)f
(of)523 3327 y(Rho)r(de)g(Island)g(Hold'em.)g(This)g(program)e(pla)n
(ys)h(b)n(y)g(assuming)g(its)h(opp)r(onen)n(t)g(is)g(RB.)523
3426 y(It)g(uses)g(its)g(kno)n(wledge)f(of)h(RB's)g(b)r(eha)n(vior)f
(to)h(compute)g(a)g(probabilit)n(y)f(distribution)523
3526 y(o)n(v)n(er)23 b(the)j(hidden)g(card)e(giv)n(en)h(the)g(observ)n
(ed)f(b)r(etting)i(b)r(eha)n(vior.)e(It)h(then)h(mak)n(es)e(c)n(hoices)
523 3625 y(to)31 b(maximize)f(its)h(exp)r(ected)h(winnings)e
(\(calculated)h(b)n(y)f(random)g(sampling\).)h(This)g(is)f(a)523
3725 y(strategy)c(used)i(in)g(the)g(successful)f(Loki)g(program)e(for)j
(pla)n(ying)e(T)-7 b(exas)27 b(Hold'em)h([1].)648 3827
y(Using)j(the)h(\014v)n(e)f(opp)r(onen)n(ts,)g(w)n(e)g(ev)-5
b(aluated)31 b(the)h(e\013ectiv)n(eness)f(of)g(our)g(program.)f(A)523
3926 y(thousand)k(games)e(w)n(ere)h(pla)n(y)n(ed)g(b)r(et)n(w)n(een)h
(our)f(program)f(and)i(eac)n(h)f(of)h(the)g(\014v)n(e)g(opp)r(o-)523
4026 y(nen)n(ts.)28 b(During)f(the)h(comp)r(etition,)g(eac)n(h)f
(program)f(pla)n(y)n(ed)g(500)g(games)h(as)g(pla)n(y)n(er)f(1)h(and)523
4125 y(the)k(other)e(500)g(as)h(pla)n(y)n(er)e(2.)i(This)g(is)g(done)g
(so)g(that)h(no)e(one)h(program)e(has)i(the)h(adv)-5
b(an-)523 4225 y(tage)23 b(due)h(to)f(p)r(osition.)h(W)-7
b(e)24 b(felt)g(1,000)e(total)h(games,)g(whic)n(h)g(corresp)r(onds)f
(to)i(roughly)e(30)523 4325 y(hours)31 b(of)g(p)r(ok)n(er)g(pla)n
(ying,)g(w)n(ould)g(mak)n(e)g(for)g(a)g(meaningful)h(comparison.)e(The)
h(results,)523 4424 y(in)d(terms)f(of)h(units)g(gained,)f(are)f
(summarized)h(in)h(T)-7 b(able)27 b(1.)648 4526 y(F)-7
b(rom)31 b(T)-7 b(able)31 b(1,)g(w)n(e)h(see)f(that)h(our)f(program)e
(b)r(eat)j(all)f(of)h(the)g(opp)r(onen)n(ts.)f(The)h(op-)523
4625 y(p)r(onen)n(t)25 b(mo)r(deling)f(program)e(w)n(as)i(the)h
(toughest)f(comp)r(etitor,)g(but)h(the)g(system)f(w)n(as)g(still)523
4725 y(able)k(to)h(win)g(on)f(a)n(v)n(erage,)e(to)j(the)g(tune)g(of)g
(5.4)e(units)j(p)r(er)e(100)f(games.)h(It)h(is)g(in)n(teresting)523
4825 y(to)f(see)f(that)h(the)h(aggressiv)n(e)24 b(pla)n(y)n(er)j(\(A)n
(G\))h(and)g(the)g(conserv)-5 b(ativ)n(e)26 b(pla)n(y)n(er)g(\(CON\))j
(b)r(oth)523 4924 y(did)c(w)n(orse)e(than)i(the)g(normal)f(rule-based)f
(system)i(\(RB\).)g(A)n(G)g(lost)f(more)g(money)g(proba-)p
eop
%%Page: 10 10
10 9 bop 523 232 a Fj(10)199 b(Shi)26 b(and)f(Littman)787
417 y Fh(T)-7 b(able)28 b(1.)e Fj(Units)f(gained)h(p)r(er)g(100)h
(hands)e(b)n(y)g(our)g(system)g(v)n(ersus)h(opp)r(onen)n(ts)p
1453 646 1023 4 v 1451 738 4 92 v 1689 738 V 1726 710
a(RB)p 1870 738 V 87 w(A)n(G)p 2090 738 V 63 w(CON)p
2286 738 V 23 w(OPP)p 2473 738 V 1453 741 1023 4 v 1451
832 4 92 v 1465 805 a(Result)p 1690 832 V 23 w(+8.3)p
1870 832 V 24 w(+12.7)p 2089 832 V 32 w(+9.1)p 2286 832
V 34 w(+5.4)p 2473 832 V 1453 836 1023 4 v 852 1028 a(RB)g(=)f
(Rule-based)g(\(Normal\))264 b(A)n(G)26 b(=)f(Rule-based)g(\(Aggressiv)
n(e\))852 1119 y(CON)h(=)f(Rule-based)g(\(Conserv)l(ativ)n(e\))e(OPP=)j
(Opp)r(onen)n(t-mo)r(deling)523 1422 y Fm(bly)h(due)h(to)f(its)g
(aggressiv)n(eness)d(in)j(b)r(etting)h(and)f(blu\016ng)g(in)h
(inappropriate)d(situations.)523 1522 y(CON)h(lost)f(more)g(b)r(ecause)
g(it)i(did)f(not)f(tak)n(e)g(adv)-5 b(an)n(tage)25 b(of)g(blu\016ng)h
(situations)g(and)f(also)523 1621 y(probably)i(got)f(blu\013ed)j(out)f
(of)f(man)n(y)g(hands.)648 1722 y(W)-7 b(e)37 b(analyzed)g(the)h
(program's)d(pla)n(y)i(and)g(found)h(that)g(it)g(w)n(as)e(successfully)
h(using)523 1822 y(standard)d(strategies)g(suc)n(h)h(as)f(blu\016ng)i
(and)f(slo)n(w)f(pla)n(ying.)g(One)h(unexp)r(ected)h(asp)r(ect)523
1922 y(w)n(as)29 b(early)f(round)i(blu\016ng:)g(h)n(uman)f(pla)n(y)n
(ers)f(are)h(usually)g(advised)g(against)g(blu\016ng)h(in)523
2021 y(the)k(early)e(rounds)h(of)g(pla)n(y)g(with)g(a)g(lo)n(w)g(p)r
(oten)n(tial)g(hand,)h(whereas)e(the)i(program)d(w)n(as)523
2121 y(blu\016ng)40 b(in)g(these)f(situations.)h(Because)e(of)i(the)g
(appro)n(ximation)e(due)i(to)f(computing)523 2221 y(indep)r(enden)n(t)
25 b(b)r(etting)f(rounds,)f(it)i(w)n(as)d(p)r(ossible)i(that)g(this)g
(b)r(eha)n(vior)f(w)n(as)f(a)i(sub)r(optimal)523 2320
y(artifact.)k(T)-7 b(o)29 b(try)f(to)h(rule)f(this)h(out,)g(w)n(e)f
(generated)g(a)g(new)h(strategy)e(that)i(matc)n(hed)g(the)523
2420 y(computed)20 b(strategy)e(ev)n(erywhere,)f(but)j(inhibited)h
(\014rst)e(and)g(second)g(round)g(blu\016ng)g(with)523
2519 y(lo)n(w)j(p)r(oten)n(tial)g(hands.)1249 2489 y
Fl(3)1309 2519 y Fm(As)h(pla)n(y)n(er)d(2,)j(this)g(strategy)e(scored)g
(+8.5)g(against)h(RB,)g(whereas)523 2619 y(the)34 b(computed)f
(strategy)f(scored)g(+11.3,)f(suggesting)h(that)i(this)f(t)n(yp)r(e)h
(of)f(blu\016ng)g(is)g(a)523 2719 y(v)-5 b(aluable)27
b(strategy)f(in)i(this)g(game.)523 2993 y Fg(6)112 b(Conclusion)523
3200 y Fm(Our)24 b(program)f(did)i(an)g(excellen)n(t)f(job)h(of)g(pla)n
(ying)f(the)h(game)f(of)h(Rho)r(de)g(Island)g(Hold'em.)523
3300 y(W)-7 b(e)35 b(w)n(ould)f(lik)n(e)g(to)g(see)g(it)h(scale)f(up)h
(to)f(pla)n(y)g(a)g(more)f(complex)h(game)g(suc)n(h)g(as)g(T)-7
b(exas)523 3399 y(Hold'em.)20 b(Some)g(of)g(the)g(main)g(c)n(hallenges)
e(that)i(remain)f(to)h(b)r(e)g(solv)n(ed)f(are)g(the)h(coarseness)523
3499 y(of)28 b(the)f(deriv)n(ed)g(strategy)f(from)i(using)f(a)g
(limited)h(n)n(um)n(b)r(er)f(of)h(bins)g(in)f(the)h(computation)523
3599 y(\(probably)d(b)r(et)n(w)n(een)i(5)e(and)i(10\))e(and)h(the)h
(fact)f(that)h(the)g(system)f(needs)g(to)g(either)g(cac)n(he)523
3698 y(a)32 b(large)f(n)n(um)n(b)r(er)h(of)g(precomputed)g(games)f(or)g
(solv)n(e)g(large)g(linear)h(programs)e(during)h(a)523
3798 y(matc)n(h.)36 b(Also,)g(most)g(T)-7 b(exas)35 b(Hold'em)h(games)f
(are)h(pla)n(y)n(ed)f(b)r(et)n(w)n(een)h(7)g(to)g(12)f(pla)n(y)n(ers,)
523 3897 y(and)c(curren)n(tly)-7 b(,)30 b(w)n(e)h(are)f(not)h(a)n(w)n
(are)e(of)i(game-theoretic)e(approac)n(hes)g(for)h(solving)g(large)523
3997 y(m)n(ulti-pla)n(y)n(er)c(games)h(of)g(imp)r(erfect)h
(information.)648 4098 y(Games)g(are)g(excellen)n(t)g(places)g(to)h
(explore)f(new)h(ideas)f(b)r(ecause)g(of)h(their)g(clearly)e(de-)523
4198 y(\014ned)21 b(rules,)f(sp)r(eci\014c)g(goals,)f(and)h(the)h(opp)r
(ortunit)n(y)f(they)g(presen)n(t)g(for)g(comparison)e(to)i(h)n(u-)523
4298 y(man)25 b(exp)r(erts.)f(In)h(the)h(past,)e(game-pla)n(ying)f
(researc)n(h)g(fo)r(cused)h(on)h(deterministic)g(games)523
4397 y(of)32 b(p)r(erfect)g(information.)f(But,)h(in)f(computer)h
(science)f(and)g(emerging)g(electronic)g(com-)523 4497
y(merce)18 b(applications,)g(man)n(y)g(problems)g(are)f(made)h
(di\016cult)i(b)n(y)e(unreliable)g(and)g(imp)r(erfect)523
4596 y(information.)34 b(It)g(is)g(our)f(hop)r(e)h(that)h(b)n(y)f(tac)n
(kling)f(a)g(sto)r(c)n(hastic)h(game)f(with)h(imp)r(erfect)p
523 4656 473 4 v 546 4710 a Fk(3)606 4742 y Fj(W)-6 b(e)41
b(considered)g(replacing)h(these)f(blu\013s)f(with)i(an)f(equal)f(n)n
(um)n(b)r(er)f(of)j(semi-blu\013s)e(from)606 4833 y(stronger)35
b(hands,)f(but)f(since)i(the)f(program)g(is)g(already)h
(semi-blu\016ng,)e(w)n(e)i(though)n(t)e(addi-)606 4924
y(tiona)26 b(semi-blu\013s)f(w)n(ould)h(only)g(h)n(urt)e(its)i(p)r
(erformance)g(further.)p eop
%%Page: 11 11
11 10 bop 2370 232 a Fj(Game-Theoretic)26 b(P)n(ok)n(er)199
b(11)523 448 y Fm(information)34 b(suc)n(h)g(as)g(p)r(ok)n(er,)f(w)n(e)
h(can)g(learn)g(more)g(ab)r(out)g(dealing)g(with)h(uncertain)n(t)n(y)
523 548 y(and)27 b(apply)h(our)f(abstraction)f(ideas)h(to)g(other)g
(similar)g(problems.)523 1414 y Fg(A)112 b(Rule-Based)37
b(System)h(for)f(Rho)s(de)h(Island)f(Hold'em)523 2214
y Fm(F)-7 b(or)31 b(Pla)n(y)n(er)e(1)j(\(who)f(go)r(es)g(\014rst\),)h
(B)f(represen)n(ts)f(the)i(probabilit)n(y)f(of)g(b)r(etting,)i(PB)e
(rep-)523 2314 y(resen)n(ts)h(the)i(probabilit)n(y)e(of)h(b)r(etting)h
(after)f(Pla)n(y)n(er)e(1)h(passes)g(and)h(Pla)n(y)n(er)e(2)i(b)r(ets.)
h(F)-7 b(or)523 2414 y(Pla)n(y)n(er)33 b(2,)i(pB)g(represen)n(ts)f(the)
i(probabilit)n(y)e(of)i(b)r(etting)g(after)f(seeing)f(a)h(pass)g(and)g
(bB)523 2513 y(represen)n(ts)26 b(the)i(probabilit)n(y)f(of)g(b)r
(etting)i(after)e(seeing)g(a)g(b)r(et.)659 2728 y Ff(Round)k(1)p
648 2761 1706 4 v 660 2831 a Fe(Player)f(1)h(Holding)143
b(Player)31 b(1)f(B)75 b(Player)31 b(1)f(PB)660 2930
y Fm(2,3,4,5)518 b(0.05)319 b(0)660 3030 y(6,7,8,9)518
b(0.4)361 b(0.1)660 3129 y(10,J)605 b(0.9)361 b(0.9)660
3229 y(Q,K,A)517 b(1)426 b(1)p 648 3262 V 660 3332 a
Fe(Player)30 b(2)h(Holding)143 b(Player)31 b(2)f(pB)j(Player)e(2)f(bB)
660 3432 y Fm(2,3,4)583 b(0.3)361 b(0)660 3531 y(5,6,7,8)518
b(0.7)361 b(0.4)660 3631 y(9,10)606 b(0.9)361 b(0.8)660
3730 y(J,Q,K,A)451 b(1)426 b(1)p 648 3764 V 660 3833
a Ff(Round)30 b(2)p 648 3867 V 660 3936 a Fe(Player)g(1)h(Holding)143
b(Player)31 b(1)f(B)75 b(Player)31 b(1)f(PB)660 4036
y Fm(P)n(air)602 b(1)426 b(1)660 4136 y(2)26 b(card)h(straigh)n(t)g
(\015ush)c(0.9)361 b(1)660 4235 y(2)26 b(card)h(straigh)n(t)221
b(0.7)361 b(0.7)660 4335 y(2)26 b(card)h(\015ush)h(\(9-A\))107
b(0.8)361 b(0.8)660 4435 y(2)26 b(card)h(\015ush)h(\(6-8\))127
b(0.6)361 b(0.6)660 4534 y(2)26 b(card)h(\015ush)h(\(2-5\))127
b(0.4)361 b(0.4)660 4634 y(high)27 b(card)f(\(J-A\))190
b(0.5)361 b(0.5)660 4733 y(high)27 b(card)f(\(7-10\))169
b(0.5)361 b(0.4)660 4833 y(high)27 b(card)f(\(5-6\))211
b(0.3)361 b(0.1)660 4933 y(high)27 b(card)f(\(2-4\))211
b(0.1)361 b(0)p 648 4966 V eop
%%Page: 12 12
12 11 bop 523 232 a Fj(12)199 b(Shi)26 b(and)f(Littman)659
435 y Fe(Player)31 b(2)g(Holding)143 b(Player)31 b(2)f(pB)j(Player)e(2)
f(bB)659 535 y Fm(P)n(air)603 b(1)426 b(1)659 634 y(2)27
b(card)g(straigh)n(t)g(\015ush)c(1)426 b(1)659 734 y(2)27
b(card)g(straigh)n(t)221 b(0.9)361 b(0.7)659 834 y(2)27
b(card)g(\015ush)h(\(9-A\))107 b(1)426 b(1)659 933 y(2)27
b(card)g(\015ush)h(\(6-8\))127 b(0.8)361 b(0.6)659 1033
y(2)27 b(card)g(\015ush)h(\(2-5\))127 b(0.8)361 b(0.4)659
1132 y(high)28 b(card)e(\(J-A\))190 b(0.8)361 b(0.5)659
1232 y(high)28 b(card)e(\(7-10\))169 b(0.6)361 b(0.4)659
1332 y(high)28 b(card)e(\(5-6\))211 b(0.3)361 b(0.1)659
1431 y(high)28 b(card)e(\(2-4\))211 b(0.0)361 b(0.0)p
648 1465 2644 4 v 660 1534 a Ff(Round)30 b(3)p 648 1567
V 660 1637 a Fe(Player)g(1)h(Holding)143 b(Player)31
b(1)f(B)75 b(Player)31 b(1)f(PB)660 1737 y Fm(straigh)n(t)c(Flush)246
b(1)426 b(1)660 1836 y(three)27 b(of)g(a)g(kind)221 b(1)426
b(1)660 1936 y(straigh)n(t)474 b(1)426 b(1)660 2036 y(\015ush)27
b(\(9-A\))361 b(1)426 b(1)660 2135 y(\015ush)27 b(\(6-8\))381
b(0.8)361 b(0.8)660 2235 y(\015ush)27 b(\(4-5\))381 b(0.7)361
b(0.8)660 2335 y(\015ush)27 b(\(2-3\))381 b(0.4)361 b(0.4)660
2434 y(pair)611 b(1)426 b(1)660 2534 y(\(w)n(e)27 b(ha)n(v)n(e)f(the)i
(hole)f(card)g(that)h(mak)n(es)f(up)g(the)h(higher)f(pair,)g(no)h
(\015ush)f(p)r(ossible\))660 2633 y(pair)611 b(0.9)361
b(1)660 2733 y(\(w)n(e)27 b(ha)n(v)n(e)f(the)i(hole)f(card)g(that)h
(mak)n(es)f(up)g(the)h(lo)n(w)n(er)e(pair,)h(no)h(\015ush)f(p)r
(ossible\))660 2833 y(pair)611 b(0.8)361 b(1)660 2932
y(\(w)n(e)27 b(ha)n(v)n(e)f(the)i(hole)f(card)g(that)h(mak)n(es)f(up)g
(the)h(higher)f(pair,)g(\015ush)h(p)r(ossible\))660 3032
y(pair)611 b(0.5)361 b(0.9)660 3132 y(\(w)n(e)27 b(ha)n(v)n(e)f(the)i
(hole)f(card)g(that)h(mak)n(es)f(up)g(the)h(lo)n(w)n(er)e(pair,)h
(\015ush)h(p)r(ossible\))660 3231 y(pair)e(\(kic)n(k)n(er)g(J-A\))148
b(0.8)361 b(0.8)660 3331 y(\(pair)26 b(on)i(the)g(b)r(oard\))660
3430 y(pair)e(\(kic)n(k)n(er)g(8-10\))127 b(0.8)361 b(0.6)660
3530 y(pair)26 b(\(kic)n(k)n(er)g(5-7\))169 b(0.4)361
b(0.2)660 3630 y(pair)26 b(\(kic)n(k)n(er)g(2-4\))169
b(0.2)361 b(0)660 3729 y(high)27 b(card)f(\(J-A\))190
b(0.8)361 b(0.8)660 3829 y(\(no)27 b(\015ush)h(p)r(ossible\))660
3929 y(high)f(card)f(\(8-10\))169 b(0.7)361 b(0.5)660
4028 y(\(no)27 b(\015ush)h(p)r(ossible\))660 4128 y(high)f(card)f
(\(5-7\))211 b(0.3)361 b(0.2)660 4227 y(\(no)27 b(\015ush)h(p)r
(ossible\))660 4327 y(high)f(card)f(\(2-4\))211 b(0.1)361
b(0)660 4427 y(high)27 b(card)f(\(A\))261 b(0.8)361 b(0.8)660
4526 y(\(\015ush)27 b(p)r(ossible\))660 4626 y(high)g(card)f(\(J-K\))
187 b(0.7)361 b(0.7)660 4726 y(\(\015ush)27 b(p)r(ossible\))660
4825 y(high)g(card)f(\(8-10\))169 b(0.5)361 b(0.3)660
4925 y(\(\015ush)27 b(p)r(ossible\))660 5024 y(high)g(card)f(\(2-7\))
211 b(0.2)361 b(0)660 5124 y(\(\015ush)27 b(p)r(ossible\))p
648 5157 V eop
%%Page: 13 13
13 12 bop 2370 232 a Fj(Game-Theoretic)26 b(P)n(ok)n(er)199
b(13)659 435 y Fe(Player)31 b(2)g(Holding)38 b(Player)31
b(2)f(pB)j(Player)e(2)f(bB)659 535 y Fm(straigh)n(t)d(Flush)141
b(1)426 b(1)659 634 y(three)28 b(of)f(a)g(kind)116 b(1)426
b(1)659 734 y(straigh)n(t)370 b(1)426 b(1)659 834 y(\015ush)28
b(\(9-A\))256 b(1)426 b(1)659 933 y(\015ush)28 b(\(6-8\))276
b(1)426 b(0.8)659 1033 y(\015ush)28 b(\(4-5\))276 b(0.8)361
b(0.5)659 1132 y(\015ush)28 b(\(2-3\))276 b(0.5)361 b(0.3)659
1232 y(pair)507 b(1)426 b(1)659 1332 y(\(w)n(e)28 b(ha)n(v)n(e)e(the)i
(hole)f(card)g(that)h(mak)n(es)f(up)g(the)h(higher)f(pair,)g(no)h
(\015ush)f(p)r(ossible\))659 1431 y(pair)507 b(1)426
b(1)659 1531 y(\(w)n(e)28 b(ha)n(v)n(e)e(the)i(hole)f(card)g(that)h
(mak)n(es)f(up)g(the)h(lo)n(w)n(er)e(pair,)h(no)h(\015ush)f(p)r
(ossible\))659 1631 y(pair)507 b(1)426 b(1)659 1730 y(\(w)n(e)28
b(ha)n(v)n(e)e(the)i(hole)f(card)g(that)h(mak)n(es)f(up)g(the)h(higher)
f(pair,)g(\015ush)h(p)r(ossible\))659 1830 y(pair)507
b(1)426 b(0.8)659 1929 y(\(w)n(e)28 b(ha)n(v)n(e)e(the)i(hole)f(card)g
(that)h(mak)n(es)f(up)g(the)h(lo)n(w)n(er)e(pair,)h(\015ush)h(p)r
(ossible\))659 2029 y(pair)f(\(kic)n(k)n(er)f(J-A\))43
b(1)426 b(0.8)659 2129 y(\(pair)27 b(on)h(the)g(b)r(oard\))659
2228 y(pair)f(\(kic)n(k)n(er)f(8-10\))c(0.9)361 b(0.5)659
2328 y(pair)27 b(\(kic)n(k)n(er)f(5-7\))64 b(0.2)361
b(0.1)659 2428 y(pair)27 b(\(kic)n(k)n(er)f(2-4\))64
b(0)426 b(0)659 2527 y(high)28 b(card)e(\(J-A\))85 b(0.9)361
b(0.8)659 2627 y(\(no)28 b(\015ush)g(p)r(ossible\))659
2726 y(high)g(card)e(\(8-10\))64 b(0.7)361 b(0.3)659
2826 y(\(no)28 b(\015ush)g(p)r(ossible\))659 2926 y(high)g(card)e
(\(5-7\))106 b(0.3)361 b(0)659 3025 y(\(no)28 b(\015ush)g(p)r
(ossible\))659 3125 y(high)g(card)e(\(2-4\))106 b(0)426
b(0)659 3225 y(high)28 b(card)e(\(A\))156 b(0.9)361 b(0.8)659
3324 y(\(\015ush)28 b(p)r(ossible\))659 3424 y(high)g(card)e(\(J-K\))82
b(0.8)361 b(0.7)659 3523 y(\(\015ush)28 b(p)r(ossible\))659
3623 y(high)g(card)e(\(8-10\))64 b(0.5)361 b(0.3)659
3723 y(\(\015ush)28 b(p)r(ossible\))659 3822 y(high)g(card)e(\(2-7\))
106 b(0.2)361 b(0)659 3922 y(\(\015ush)28 b(p)r(ossible\))p
648 3955 2644 4 v 523 4150 a Fg(References)523 4301 y
Fj(1.)42 b(Darse)37 b(Billings,)i(Denis)e(P)n(app,)f(Jonathan)h(Sc)n
(hae\013er,)g(and)f(Duane)g(Szafron.)67 b(Opp)r(onen)n(t)624
4392 y(mo)r(deling)35 b(in)f(p)r(ok)n(er.)60 b(In)34
b Fa(Pr)l(o)l(c)l(e)l(e)l(dings)j(of)e(the)i(15th)f(National)g(Confer)l
(enc)l(e)h(on)f(A)n(rti\014cial)624 4484 y(Intel)t(ligenc)l(e)p
Fj(,)27 b(pages)f(493{499,)j(1998.)523 4567 y(2.)42 b(Leslie)27
b(P)n(ac)n(k)e(Kaelbling,)h(Mic)n(hael)h(L.)e(Littman,)g(and)f(Andrew)h
(W.)g(Mo)r(ore.)36 b(Reinforcemen)n(t)624 4658 y(learning:)27
b(A)e(surv)n(ey)-6 b(.)33 b Fa(Journal)c(of)e(A)n(rti\014cial)h(Intel)t
(ligenc)l(e)f(R)l(ese)l(ar)l(ch)p Fj(,)i(4:237{285,)g(1996.)523
4742 y(3.)42 b(Daphne)32 b(Koller,)i(Nimro)r(d)e(Megiddo,)h(and)g
(Bernhard)f(v)n(on)g(Stengel.)55 b(E\016cien)n(t)33 b(computa-)624
4833 y(tion)28 b(of)g(equilibria)g(for)g(extensiv)n(e)e(t)n(w)n(o-p)r
(erson)i(games.)39 b Fa(Games)30 b(and)f(Ec)l(onomic)h(Behavior)p
Fj(,)624 4924 y(14\(2\):247{259,)g(1996.)p eop
%%Page: 14 14
14 13 bop 523 232 a Fj(14)199 b(Shi)26 b(and)f(Littman)523
448 y(4.)42 b(Daphne)30 b(Koller)i(and)e(Avi)g(Pfe\013er.)50
b(Represen)n(tations)31 b(and)f(solutions)i(for)g(game-theoretic)624
540 y(problems.)i Fa(A)n(rti\014cial)28 b(Intel)t(ligenc)l(e)p
Fj(,)e(94\(1{2\):167{215,)31 b(1997.)523 631 y(5.)42
b(Avi)18 b(Pfe\013er,)h(Daphne)e(Koller,)i(and)f(Ken)f(T.)i(T)-6
b(akusaga)n(w)n(a.)23 b(State-space)18 b(appro)n(ximations)g(for)624
722 y(extensiv)n(e)26 b(form)g(games.)37 b(W)-6 b(orkshop)26
b(pap)r(er)g(at)g(First)h(W)-6 b(orld)26 b(Congress)i(on)f(Game)f
(Theory)-6 b(,)624 814 y(2000.)523 905 y(6.)42 b(Ric)n(hard)21
b(S.)g(Sutton)f(and)h(Andrew)f(G.)i(Barto.)28 b Fa(R)l(einfor)l(c)l
(ement)c(L)l(e)l(arning:)g(An)g(Intr)l(o)l(duction)p
Fj(.)624 996 y(The)i(MIT)g(Press,)h(1998.)523 1088 y(7.)42
b(J.)30 b(v)n(on)e(Neumann)f(and)h(O.)h(Morgenstern.)45
b Fa(The)l(ory)32 b(of)e(Games)h(and)g(Ec)l(onomic)g(Behavior)p
Fj(.)624 1179 y(Princeton)26 b(Univ)n(ersit)n(y)f(Press,)i(Princeton,)f
(NJ,)g(1947.)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
